openapi: 3.0.3

info:
  title: Inperium Hub Server API
  description: |
     This RESTful API provides access to the Inperium Hub Server that manages tenant and app settings, user rights and permissions, etc.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/hub
  - url: https://api.inperium.com/v1/hub

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]

tags:
  - name: App Settings
    description: |
      Enable integration with other apps such as Stripe.
  - name: Auth
    description: |
      Inperium enables you to authenticate with the Bearer token or an API key.
  - name: API Keys
    description: |
      API keys are used instead of bearer tokens to authenticate applications connecting to Inperium via API.
  - name: Dictionaries
    description: |
      Dictionaries are preset lists of values such as permissions or currencies that you can choose from when configuring the product.
  - name: Features
    description: |
      Each subscription plan includes a list features that will be available to a customer after signing up for Inperium. These features are bound to Inperium products and plans.
  - name:  Health checks
    description: |
      Since Inperium runs multiple services under the hood, it's crutial to identify the health state of each service. You can rely on the health state information when troubleshooting issues.  
  - name: Limits
    description: |
      Volume- and usage-based restrictions applied to tenant subscriptions and plans.
  - name: Permissions
    description: |
      Inperium enables customers delegate access to features within Inperum products. Each permission describes an atomic action, for example, the ability to import contacts. The permissions are grouped in roles that are later assigned to users. The permissions are typically associated with features, for example the ability to retrieve companies is a part of the 'Company management' feature. The 'MANAGE_TENANT_SETTINGS' is a unique permission that isn't tied to any feature.
  - name: Products
    description: |
      Inperium provides several solutions that seamlessly integrate with each other and your business ecosystem. The list of products keeps evolving and currently includes Inperium Talk and Sell. While each product has its own API as a service, their subscriptions are managed thought the Hub API.
  - name: Roles
    description: |
      Configure user roles to delegate access to Inperium features. For example, you can distinguish administrators and managers.
  - name: Subscriptions
    description: |
      Tenants have an option to choose the subscription type and billing period.      
  - name: Tenants
    description: |
      Tenant is the central concept of Inperium. On a high level, the tenant is a company that has signed up for Inperium. With Hub API, you can configure the main tenant settings such as subscription plans, Inperium products,and users.
  - name: Users
    description: |
      Users are individuals included in tenant subscription. Depending on the role, users have access to different Inperium products and features. 


paths:
  /auth/signature:
    get:
      tags:
        - Auth
      summary: Verify signature
      description: Use this endpoint to get a public key and check Hub auth signature.
      operationId: getAuthSignature
      responses:
        200:
          description: Returns the auth signature.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSignature"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/tokens:
    post:
      tags:
        - Auth
      summary: Request a token
      description: Use this endpoint to authenticate a user. This endpoint returns an access token and refresh token.
      operationId: getAuthTokens
      requestBody:
        description: In the request body, pass information the AuthTokensRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthTokensRequest"
      responses:
        200:
          description: Returns the newly generated auth tokens.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        401:
          description: Unauthorized. The credentials are wrong or two-factor authentication is required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out
      description: Use this endpoint to log out the principal and invalidate the principal's access and refresh tokens.
      operationId: logout
      responses:
        200:
          description: The user logged out.
          content: { }
        401:
          description: Unauthorized. The credentials are wrong or two-factor authentication is required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/twoFactor/send:
    post:
      tags:
        - Auth
      summary: Request a 2FA token
      description: Use this endpoint to send a two-factor authentication token to a user.
      operationId: sendTwoFactorAuthToken
      requestBody:
        description: In the request body, pass the TwoFactorAuthTokenRequest object. It is used to verify the two-factor authentication token.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthTokenRequest"
      responses:
        200:
          description: Returns the 2FA token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwoFactorAuthTokenResponse"
        401:
          description: Unauthorized. The attempt to request a 2FA token failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/twoFactor/verify:
    post:
      tags:
        - Auth
      summary: Verify a 2FA token
      description: Use this endpoint to verify the two-factor authentication token of a user.
      operationId: verifyTwoFactorAuthToken
      requestBody:
        description: In the request body, pass the TwoFactorAuthVerificationRequest object. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthVerificationRequest"
      responses:
        200:
          description: Returns newly generated tokens.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        401:
          description: Unauthorized. The 2FA token is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /apiKeys:
    get:
      tags:
        - API Keys
      summary: Retrieve API keys
      description: Use this endpoint to get a list of API keys.
      operationId: getApiKeys
      parameters:
        - name: id
          in: query
          description: Unique ID of the API key
          schema:
            type: string
        - name: name
          in: query
          description: Name of the API key
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns API keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeys"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - API Keys
      summary: Create an API key
      description: Use this endpoint to create a new API key.
      operationId: createApiKey
      requestBody:
        description: In the request body, pass the ApiKeyRequest object. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
      responses:
        201:
          description: Returns a new API key. Make sure to save it to a secure location. Inperium Hub doesn't store API keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /apiKeys/{id}:
    get:
      tags:
        - API Keys
      summary: Get an API key
      description: Use this endpoint to retrieve an existing API key by its ID. Note that Inperium doesn't store the API key itself, just its hash or prefix.
      operationId: getApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the requested API key. 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - API Keys
      summary: Update an API key
      description: Use this endpoint to update an existing API key by its ID.
      operationId: updateApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated ApiKeyRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
      responses:
        200:
          description: Returns the updated API key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - API Keys
      summary: Delete an API key
      description: Use this endpoint to locate an API key by its ID and delete it. Note that this action will instantly revoke access for users and services utilizing this key.
      operationId: deleteApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The key has been removed.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /apiKeys/{id}/regenerate:
    put:
      tags:
        - API Keys
      summary: Regenerate a token
      description: Use this endpoint to regenerate a token for an existing API key.
      operationId: regenerateApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the updated API key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /health:
    get:
      tags:
        - Health checks
      summary: Check health
      description: Use this endpoint to verify that the microservice runs as usual.
      operationId: checkHealth
      responses:
        200:
          description: Returns empty response that is used for OK non-returning operations.
          content: { }
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/{id}:
    get:
      tags:
        - Tenants
      summary: Retrieve a tenant
      description: Use this endpoint to get information about the tenant.
      operationId: getTenant
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the Tenant object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/create:
    post:
      tags:
        - Tenants
      summary: Create a tenant
      description: Use this endpoint to create a new tenant. 
      operationId: createTenant
      requestBody:
        description: In the request body, pass the CreateTenantRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreateTenantRequest"
      responses:
        201:
          description: A new account has been created.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/confirm/{confirmationToken}:
    get:
      tags:
        - Tenants
      summary: Confirm owner
      description: Use this endpoint to confirm the account of the user who signed up for Inperium and created the tenant. Unless the tenant's owner account is verified, you cannot move any further with Inperium configuration.
      operationId: confirmTenant
      parameters:
        - name: confirmationToken
          in: path
          description: The confirmation token.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Returns a token. It means that the account has been successfully verified.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/confirm:
    get:
      tags:
        - Tenants
      summary: Resend confirmation
      description: Use this endpoint to resend the confirmation email.
      operationId: resendTenantConfirmation
      parameters:
        - name: email
          in: query
          description: Provide an email address of the tenant's owner. The owner is the user who initially signed up for Inperium.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Returns an empty response that is used for OK non-returning operations.
          content: { }
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/onboard:
    put:
      tags:
        - Tenants
      summary: Onboard a tenant
      description: Use this endpoint to add information about the tenant such as the name, company name, and employee count to finish the onboarding.
      operationId: onboardTenant
      requestBody:
        description: In the request body, pass the OnboardTenantRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/OnboardTenantRequest"
      responses:
        200:
          description: The tenant has completed onboarding.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/companyInfo:
    put:
      tags:
        - Tenants
      summary: Update company information
      description: Use this endpoint to update information about the tenant's company such as address or default timezone.
      operationId: updateTenantCompanyInfo
      requestBody:
        description: In the request body, pass the TenantCompanyInfoRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TenantCompanyInfoRequest"
      responses:
        200:
          description: The tenant has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/address:
    put:
      tags:
        - Tenants
      summary: Update an address
      description: Use this endpoint to update the address.
      operationId: updateTenantAddress
      requestBody:
        description: In the request body, pass the TenantAddressRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TenantAddressRequest"
      responses:
        200:
          description: The tenant's address has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/billingContact:
    put:
      tags:
        - Tenants
      summary: Update billing
      description: Use this endpoint to update tenant's billing details.
      operationId: updateTenantBillingContact
      requestBody:
        description: In the request body, pass the BillingContactRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/BillingContactRequest"
      responses:
        200:
          description: The billing details have been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/paymentMethod:
    put:
      tags:
        - Tenants
      summary: Update a payment method
      description: Use this endpoint to change the tenant's payment method.
      operationId: updateTenantPaymentMethod
      requestBody:
        description: In the request body, pass the PaymentMethodRequest object.
        content:          
          "*/*":
            schema:
              $ref: "#/components/schemas/PaymentMethodRequest"
      responses:
        200:
          description: The tenant's payment method has been updated. The endpoint returns the updated Tenant object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /limitUsages:
    get:
      tags:
        - Limits
      summary: Retrieve limits
      description: Use this endpoint to get a list of existing limit usages.
      operationId: getLimitUsages
      parameters:
        - name: anchor
          in: query
          description: The anchor of a referenced limit.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of limit usages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitUsages"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /internal/limitUsages:
    post:
      tags:
        - Limits
      summary: Update a limit usage
      description: Use this endpoint to update the current value of the existing limit usage.
      operationId: updateLimitUsage
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LimitUsageUpdateRequest"
      responses:
        204:
          description: The limit usage has been updated.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/invite:
    post:
      tags:
        - Users
      summary: Invite a user
      description: Use this endpoint to add a new user to Inperium. Once you create a new user and provide basic user information, he or she will receieve an invitation by email.
      operationId: inviteUser
      requestBody:
        description: In the request body, pass the UserInviteRequest object. 
        content:          
          "*/*":
            schema:
              $ref: "#/components/schemas/UserInviteRequest"
      responses:
        201:
          description: Returns a user record. It means the user has been invited to join Inperium.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/invite/confirm:
    post:
      tags:
        - Users
      summary: Confirm an invitation
      description: Use this endpoint accept the invitation. Pass user credentials to confirm invitation and finilize the process.
      operationId: confirmUserInvite
      requestBody:
        required: true
        description: In the request body, pass the UserConfirmInviteRequest object. 
        content:          
          "*/*":
            schema:
              $ref: "#/components/schemas/UserConfirmInviteRequest"
      responses:
        200:
          description: Returns authentication tokens. The user account is confirmed and the password has successfully been reset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    get:
      tags:
        - Users
      summary: Resend confirmation
      description: Use this endpoint to resend a confirmation email.
      operationId: resendUserConfirmation
      parameters:
        - name: email
          in: query
          description: The email address associated with the user.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Returns an empty response that is used for OK non-returning operations.
          content: { }
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/forgotPassword:
    post:
      tags:
        - Users
      summary: Recover a password
      description: Use this endpoint to send a "forgot password" request.
      operationId: forgotPassword
      requestBody:
        description: In the request body, pass the UserForgotPasswordRequest object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForgotPasswordRequest"
      responses:
        200:
          description: The request has been sent.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/resetPassword:
    put:
      tags:
        - Users
      summary: Reset a password
      description: Use this endpoint to reset a password. To update a password, you'll have to provide `passwordResetToken` that was sent by email.
      operationId: resetPassword
      requestBody:
        description: In the request body, pass the UserResetPasswordRequest object. 
        required: true
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/UserResetPasswordRequest"
      responses:
        200:
          description: Returns tokens. The password has successfully been reset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/me:
    get:
      tags:
        - Users
      summary: Check a current user
      description: Use this endpoint to retrieve details about the currently authenticated user.
      operationId: getPrincipalUser
      responses:
        200:
          description: Returns user data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrincipal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      summary: Update a user
      description: Use this endpoint to update the currently logged in user. 
      operationId: updatePrincipalUser
      tags:
        - Users
      requestBody:
        description: In the request body, pass the UserRequest object. 
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/password:
    put:
      tags:
        - Users
      summary: Reset a password
      description: Use this endpoint to reset the principal's password.
      operationId: updatePrincipalPassword
      requestBody:
        description: In the request body, pass the UserPasswordRequest object.
        required: true
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/UserPasswordRequest"
      responses:
        200:
          description: The password has been reset.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users:
    get:
      summary: Retrieve users
      description: Use this endpoint to get a list of users. Leverage query parameters to search for a specific user or users. This endpoint supports paging and sorting.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - name: fullName
          in: query
          description: >
            Allows searching both in "last name" or "first name".
            Supports eq, neq, in, nin, like, notlike.
          schema:
            type: string
        - name: id
          in: query
          description: Unique ID of the user.
          schema:
            type: string
        - name: email
          in: query
          description: Email address associated with the user.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns an array of user records. 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/{id}:
    get:
      summary: Get user details
      description: Use this endpoint to search for a specific user and retrieve detailed information such as full name, email, and job title.
      operationId: getUser
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the user record. 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      summary: Update a user
      description: Use this endpoint to update a specific user. Note that all user properties (fields) will be overwritten. 
      operationId: updateUser
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the UserRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    patch:
      summary: Partially update a user
      description: Use this endpoint to change some properties in the user record, e.g., the last name or email.
      operationId: updateUserPartially
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the UserPartialRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPartialRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Use this endpoint to remove a user from Inperium.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The user has been successfully deleted.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /publicAppSettings:
    get:
      summary: Get app settings
      description: Use this endpoint to retrieve a list of public app connected to a tenant account, for example Stripe or Google Analitycs.
      operationId: getPublicAppSettings
      tags:
        - App Settings
      responses:
        200:
          description: Returns the list of public apps and their settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSettings"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /products:
    get:
      summary: Retrieve products
      description: Use this endpoint to get a list of products available to your tenant, with names, available subscription plans, etc.
      operationId: getProducts
      tags:
        - Products
      responses:
        200:
          description: Returns an array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /products/{anchor}:
    get:
      summary: Get a specific product
      description: Use this endpoint to retrieve information about a specific product. 
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: anchor
          in: path
          description: The unique anchor of a product, e.g. Sell or Talk.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /products/{anchor}/plans:
    get:
      summary: Get subscription plans
      description: Use this endpoint to see the payment plans available for a certain product. You'll also see the plan that is active now.
      operationId: getProductPlanAvailabilities
      tags:
        - Products
      parameters:
        - name: anchor
          in: path
          description: The unique anchor of a product, e.g., Sell or Talk.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlanAvailability"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /features:
    get:
      summary: Retrieve features
      description: Use this endpoint to retrieve a list of available features.
      operationId: getFeatureList
      tags:
        - Features
      responses:
        200:
          description: Returns an array of features.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /features/{anchor}:
    get:
      summary: Retrieve a feature
      description: Use this endpoint to retrieve details for a specific feature.
      operationId: getFeature
      tags:
        - Features
      parameters:
        - name: anchor
          in: path
          description: The unique anchor of feature.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the feature record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /permissions:
    get:
      summary: Retrieve permissions
      description: Use this endpoint to retrieve a list of available permissions.
      operationId: getPermissionList
      tags:
        - Permissions
      responses:
        200:
          description: Returns an array with permissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /roles:
    get:
      tags:
        - Roles
      summary: Retrieve roles
      description: Use this endpoint to get a list of available roles, with permissions assigned to each role.
      operationId: getRoles
      parameters:
        - name: id
          in: query
          description: Unique ID of the role.
          schema:
            type: string
        - name: name
          in: query
          description: The role title.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of roles.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Roles
      summary: Create a role
      description: Use this endpoint to add a new role to Inperium.
      operationId: createRole
      requestBody:
        description: In the request body, pass the RoleRequest object that describes a new role.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        201:
          description: Returns the newly created role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Retrieve a role
      description: Use this endpoint to retrieve a specific role and see associated permissions.
      operationId: getRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns a requested role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Roles
      summary: Update a role
      description: Use this endpoint to update an existing role. Note that the role properties will be overwritten.
      operationId: updateRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated RoleRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        200:
          description: Returns an updated role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Use this endpoint to remove an existing role.
      operationId: deleteRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The role has been successfully deleted.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /subscriptions:
    get:
      summary: Retrieve subscriptions
      description: Use this endpoint to get a complete list of subscriptions for the current tenant.
      operationId: getSubscriptions
      tags:
        - Subscriptions
      responses:
        200:
          description: Returns the list of subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Subscriptions
      summary: Start a new subscription
      description: Use this endpoint to start a new trial subscription or to purchase one.
      operationId: createSubscription
      requestBody:
        description: In the request body, provide information about the plan you want to start. Pass the SubscriptionRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
      responses:
        200:
          description: Returns a new subscription. The subscription has successfully started.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /subscriptions/{id}:
    patch:
      summary: Update a subscription
      description: Use this endpoint to change a plan, for example, to upgrade subscription to a bigger plan.
      operationId: updateSubscription
      tags:
        - Subscriptions
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the information about your current subscription and the new plan you want to subscribe to.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionUpdateRequest"
      responses:
        200:
          description: Returns an updated subscription. The subscription has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    get:
      summary: Retrieve a subscription
      description: Use this endpoint to get additional information about the subscription.
      operationId: getSubscription
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: newLicenseQuantity
          in: query
          description: The new license count to calculate the price. Minimum is 1.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Returns full information about a subscription. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionFullInfo'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /subscriptions/webhooks/stripe:
    post:
      summary: Handle Stripe webhooks
      description: Use this endpoint to handle Stripe webhooks for payment processing.
      operationId: handleStripeWebhook
      tags:
        - Subscriptions
      parameters:
        - in: header
          name: Stripe-Signature
          description: To verify events, Stripe signs the webhooks. This information is provided in the 'Stripe-Signature' header.
          schema:
            type: string
      requestBody:
        description: In the request body, pass the the payload of the webhook.
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: The webhook was executed and verified by Stripe.

components:
  responses:
    DefaultResponse:
      description: Bad request, security violation, or internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  parameters:
    ResourceId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryPageNumber:
      name: pageNumber
      in: query
      description: Controls paging
      schema:
        type: integer
        format: int64
        minimum: 1
    QueryPageSize:
      name: pageSize
      in: query
      description: Defines the number of entries per page
      schema:
        type: integer
        format: int64
        minimum: 1
    QuerySort:
      name: sort
      in: query
      description: Controls sorting
      schema:
        type: string

  schemas:
    AuthSignature:
      type: object
      properties:
        publicKey:
          type: string
          description: Public key of Hub auth signature

    AuthTokensRequest:
      type: object
      required:
        - strategy
      properties:
        strategy:
          type: string
          enum:
            - API_KEY
            - PASSWORD
            - REFRESH
        email:
          type: string
          description: The email of the user attempting to log in.
        password:
          type: string
          description: The password of the user.
        token:
          type: string
          description: Another token to be used for generation of a new auth token

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: Main access token
        refreshToken:
          type: string
          description: Auxiliary token for main access renewal

    ApiKeyRequest:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
      required:
        - name
        - enabled

    ApiKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        key:
          type: string
        expiresAt:
          type: integer
          format: int64

    ApiKeys:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ApiKey"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    TwoFactorAuthTokenRequest:
      type: object
      properties:
        email:
          type: string
          description: The email of the user requesting the two factor auth token.
        password:
          type: string
          description: The password of the user requesting the two factor auth token.

    TwoFactorAuthTokenResponse:
      type: object
      properties:
        method:
          type: string
          description: The method used for sending the two factor auth token.
        redactedMethod:
          type: string
          description: The redacted part of the actual method to which the two factor auth token was sent to.

    TwoFactorAuthVerificationRequest:
      type: object
      properties:
        email:
          type: string
          description: The email of the user attempting to log in.
        password:
          type: string
          description: The password of the user.
        token:
          type: string
          description: The token to verify

    AuthError:
      discriminator:
        propertyName: schema
      allOf:
        - $ref: "#/components/schemas/ResponseError"
        - required:
            - type
          properties:
            type:
              type: string
              description: Type of authentication error for further handeling
              enum:
                - CREDENTIALS_INVALID
                - TWO_FACTOR_AUTH_REQUIRED
                - TWO_FACTOR_AUTH_TOKEN_INVALID
                - EMAIL_VERIFICATION_REQUIRED
                - REFRESH_TOKEN_EXPIRED

    ResponseError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          description: Http status code
        code:
          type: string
          format: uuid
          description: Optional code of the exception
        message:
          type: string
          description: Error message
        errors:
          type: object
          description: Map of field -> list of errors

    Id:
      type: string
      format: uuid

    PageAndSort:
      type: object
      description: Paging and sorting information

    UserPrincipal:
      type: object
      description: User details model
      properties:
        user:
          $ref: "#/components/schemas/User"
        tenant:
          $ref: "#/components/schemas/Tenant"
        products:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        limitUsages:
          type: array
          items:
            $ref: "#/components/schemas/LimitUsage"

    User:
      type: object
      description: User model
      properties:
        id:
          $ref: "#/components/schemas/Id"
        hash:
          type: string
        email:
          type: string
        hasVerifiedEmail:
          type: boolean
        phoneNumber:
          type: string
        isAdmin:
          type: boolean
        useTwoFa:
          type: boolean
        language:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        jobTitle:
          type: string
        avatarUrl:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'

    UserRequest:
      type: object
      properties:
        email:
          type: string
        hasVerifiedEmail:
          type: boolean
        isAdmin:
          type: boolean
        useTwoFa:
          type: boolean
        phoneNumber:
          type: string
        language:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        jobTitle:
          type: string
        roles:
          type: array
          items:
            type: string
        avatarUrl:
          type: string

    UserPartialRequest:
      type: object
      properties:
        email:
          type: string
        isAdmin:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
        subscriptionIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"

    UserInviteRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        roles:
          type: array
          items:
            type: string

    UserConfirmInviteRequest:
      type: object
      description: Invitation model
      required:
        - passwordResetToken
        - password
        - confirmPassword
      properties:
        passwordResetToken:
          type: string
          format: uuid
        password:
          type: string
        confirmPassword:
          type: string

    UserForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string

    Users:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Tenant:
      type: object
      description: Tenant settings model
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
        companySize:
          type: string
        industry:
          type: string
        finishedOnboarding:
          type: boolean
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        domainName:
          type: string
        state:
          type: string
        country:
          type: string
        zip:
          type: string
        billingContact:
          $ref: "#/components/schemas/BillingContact"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
        defaultLanguage:
          type: string
        defaultTimezone:
          type: string
        billingCurrency:
          type: string
        features:
          type: array
          items:
            type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64

    TenantAddressRequest:
      type: object
      description: Tenant address model
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zip:
          type: string

    TenantCompanyInfoRequest:
      type: object
      description: Tenant company information model
      properties:
        companyName:
          type: string
        domainName:
          type: string
        defaultLanguage:
          type: string
        defaultTimezone:
          type: string

    Limit:
      type: object
      description: TBD
      properties:
        anchor:
          type: string
        infinite:
          type: boolean
        thresholdValue:
          type: integer

    LimitUsage:
      type: object
      description: TBD
      properties:
        limit:
          $ref: "#/components/schemas/Limit"
        currentValue:
          type: integer

    LimitUsages:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/LimitUsage"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    LimitUsageUpdateRequest:
      type: object
      properties:
        limit:
          type: string
        newValue:
          type: integer
      required:
        - limit
        - newValue

    Beta:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        description:
          type: string
        trialOnly:
          type: boolean
        since:
          type: integer
          format: int64
        until:
          type: integer
          format: int64

    BillingContact:
      type: object
      description: Tenant billing model
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        domainName:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        ein:
          type: string

    BillingContactRequest:
      type: object
      properties:
        companyName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        domainName:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        ein:
          type: string

    PaymentMethod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        type:
          type: string
        last4:
          type: string
        expMonth:
          type: integer
          format: int64
        expYear:
          type: integer
          format: int64

    PaymentMethodRequest:
      type: object
      properties:
        paymentMethodId:
          type: string
        name:
          type: string
        type:
          type: string
        last4:
          type: string
        expMonth:
          type: integer
          format: int64
        expYear:
          type: integer
          format: int64

    Permission:
      type: object
      properties:
        anchor:
          type: string
        feature:
          type: string
      description: Permission request model

    AppSettings:
      type: object
      properties:
        stripePublishableKey:
          type: string
        googleAnalyticsTrackingId:
          type: string
        googleTagManagerContainerId:
          type: string

    CreateTenantRequest:
      type: object
      description: Model for creating a new tenant and user
      required:
        - email
        - password
        - confirmPassword
      properties:
        email:
          type: string
          description: The email address that will be associated with a new tenant
        password:
          type: string
          description: The password of the user
        confirmPassword:
          type: string
          description: The confirmation of the user password (must be the same as password)

    UserPasswordRequest:
      type: object
      description: Model for user password change
      required:
        - password
        - newPassword
        - confirmPassword
      properties:
        password:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string

    UserResetPasswordRequest:
      type: object
      description: Model for changing user password
      required:
        - passwordResetToken
        - confirmPassword
        - newPassword
      properties:
        passwordResetToken:
          type: string
          format: uuid
        confirmPassword:
          type: string
        newPassword:
          type: string

    OnboardTenantRequest:
      type: object
      required:
        - firstName
        - lastName
        - jobTitle
        - companyName
        - companySize
        - industry
      properties:
        firstName:
          type: string
        lastName:
          type: string
        companyName:
          type: string
        companySize:
          type: string
          enum:
            - 1
            - 2
            - 11
            - 51
            - 201
            - 501
            - 1001
            - 5001
            - 10001
        industry:
          type: string
          enum:
            - SOFTWARE
            - REAL_ESTATE
            - FINANCIAL_SERVICES
            - RETAIL
            - MEDIA
            - HEALTHCARE
            - GOVERNMENT
            - OTHER
        jobTitle:
          type: string

    Product:
      type: object
      properties:
        anchor:
          type: string
        name:
          type: string
        shortDescription:
          type: string
        description:
          type: string
        longDescription:
          type: string
        unitLabel:
          type: string
        aggregateUsage:
          type: string
        usageType:
          type: string
        type:
          type: string
        billingScheme:
          type: string
        plans:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
        inBeta:
          type: boolean
        iconUrl:
          type: string
        previewUrl:
          type: string

    Feature:
      type: object
      properties:
        anchor:
          type: string
        product:
          type: string

    Plan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          type: string
        name:
          type: string
        description:
          type: string
        trialPeriodDays:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/Product"
        prices:
          type: array
          items:
            $ref: "#/components/schemas/Price"
        limits:
          type: array
          items:
            $ref: "#/components/schemas/Limit"
        beta:
          $ref: "#/components/schemas/Beta"

    Price:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        isActive:
          type: boolean
        currency:
          type: string
        amount:
          type: number
          format: double
        interval:
          $ref: "#/components/schemas/PriceInterval"
        intervalCount:
          type: integer
          format: int64
        plan:
          $ref: "#/components/schemas/Plan"

    Role:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        hash:
          type: string
        name:
          type: string
        description:
          type: string
        predefined:
          type: boolean
        permissions:
          type: array
          items:
            type: string

    RoleRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
      required:
        - name
        - permissions

    Roles:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    SubscriptionFullInfo:
      type: object
      required:
        - currentPrice
        - nextBillingDate
      properties:
        currentPrice:
          type: number
          format: double
          description: Price for current number of licenses
        nextPeriodStart:
          type: integer
          format: int64
          description: Next billing period start date for the subscription
        newPrice:
          type: number
          format: double
          description: Optional new price for requested number of licenses
      allOf:
        - $ref: '#/components/schemas/Subscription'

    Subscription:
      type: object
      required:
        - id
        - state
        - price
        - currentPeriodStart
        - currentPeriodEnd
        - startDate
        - licensedQuantity
        - quantity
      properties:
        id:
          $ref: "#/components/schemas/Id"
        state:
          $ref: "#/components/schemas/SubscriptionState"
        price:
          $ref: "#/components/schemas/Price"
        currentPeriodStart:
          type: integer
          format: int64
          description: Timestamp of start of subscription period (month or year)
        currentPeriodEnd:
          type: integer
          format: int64
          description: Timestamp of end of subscription period (month or year)
        startDate:
          type: integer
          format: int64
          description: Timestamp of start of subscription (first purchased/trialed)
        licensedQuantity:
          type: integer
          format: int64
          description: Number of used licenses
        quantity:
          type: integer
          format: int64
          description: Number of available licenses (overall purchased)
        discountAmount:
          type: number
          format: double
          description: Amount of discount applied to the subscription

    SubscriptionRequest:
      type: object
      required:
        - planId
        - trial
      properties:
        planId:
          $ref: "#/components/schemas/Id"
        trial:
          type: boolean
          description: If the subscription should be a trial or not.
        interval:
          $ref: "#/components/schemas/PriceInterval"
        betaAccessCode:
          type: string
          description: An access code to start a subscription to a product that is in beta.
        promotionCode:
          type: string
          description: A promotion code to receive a discount off the subscription.

    SubscriptionUpdateRequest:
      type: object
      properties:
        newPlanId:
          $ref: "#/components/schemas/Id"
        newInterval:
          $ref: "#/components/schemas/PriceInterval"
        newLicenseQuantity:
          type: integer
          format: int64
          description: License quantity for updated subscription
          minimum: 1
        promotionCode:
          type: string
          description: A promotion code to receive a discount off the subscription.

    PriceInterval:
      type: string
      enum:
        - MONTH
        - YEAR
      description: The frequency at which a subscription is billed

    SubscriptionState:
      type: string
      enum:
        - ACTIVE
        - TRIALING
        - PAST_DUE
        - CANCELED
      description: The state of the subscription

    PlanAvailability:
      type: object
      description: Availability of a plan for a specific tenant
      properties:
        plan:
          $ref: "#/components/schemas/Plan"
        subscription:
          $ref: "#/components/schemas/Subscription"
        isPlanCurrentlyOwned:
          type: boolean
        isPlanCurrentlyTrialing:
          type: boolean
        isPlanTrialAllowed:
          type: boolean
        isSalesContactRequired:
          type: boolean
        ownsHigherPlan:
          type: boolean
        preferredCurrency:
          type: string
