openapi: 3.0.3

info:
  title: Hub API
  description: |
    The Inperium Hub API provides access to the service that manages tenant and account settings, subscriptions, user rights and permissions.
    The Hub service (account.inperium.com) is an essential part of Inperium ecosystem. All tenants regardless of apps included in their subscriptions have access to the Hub at all times.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/hub
  - url: https://api.inperium.com/v1/hub

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]

tags:
  - name: API Keys
    description: |
      API keys are used instead of bearer tokens to authenticate applications connecting to Inperium via API.
  - name: App Settings
    description: |
      Enable integration with other apps such as Stripe.
  - name: Auth
    description: |
      Inperium enables you to authenticate with the Bearer token or an API key.
  - name: Dictionaries
    description: |
      Dictionaries are preset lists of values such as permissions or currencies that you can choose from when configuring the product.
  - name: Features
    description: |
      Each subscription plan includes a list of features that will be available to a customer after signing up for Inperium. These features are bound to Inperium products and plans.
  - name: Health checks
    description: |
      Since Inperium runs multiple services under the hood, it's crucial to identify the health state of each service. You can rely on the health state information when troubleshooting issues.
  - name: Limits
    description: |
      Volume- and usage-based restrictions applied to tenant subscriptions and plans.
  - name: Permissions
    description: |
      Inperium enables customers to delegate access to features within Inperium products. Each permission describes an atomic action, for example, the ability to import contacts. The permissions are grouped in roles that are later assigned to users. The permissions are typically associated with features, for example the ability to retrieve companies is a part of the 'COMPANY_MANAGEMENT' feature. The 'MANAGE_TENANT_SETTINGS' is unique permission that isn't tied to any feature.
  - name: Products
    description: |
      Inperium provides several solutions that seamlessly integrate with each other and your business ecosystem. The list of products keeps evolving and currently includes Inperium Talk and Sell. The subscription to Inperium products are managed through the Hub API.
  - name: Roles
    description: |
      Configure user roles to delegate access to Inperium features. For example, you can create administrator and manager roles.
  - name: Services
    description: |
      Get insights into how you use Inperium apps. The cost forecasts helps you budget for upcoming payments and use Inperium to its fullest.
  - name: Subscriptions
    description: |
      Tenants have an option to choose the subscription type and billing period.
  - name: Tenants
    description: |
      Tenant is the central concept of Inperium. On a high level, the tenant is a company that has signed up for Inperium. With Hub API, you can configure the main tenant settings such as subscription plans, Inperium products, and users.
  - name: Users
    description: |
      Users are individuals included in a tenant subscription. Depending on the role, users have access to different Inperium products and features.


paths:
  /apiKeys:
    get:
      tags:
        - API Keys
      summary: Retrieve API keys
      description: Use this endpoint to get a list of API keys. This endpoint supports paging and sorting.
      operationId: getApiKeys
      parameters:
        - name: id
          in: query
          description: Unique ID of the API key
          schema:
            type: string
        - name: name
          in: query
          description: Name of the API key
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns API keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeys"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - API Keys
      summary: Create an API key
      description: Use this endpoint to create a new API key.
      operationId: createApiKey
      requestBody:
        description: In the request body, pass the ApiKeyRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
      responses:
        201:
          description: Returns a new API key. Make sure to save it to a secure location. Inperium Hub doesn't store API keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /apiKeys/{id}:
    get:
      tags:
        - API Keys
      summary: Get an API key
      description: Use this endpoint to retrieve an existing API key by its ID. Note that Inperium doesn't store the unencrypted API key, just the last four digits.
      operationId: getApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the requested API key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - API Keys
      summary: Update an API key
      description: Use this endpoint to update an existing API key by its ID.
      operationId: updateApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated ApiKeyRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
      responses:
        200:
          description: Returns the updated API key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - API Keys
      summary: Delete an API key
      description: Use this endpoint to locate an API key by its ID and delete it. Note that this action will instantly revoke access for users and services utilizing this key.
      operationId: deleteApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The key has been removed.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /apiKeys/{id}/regenerate:
    put:
      tags:
        - API Keys
      summary: Regenerate a key
      description: Use this endpoint to regenerate an existing API key if it was compromised. The key secret will be regenerated.
      operationId: regenerateApiKey
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the updated API key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /publicAppSettings:
    get:
      summary: Get app settings
      description: Use this endpoint to retrieve a list of public app connected to a tenant account, for example Stripe or Google Analytics.
      operationId: getPublicAppSettings
      tags:
        - App Settings
      responses:
        200:
          description: Returns the list of public apps and their settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSettings"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /auth/signature:
    get:
      tags:
        - Auth
      summary: Verify signature
      description: Use this endpoint to get a public key and check Hub auth signature. Other Inperium services and third-party apps or plugins leverage this signature to verify the authenticity of the token.
      operationId: getAuthSignature
      responses:
        200:
          description: Returns the auth signature.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSignature"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/tokens:
    post:
      tags:
        - Auth
      summary: Create a token
      description: Use this endpoint to request a new token. This endpoint returns an access token and refresh token.
      operationId: getAuthTokens
      requestBody:
        description: In the request body, pass information the AuthTokensRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthTokensRequest"
      responses:
        200:
          description: Returns the newly generated auth token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        401:
          description: Unauthorized. The credentials are wrong or two-factor authentication is required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out
      description: Use this endpoint to log out the principal and invalidate the principal's access and refresh tokens.
      operationId: logout
      responses:
        200:
          description: The user logged out.
          content: { }
        401:
          description: Unauthorized. The credentials are wrong or two-factor authentication is required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/twoFactor/send:
    post:
      tags:
        - Auth
      summary: Create a 2FA token
      description: Use this endpoint to create a new two-factor authentication token.
      operationId: sendTwoFactorAuthToken
      requestBody:
        description: In the request body, pass the TwoFactorAuthTokenRequest object. It is used to verify the two-factor authentication token.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthTokenRequest"
      responses:
        200:
          description: Returns the 2FA token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwoFactorAuthTokenResponse"
        401:
          description: Unauthorized. The attempt to request a 2FA token failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /auth/twoFactor/verify:
    post:
      tags:
        - Auth
      summary: Verify a 2FA token
      description: Use this endpoint to verify the one-off code sent to a user.
      operationId: verifyTwoFactorAuthToken
      requestBody:
        description: In the request body, pass the TwoFactorAuthVerificationRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthVerificationRequest"
      responses:
        200:
          description: Returns newly generated tokens.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        401:
          description: Unauthorized. The 2FA token is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /features:
    get:
      summary: Retrieve features
      description: Use this endpoint to retrieve a list of available features.
      operationId: getFeatureList
      tags:
        - Features
      responses:
        200:
          description: Returns an array of features.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /features/{anchor}:
    get:
      summary: Retrieve a feature
      description: Use this endpoint to retrieve details for a specific feature.
      operationId: getFeature
      tags:
        - Features
      parameters:
        - name: anchor
          in: path
          description: A unique anchor of feature.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the feature record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /health:
    get:
      tags:
        - Health checks
      summary: Check health
      description: Use this endpoint to verify that the microservice runs as usual.
      operationId: checkHealth
      responses:
        200:
          description: Returns empty response that is used for OK non-returning operations.
          content: { }
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /limitUsages:
    get:
      tags:
        - Limits
      summary: Retrieve limits
      description: Use this endpoint to get a list of existing limit usages. This endpoint supports paging and sorting.
      operationId: getLimitUsages
      parameters:
        - name: anchor
          in: query
          description: The anchor of a referenced limit.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of limit usages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitUsages"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /internal/limitUsages:
    x-access: private
    post:
      x-access: private
      tags:
        - Limits
      summary: Update a limit usage
      description: THIS IS INTERNAL ENDPOINT. Inperium services send requests to this endpoint to update the occupied limits in Inperium Hub. For example, when you add a template in Inperium Sell, the service sends a request to '/internal/limitUsages' to update the quota.
      operationId: updateLimitUsage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LimitUsageUpdateRequest"
      responses:
        204:
          description: The limit usage has been updated.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /permissions:
    get:
      summary: Retrieve permissions
      description: Use this endpoint to retrieve a list of available permissions.
      operationId: getPermissionList
      tags:
        - Permissions
      responses:
        200:
          description: Returns a list of permissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /products:
    get:
      summary: Retrieve products
      description: Use this endpoint to get a list of products available to your tenant, with names, available subscription plans, etc.
      operationId: getProducts
      tags:
        - Products
      responses:
        200:
          description: Returns an array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /products/{anchor}:
    get:
      summary: Get a specific product
      description: Use this endpoint to retrieve information about a specific product.
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: anchor
          in: path
          description: A unique anchor of a product, e.g. Sell or Talk.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /products/{anchor}/plans:
    get:
      summary: Get subscription plans
      description: Use this endpoint to see the plans available for a certain product. You'll also see the plan that is active now.
      operationId: getAvailableProductPlans
      tags:
        - Products
      parameters:
        - name: anchor
          in: path
          description: A unique anchor of a product, e.g., Sell or Talk.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns available plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanFullInfo'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /roles:
    get:
      tags:
        - Roles
      summary: Retrieve roles
      description: Use this endpoint to get a list of available roles, with permissions assigned to each role. This endpoint supports paging and sorting.
      operationId: getRoles
      parameters:
        - name: id
          in: query
          description: Unique ID of the role.
          schema:
            type: string
        - name: name
          in: query
          description: The role title.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of roles.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Roles
      summary: Create a role
      description: Use this endpoint to add a new role to Inperium.
      operationId: createRole
      requestBody:
        description: In the request body, pass the RoleRequest object that describes a new role.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        201:
          description: Returns the newly created role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Retrieve a role
      description: Use this endpoint to retrieve a specific role and see associated permissions.
      operationId: getRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns a requested role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Roles
      summary: Update a role
      description: Use this endpoint to update an existing role. Note that the role properties will be overwritten.
      operationId: updateRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated RoleRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        200:
          description: Returns an updated role.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Use this endpoint to remove an existing role.
      operationId: deleteRole
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The role has been successfully deleted.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /services/estimateSubscriptionCost:
    get:
      tags:
        - Services
      summary: Forecast subscription cost
      description: Use this endpoint to calculate the estimated cost of a subscription, based on the given parameters.
      operationId: estimateSubscriptionCost
      parameters:
        - name: planId
          in: query
          required: true
          description: The ID of the plan.
          schema:
            $ref: '#/components/schemas/Id'
        - name: interval
          in: query
          description: The billing interval.
          schema:
            $ref: '#/components/schemas/PriceInterval'
        - name: promotionCode
          in: query
          description: A promotion code that can be used to reduce the final cost.
          schema:
            $ref: '#/components/schemas/PromotionCode'
        - name: licensedQuantity
          in: query
          description: The number of licenses to take into consideration while calculating the estimated cost.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Returns the estimated cost of the subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCostEstimate'
        default:
          $ref: '#/components/responses/DefaultResponse'
  /subscriptions:
    get:
      summary: Retrieve subscriptions
      description: Use this endpoint to get a complete list of subscriptions for the current tenant.
      operationId: getSubscriptions
      tags:
        - Subscriptions
      parameters:
        - name: state
          in: query
          description: The state of the subscription to be found.
          schema:
            type: string
        - name: product
          in: query
          description: The product the subscription is associated with.
          schema:
            type: string
      responses:
        200:
          description: Returns the list of subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Subscriptions
      summary: Start a new subscription
      description: Use this endpoint to start a new trial subscription or to purchase one.
      operationId: createSubscription
      requestBody:
        description: In the request body, provide information about the plan you want to start. Pass the SubscriptionRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
      responses:
        200:
          description: Returns a new subscription. The subscription has successfully started.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /subscriptions/{id}:
    patch:
      summary: Update a subscription
      description: Use this endpoint to change a plan, for example, to upgrade subscription to a bigger plan.
      operationId: updateSubscription
      tags:
        - Subscriptions
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the information about your current subscription and the new plan you want to subscribe to.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionUpdateRequest"
      responses:
        200:
          description: Returns an updated subscription. The subscription has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    get:
      summary: Retrieve a subscription
      description: Use this endpoint to get additional information about the subscription.
      operationId: getSubscription
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: newLicenseQuantity
          in: query
          description: The new license count to calculate the price. Minimum is 1.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Returns full information about a subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionFullInfo'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /subscriptions/webhooks/stripe:
    post:
      summary: Handle Stripe webhooks
      description: Use this endpoint to handle Stripe webhooks for payment processing.
      operationId: handleStripeWebhook
      tags:
        - Subscriptions
      parameters:
        - in: header
          name: Stripe-Signature
          description: To verify events, Stripe signs the webhooks. This information is provided in the 'Stripe-Signature' header.
          schema:
            type: string
      requestBody:
        description: In the request body, pass the payload of the webhook.
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: The webhook was executed and verified by Stripe.
        default:
          $ref: '#/components/responses/DefaultResponse'

  /tenants/{id}:
    get:
      tags:
        - Tenants
      summary: Retrieve a tenant
      description: Use this endpoint to get information about the tenant.
      operationId: getTenant
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the Tenant object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        404:
          description: The tenant is not found.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    patch:
      summary: Partially update a tenant
      description: Use this endpoint to partially update a specific tenant.
      operationId: updatePartialTenant
      tags:
        - Tenants
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the TenantPartialRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantPartialRequest"
      responses:
        200:
          description: Returns an updated Tenant object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Tenants
      summary: Delete a tenant
      description: Use this endpoint to delete a tenant including all its data.
      operationId: deleteTenant
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The tenant has been successfully deleted.
        404:
          description: The tenant is not found.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/companyInfo:
    put:
      tags:
        - Tenants
      summary: Update company information
      description: Use this endpoint to update information about the tenant's company such as address or default timezone.
      operationId: updateTenantCompanyInfo
      requestBody:
        description: In the request body, pass the TenantCompanyInfoRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCompanyInfoRequest"
      responses:
        200:
          description: The tenant has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/address:
    put:
      tags:
        - Tenants
      summary: Update an address
      description: Use this endpoint to update the address.
      operationId: updateTenantAddress
      requestBody:
        description: In the request body, pass the TenantAddressRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantAddressRequest"
      responses:
        200:
          description: The tenant's address has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/billingContact:
    put:
      tags:
        - Tenants
      summary: Update billing
      description: Use this endpoint to update tenant's billing details.
      operationId: updateTenantBillingContact
      requestBody:
        description: In the request body, pass the BillingContactRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingContactRequest"
      responses:
        200:
          description: The billing details have been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /tenants/paymentMethod:
    put:
      tags:
        - Tenants
      summary: Update a payment method
      description: Use this endpoint to change the tenant's payment method.
      operationId: updateTenantPaymentMethod
      requestBody:
        description: In the request body, pass the PaymentMethodRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentMethodRequest"
      responses:
        200:
          description: The tenant's payment method has been updated. The endpoint returns the updated Tenant object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /users:
    post:
      tags:
        - Users
      summary: Create a user
      description: Use this endpoint to add a new user to Inperium. Provide basic information about the new user.
      operationId: createUser
      requestBody:
        description: In the request body, pass the UserCreationRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
      responses:
        201:
          description: Returns the newly created user account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    get:
      summary: Retrieve users
      description: Use this endpoint to get a list of users. Leverage query parameters to search for a specific user or users. This endpoint supports paging and sorting.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - name: fullName
          in: query
          description: >
            The user name. This parameter allows searching both in "last name" or "first name".
            Supports eq, neq, in, nin, like, notlike.
          schema:
            type: string
        - name: id
          in: query
          description: The unique ID of the user.
          schema:
            type: string
        - name: email
          in: query
          description: The email address associated with the user.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns an array of user records.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/{id}:
    get:
      summary: Get user details
      description: Use this endpoint to search for a specific user and retrieve detailed information such as full name, email, and job title.
      operationId: getUser
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns the user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      summary: Update a user
      description: Use this endpoint to update a specific user. Note that all user properties (fields) will be overwritten.
      operationId: updateUser
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the UserRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    patch:
      summary: Partially update a user
      description: Use this endpoint to change some properties in the user record, e.g., the last name or email.
      operationId: updatePartialUser
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the UserPartialRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPartialRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Use this endpoint to remove a user from Inperium.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The user has been successfully deleted.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /users/verify:
    post:
      tags:
        - Users
      summary: Verify a new user
      description: Use this endpoint to verify a new user and activate the account.
      operationId: verifyUser
      requestBody:
        required: true
        description: In the request body, pass the UserVerificationRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserVerificationRequest"
      responses:
        200:
          description: Returns authentication tokens. The user account is verified.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/forgotPassword:
    post:
      tags:
        - Users
      summary: Recover a password
      description: Use this endpoint to send a "forgot password" request.
      operationId: forgotPassword
      requestBody:
        description: In the request body, pass the UserForgotPasswordRequest object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForgotPasswordRequest"
      responses:
        200:
          description: The request has been sent.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/resetPassword:
    put:
      tags:
        - Users
      summary: Reset a password
      description: Use this endpoint to reset a password. To update a password, you'll have to provide `passwordResetToken` that was sent by email.
      operationId: resetPassword
      requestBody:
        description: In the request body, pass the UserResetPasswordRequest object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResetPasswordRequest"
      responses:
        200:
          description: Returns tokens. The password has successfully been reset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/me:
    get:
      tags:
        - Users
      summary: Check a current user
      description: Use this endpoint to retrieve details about the currently authenticated user.
      operationId: getPrincipalUser
      responses:
        200:
          description: Returns user data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrincipal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      summary: Update a user
      description: Use this endpoint to update the currently logged in user.
      operationId: updatePrincipalUser
      tags:
        - Users
      requestBody:
        description: In the request body, pass the UserRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: Returns the updated user record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /users/password:
    put:
      tags:
        - Users
      summary: Reset a password
      description: Use this endpoint to reset the principal's password.
      operationId: updatePrincipalPassword
      requestBody:
        description: In the request body, pass the UserPasswordRequest object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPasswordRequest"
      responses:
        200:
          description: The password has been reset.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
components:
  responses:
    DefaultResponse:
      description: Bad request, security violation, or internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"

  securitySchemes:
    BearerAuth:
      description: This token is generated when a user enters credentials. Although you can leverage this token when making API calls, please note that due to security concerns it frequently expires.
      type: http
      scheme: bearer

    ApiKeyAuth:
      description: The API key is a secure key generated by Inperium that can be used for authentication. The API key has an expiration date after which your API requests will be denied by the server.
      type: apiKey
      in: header
      name: X-API-KEY

  parameters:
    ResourceId:
      name: id
      description: A unique ID of the object.
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryPageNumber:
      name: pageNumber
      in: query
      description: This parameter affects paging. It defines the chunk of data to be retrieved, e.g., records from page 3.
      schema:
        type: integer
        format: int64
        minimum: 1
    QueryPageSize:
      name: pageSize
      in: query
      description: This parameter affects paging. It defines the number of records per page, e.g., 20 records per page.
      schema:
        type: integer
        format: int64
        minimum: 1
    QuerySort:
      name: sort
      in: query
      description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
      schema:
        type: string

  schemas:
    AuthSignature:
      type: object
      description: The AuthSignature object includes information about the public API key used for authentication.
      properties:
        publicKey:
          type: string
          description: The public key of Hub auth signature.

    AuthTokensRequest:
      type: object
      description: The AuthTokensRequest is submitted to Inperium Hub when you want to get a new AuthTokens object.
      required:
        - strategy
      properties:
        strategy:
          type: string
          description: The authentication strategy. Select one of the available options.
          enum:
            - API_KEY
            - PASSWORD
            - REFRESH
        email:
          type: string
          description: The email of the user attempting to log in.
        password:
          type: string
          description: The password of the user.
        token:
          type: string
          description: The token for generating a new authentication token. Depending on the authentication strategy, pass the refresh token or the API key.

    AuthTokens:
      type: object
      description: Unlike the AuthTokenRequest object, this object is returned by the Hub service and contains new tokens.
      properties:
        accessToken:
          type: string
          description: The main access token
        refreshToken:
          type: string
          description: The auxiliary token used for the main token renewal.

    ApiKeyRequest:
      description: To create an API key, you have to supply an ApiKeyRequest object.
      type: object
      properties:
        name:
          type: string
          description: A user-friendly key name.
        enabled:
          type: boolean
          description: The key status.
      required:
        - name
        - enabled

    ApiKey:
      description: The ApiKey object is returned by the Hub service and contains the authentication string.
      type: object
      properties:
        id:
          type: string
          description: A unique key identifier.
        name:
          type: string
          description: A user-friendly key name.
        enabled:
          type: boolean
          description: The key status.
        key:
          type: string
          description: The key is a unique sequence of characters, e.g., 5d5b4ed1-0000-XXXX-0000-8c9d90d23c2b+58df84fc-0000-XXXX-0000-8d381496bc2a.
        expiresAt:
          type: integer
          format: int64
          description: Each key has an expiration date. You won't be able to authenticate using this key after the expiration date.

    ApiKeys:
      type: object
      description: The array of ApiKey objects.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ApiKey"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    TwoFactorAuthTokenRequest:
      type: object
      description: The incoming object that facilitates 2FA.
      properties:
        email:
          type: string
          description: The email of the user requesting the two-factor auth token.
        password:
          type: string
          description: The password of the user requesting the two-factor auth token.

    TwoFactorAuthTokenResponse:
      type: object
      description: The object that is returned after requesting the 2FA token.
      properties:
        method:
          type: string
          description: The method used for sending the two-factor auth token.
        redactedMethod:
          type: string
          description: The redacted part of the actual method to which the two-factor auth token was sent to.

    TwoFactorAuthVerificationRequest:
      type: object
      description: Inperium Hub receives the TwoFactorAuthVerificationRequest object and verifies a user.
      properties:
        email:
          type: string
          description: The email of the user attempting to log in.
        password:
          type: string
          description: The password of the user.
        token:
          type: string
          description: The one-off code to verify.

    AuthError:
      description: The error that occurred during authentication. Use this information for further error handling and troubleshooting authentication issues.
      discriminator:
        propertyName: schema
      allOf:
        - $ref: "#/components/schemas/ResponseError"
        - required:
            - type
          properties:
            type:
              type: string
              description: The type of the authentication error.
              enum:
                - CREDENTIALS_INVALID
                - TWO_FACTOR_AUTH_REQUIRED
                - TWO_FACTOR_AUTH_TOKEN_INVALID
                - EMAIL_VERIFICATION_REQUIRED
                - REFRESH_TOKEN_EXPIRED

    ResponseError:
      type: object
      description: The error that is returned as a response to a request.
      discriminator:
        propertyName: schema
      required:
        - status
        - message
      properties:
        status:
          type: string
          description: The HTTP status code.
        code:
          type: string
          format: uuid
          description: The optional code of the exception.
        message:
          type: string
          description: The error message text.
        errors:
          type: object
          description: Mapping of fields and errors.

    Id:
      type: string
      format: uuid
      description: A unique identifier of a record or resource.
      example: $OBJECT-UUID

    PageAndSort:
      type: object
      description: Paging and sorting information, including the number of records per page, the total of pages and records, the current page, etc.
      example:
        pageNumber: 1
        pageSize: 20
        totalNumberOfRecords: 1
        totalNumberOfPages: 1
        hasNextPage: false
        hasPreviousPage: false
        sortingCriteria: null
        hasMore: false

    UserPrincipal:
      type: object
      description: The UserPrincipal object contains information about the current user, including the user contact details, the associated tenant account, all licensed features and enabled permissions, etc.
      properties:
        user:
          $ref: "#/components/schemas/User"
        tenant:
          $ref: "#/components/schemas/Tenant"
        products:
          description: The list of products licensed for the user.
          type: array
          items:
            type: string
        features:
          description: The list of features enabled for the user.
          type: array
          items:
            type: string
        permissions:
          description: The list of permissions assigned to the user.
          type: array
          items:
            type: string
        roles:
          description: The list of roles enabled for the user.
          type: array
          items:
            type: string
        limitUsages:
          description: The list of limits set for the user.
          type: array
          items:
            $ref: "#/components/schemas/LimitUsage"

    UserCreationRequest:
      description: A request model that combines all user creation requests.
      type: object
      discriminator:
        propertyName: type
        mapping:
          invitation: "#/components/schemas/UserInvitationRequest"
          INVITATION: "#/components/schemas/UserInvitationRequest"
          account_creation: "#/components/schemas/UserAccountCreationRequest"
          ACCOUNT_CREATION: "#/components/schemas/UserAccountCreationRequest"
      required:
        - email
      properties:
        email:
          type: string
          description: The email address of the user.

    UserInvitationRequest:
      type: object
      description: A request model to create a new user by inviting them to an existing account.
      allOf:
        - $ref: "#/components/schemas/UserCreationRequest"
        - type: object
          required:
            - firstName
            - lastName
            - tenantId
          properties:
            firstName:
              type: string
              description: The given name of the user.
            lastName:
              type: string
              description: The family name of the user.
            isAdmin:
              type: boolean
              description: The true/false parameter that marks if the user is an administrator and a 'root' user. Unlike other permissions that are organized into custom roles, the admin role has a flag. Only users with 'isAdmin' set to 'true' can manage tenant settings.
            roles:
              type: array
              description: The roles assigned to the user.
              items:
                type: string

    UserAccountCreationRequest:
      type: object
      description: A request model to create a new user for a new Inperium account.
      allOf:
        - $ref: "#/components/schemas/UserCreationRequest"
        - type: object
          required:
            - password
            - confirmPassword
          properties:
            password:
              type: string
              description: The user password.
            confirmPassword:
              type: string
              description: The user password.
            region:
              type: string
              description: The user's location. This is the enum parameter that defines if the user is located in the 'US' or 'EU'.
              default: US
              enum:
                - US
                - EU

    User:
      type: object
      description: The user contact details and profile settings, including preferred authentication method, assigned roles, etc.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        hash:
          type: string
          description: The hash value of the user record.
        email:
          description: The email address associated with the user account.
          type: string
        hasVerifiedEmail:
          description: The true/false parameter that marks if the email address has been verified or is still pending verification.
          type: boolean
        phoneNumber:
          description: The user's phone number.
          type: string
        isAdmin:
          description: The true/false parameter that marks if the user is an administrator and a 'root' user. Unlike other permissions that are organized into custom roles, the admin role has a flag. Only users with 'isAdmin' set to 'true' can manage tenant settings.
          type: boolean
        isOwner:
          description: The true/false parameter that marks if the user is an owner of its tenant.
          type: boolean
        useTwoFa:
          description: The true/false parameter that indicates if 2FA is enabled for the user.
          type: boolean
        language:
          description: The preferred language. The default value is 'EN'.
          type: string
        firstName:
          description: The given name of the user.
          type: string
        lastName:
          description: The family name of the user.
          type: string
        jobTitle:
          description: The user's current title or role in the company, e.g., 'senior manager'.
          type: string
        avatarUrl:
          description: The user's profile image.
          type: string
        roles:
          type: array
          description: The list of roles.
          items:
            $ref: '#/components/schemas/Role'
        subscriptions:
          type: array
          description: The list of subscriptions enabled for the user.
          items:
            $ref: '#/components/schemas/Subscription'

    UserRequest:
      description: The UserRequest object is sent to Inperium Hub service when you need to update the user record. Upon submitting it, all user parameters will be overwritten.
      type: object
      properties:
        email:
          type: string
          description: The email address associated with the user account.
        hasVerifiedEmail:
          type: boolean
          description: The true/false parameter that marks if the email address has been verified or is still pending verification.
        isAdmin:
          type: boolean
          description: The true/false parameter that marks if the user is an administrator and a 'root' user. Unlike other permissions that are organized into custom roles, the admin role has a flag. Only users with 'isAdmin' set to 'true' can manage tenant settings.
        useTwoFa:
          type: boolean
          description: The true/false parameter that indicates if 2FA is enabled for the user.
        phoneNumber:
          type: string
          description: The user's phone number.
        language:
          type: string
          description: The preferred language. The default value is 'EN'.
        firstName:
          type: string
          description: The given name of the user.
        lastName:
          type: string
          description: The family name of the user.
        jobTitle:
          type: string
          description: The user's current title or role in the company, e.g., 'senior manager'.
        roles:
          type: array
          description: The list of roles.
          items:
            type: string
        avatarUrl:
          type: string
          description: The user's profile image.

    UserPartialRequest:
      description: The UserRequest object is sent to Inperium Hub service when you need to partially update the user record. It will change only the parameters that were submitted.
      type: object
      properties:
        email:
          type: string
          description: The email address associated with the user account.
        isAdmin:
          type: boolean
          description: The true/false parameter that marks if the user is an administrator and a 'root' user. Unlike other permissions that are organized into custom roles, the admin role has a flag. Only users with 'isAdmin' set to 'true' can manage tenant settings.
        firstName:
          type: string
          description: The given name of the user.
        lastName:
          type: string
          description: The family name of the user.
        jobTitle:
          type: string
        roles:
          type: array
          description: The list of roles.
          items:
            type: string
        subscriptionIds:
          type: array
          description: The list of subscriptions enabled for the user.
          items:
            $ref: "#/components/schemas/Id"

    UserVerificationRequest:
      type: object
      description: A request model that facilitates user verification.
      required:
        - email
        - oneTimePassword
      properties:
        email:
          type: string
          description: The email address associated with the user account.
        oneTimePassword:
          type: string
          description: The one-off verification code sent to the user.

    UserForgotPasswordRequest:
      type: object
      description: The object specifies the email address for sending out password reset instructions.
      required:
        - email
      properties:
        email:
          type: string
          description: The email address associated with the user account.

    Users:
      type: object
      description: The list of user records.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Tenant:
      type: object
      description: The Tenant object contains data related to the tenant account, i.e., the name of the company that signed up for Inperium, its size, industry, etc.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
          description: The name of the company.
        companySize:
          type: string
          description: The number of employees.
        industry:
          type: string
          description: The business area the company belongs to.
        completedProfile:
          type: boolean
          description: The true/false parameter indicating if the tenant completed the onboarding procedure.
        addressLine1:
          type: string
          description: The street, building, office, or suite.
        addressLine2:
          type: string
          description: The street, building, office, or suite.
        city:
          type: string
          description: The city where the business is registered or where its office is located.
        domainName:
          type: string
          description: The company website.
        state:
          type: string
          description: The state where the business is registered or where its office is located.
        country:
          type: string
          description: The origin country.
        zip:
          type: string
          description: The postal code.
        billingContact:
          $ref: "#/components/schemas/BillingContact"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        subscriptions:
          type: array
          description: The list of tenant's subscriptions.
          items:
            $ref: "#/components/schemas/Subscription"
        defaultLanguage:
          type: string
          description: The preferred language.
        defaultTimezone:
          type: string
          description: The operational time zone.
        billingCurrency:
          $ref: '#/components/schemas/Currency'
        features:
          type: array
          description: The list of features available to the tenant.
          items:
            type: string
        createdAt:
          type: integer
          format: int64
          description: The date the tenant account was created.
        updatedAt:
          type: integer
          format: int64
          description: The most recent date the tenant was modified.

    TenantPartialRequest:
      type: object
      description: A request model to partially update a tenant.
      properties:
        companyName:
          type: string
          description: The name of the company.
        companySize:
          type: string
          description: The number of employees.
          enum:
            - 1
            - 2
            - 11
            - 51
            - 201
            - 501
            - 1001
            - 5001
            - 10001
        industry:
          type: string
          description: The business area the company belongs to.
          enum:
            - SOFTWARE
            - REAL_ESTATE
            - FINANCIAL_SERVICES
            - RETAIL
            - MEDIA
            - HEALTHCARE
            - GOVERNMENT
            - OTHER

    TenantAddressRequest:
      type: object
      description: A request model containing information about the tenant's address.
      properties:
        addressLine1:
          type: string
          description: The street, building, office, or suite.
        addressLine2:
          type: string
          description: The street, building, office, or suite.
        city:
          type: string
          description: The city where the business is registered or where its office is located.
        state:
          type: string
          description: The state where the business is registered or where its office is located.
        country:
          type: string
          description: The origin country.
        zip:
          type: string
          description: The postal code.

    TenantCompanyInfoRequest:
      type: object
      description: the incoming object describing the company details.
      properties:
        companyName:
          type: string
          description: The name of the company.
        domainName:
          type: string
          description: The company website.
        defaultLanguage:
          type: string
          description: The preferred language.
        defaultTimezone:
          type: string
          description: The operational time zone.

    Limit:
      type: object
      description: The object describing restrictions within the subscription plans.
      properties:
        anchor:
          type: string
          description: The name of the limit. For example, 'ROLES_TOTAL'.
        infinite:
          type: boolean
          description: The true/false parameter that identifies if the limit is active. Set this parameter to 'true' to provide unlimited access to a product feature (anchor). For example, support an infinite number of templates.
        thresholdValue:
          type: integer
          format: int64
          description: The maximum value allowed by the Limit.

    LimitUsage:
      type: object
      description: The LimitUsage object describes the applicable limit and the current state. For example, 'ROLES_TOTAL' threshold is 10 and currently there are 6 roles created in Inperium.
      properties:
        limit:
          $ref: "#/components/schemas/Limit"
        currentValue:
          type: integer
          format: int64
          description: The counter, it displays how close you are to reaching the threshold.

    LimitUsages:
      type: object
      description: The list of available limits.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/LimitUsage"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    LimitUsageUpdateRequest:
      type: object
      description: The incoming object sent by Inperium services to Hub when a limit usage is updated outside the Hub. For example, you add a new template (in Inperium Sell) and the limit usage must be updated.
      properties:
        limit:
          type: string
          description: The limit name.
        newValue:
          type: integer
          format: int64
          description: The updated value.
      required:
        - limit
        - newValue

    Beta:
      type: object
      description: The special object that is created specifically for managing early user access to Inperium products.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The product name.
        description:
          type: string
          description: The product description.
        trialOnly:
          type: boolean
          description: The true/false parameter defining if the beta program is available in trial or both trial/subscription modes.
        since:
          type: integer
          description: The date the beta started.
          format: int64
        until:
          type: integer
          description: The date the beta ends.
          format: int64

    BillingContact:
      type: object
      description: The object contains the tenant's billing details such as the billing address and company name. Inperium issues invoices according to the data provided in the BillingContact object while the 'PaymentMethod' object is used as a source of payment information. The invoices are billed to the user (tenant owner) who has initially configured Inperium tenant account.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
          description: The name of the company.
        firstName:
          type: string
          description: The given name of the user.
        lastName:
          type: string
          description: The family name of the user.
        email:
          type: string
          description: The email address associated with the user account.
        phoneNumber:
          type: string
          description: The user's phone number.
        addressLine1:
          type: string
          description: The street, building, office, or suite.
        addressLine2:
          type: string
          description: The street, building, office, or suite.
        city:
          type: string
          description: The city where the business is registered or where its office is located.
        domainName:
          type: string
          description: The company website.
        state:
          type: string
          description: The state where the business is registered or where its office is located.
        zip:
          type: string
          description: The postal code.
        country:
          type: string
          description: The origin country.
        ein:
          type: string
          description: A unique nine-digit employer identification number assigned by the Internal Revenue Service (IRS).

    BillingContactRequest:
      type: object
      description: The incoming object containing the updated tenant's contact details.
      required:
        - companyName
        - firstName
        - lastName
        - email
        - addressLine1
        - city
        - zip
        - country
      properties:
        companyName:
          type: string
          description: The name of the company.
        firstName:
          type: string
          description: The given name of the user.
        lastName:
          type: string
          description: The family name of the user.
        email:
          type: string
          description: The email address associated with the user account.
        phoneNumber:
          type: string
          description: The user's phone number.
        addressLine1:
          type: string
          description: The street, building, office, or suite.
        addressLine2:
          type: string
          description: The street, building, office, or suite.
        city:
          type: string
          description: The city where the business is registered or where its office is located.
        state:
          type: string
          description: The state where the business is registered or where its office is located.
        zip:
          type: string
          description: The postal code.
        country:
          type: string
          description: The origin country.
        ein:
          type: string
          description: A unique nine-digit employer identification number assigned by the Internal Revenue Service (IRS).

    PaymentMethod:
      type: object
      description: The object contains the tenant's payment information.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The payer's full name.
        type:
          type: string
          description: The payment method, e.g., credit card.
        last4:
          type: string
          description: The last four digits of the credit card.
        expMonth:
          type: integer
          description: The month the card expires.
          format: int64
        expYear:
          type: integer
          description: The year the card expires.
          format: int64

    PaymentMethodRequest:
      type: object
      description: The incoming object that updates the preferred tenant's method of payment.
      properties:
        paymentMethodId:
          type: string
          description: An identifier of the payment method.
        name:
          type: string
          description: The payer's full name.
        type:
          type: string
          description: The payment method, e.g., credit card.
        last4:
          type: string
          description: The last four digits of the credit card.
        expMonth:
          type: integer
          description: The month the card expires.
          format: int64
        expYear:
          type: integer
          description: The year the card expires.
          format: int64

    Permission:
      type: object
      description: The Permission object ties permission to a feature.
      properties:
        anchor:
          type: string
          description: The permission name.
        feature:
          type: string
          description: The feature name to which the permission is applied.

    AppSettings:
      type: object
      description: The object containing public IDs of the apps connected to the tenant.
      properties:
        stripePublishableKey:
          type: string
          description: The key facilitating Stripe authentication.
        googleAnalyticsTrackingId:
          type: string
          description: The Google Analytics code embedded in the tracked websites.
        googleTagManagerContainerId:
          type: string
          description: The name of your Google Tag Manager container.

    UserPasswordRequest:
      type: object
      description: The object containing details for updating a password.
      required:
        - password
        - newPassword
        - confirmPassword
      properties:
        password:
          type: string
          description: The current user password.
        newPassword:
          type: string
          description: The new user password.
        confirmPassword:
          type: string
          description: The new user password (must be the same as 'newPassword').

    UserResetPasswordRequest:
      type: object
      description: The object containing details for password reset.
      required:
        - email
        - oneTimePassword
        - confirmPassword
        - newPassword
      properties:
        email:
          type: string
          description: The email address associated with the user.
        oneTimePassword:
          type: string
          description: The one-off code sent to the user.
        confirmPassword:
          type: string
          description: The new password (must be the same as 'newPassword').
        newPassword:
          type: string
          description: The new password.

    Product:
      type: object
      description: The object describing the Inperium app or service.
      properties:
        anchor:
          type: string
          description: The internal name.
        name:
          type: string
          description: The name of the product.
        shortDescription:
          type: string
          description: The product description. This parameter hints at product functionality and features.
        description:
          type: string
          description: The product description. This parameter hints at product functionality and features.
        longDescription:
          type: string
          description: The product description. This parameter hints at product functionality and features.
        unitLabel:
          type: string
          description: The units taken into account when calculating the price. In most cases, the 'unitLabel' is 'Users' and the price depends on how many users you've got.
        aggregateUsage:
          type: string
          description: The aggregation.
        usageType:
          type: string
          description: The status of the product, e.g., licensed.
        type:
          type: string
          description: The way the product status is maintained, e.g., recurring.
        billingScheme:
          type: string
          description: This parameter specifies how the product price is calculated, e.g., per unit.
        plans:
          type: array
          description: The list of available plans.
          items:
            $ref: "#/components/schemas/Plan"
        inBeta:
          type: boolean
          description: The true/false parameter that marks if the product is generally available or is available as a limited access option for beta customers. The 'true' value means the product is in beta.
        iconUrl:
          type: string
          description: The official icon of the app.
        previewUrl:
          type: string
          description: The product preview screen.

    Feature:
      type: object
      description: The object mapping a feature name to a corresponding Inperium product.
      properties:
        anchor:
          type: string
          description: The feature name, e.g., 'CONTACT_IMPORT' or 'PIPELINE_MANAGEMENT'.
        product:
          type: string
          description: The Inperium app.

    Plan:
      type: object
      description: The object describes the product bundle. Typically, plans differ in the features they offer and the restrictions they impose. Customers can choose any plan that works better for their needs.
      discriminator:
        propertyName: schema
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          type: string
          description: The internal plan name.
        name:
          type: string
          description: The plan name.
        description:
          type: string
          description: The plan description.
        trialPeriodDays:
          type: integer
          description: The number of days.
          format: int64
        product:
          $ref: "#/components/schemas/Product"
        beta:
          $ref: "#/components/schemas/Beta"

    Price:
      type: object
      description: The object contains information about the product price as well as the pricing model.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        isActive:
          type: boolean
          description: The true/false parameter that marks what plan is currently in use.
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          description: The sum to be paid according to this plan.
          format: double
        interval:
          $ref: "#/components/schemas/PriceInterval"
        intervalCount:
          type: integer
          format: int64
        plan:
          $ref: "#/components/schemas/Plan"

    Role:
      type: object
      description: The object defines the permissions that will be granted to any user who is assigned this role.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        hash:
          type: string
          description: The role hash.
        name:
          type: string
          description: The role title.
        description:
          type: string
          description: The optional description.
        predefined:
          type: boolean
          description: The true/false parameter that marks if the role is shipped with Inperium by default. For custom roles, this parameter will be 'false'.
        permissions:
          type: array
          description: The list of associated permissions.
          items:
            type: string

    RoleRequest:
      type: object
      description: The incoming object that describes an updated role.
      properties:
        name:
          type: string
          description: The role title.
        description:
          type: string
          description: The optional description.
        permissions:
          type: array
          description: The list of permissions.
          items:
            type: string
      required:
        - name
        - permissions

    Roles:
      type: object
      description: The list of roles.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    SubscriptionFullInfo:
      type: object
      description: The complete information about a subscription. This object extends the 'Subscription' object.
      required:
        - currentPrice
        - nextBillingDate
      allOf:
        - $ref: '#/components/schemas/Subscription'
        - properties:
            currentPrice:
              type: number
              format: double
              description: The due price. It is calculated based on the license quantity.
            nextPeriodStart:
              type: integer
              format: int64
              description: The starting date of the next billing period.
            newPrice:
              type: number
              format: double
              description: The new price for the requested number of licenses. This parameter is optional and can be omitted.

    Subscription:
      type: object
      description: The object contains information about the tenant's active plan, product usage, etc.
      discriminator:
        propertyName: schema
      required:
        - id
        - state
        - price
        - currentPeriodStart
        - currentPeriodEnd
        - startDate
        - licensedQuantity
        - quantity
      properties:
        id:
          $ref: "#/components/schemas/Id"
        state:
          $ref: "#/components/schemas/SubscriptionState"
        price:
          $ref: "#/components/schemas/Price"
        currentPeriodStart:
          type: integer
          format: int64
          description: The timestamp when the current subscription period started (month or year).
        currentPeriodEnd:
          type: integer
          format: int64
          description: The timestamp when the current subscription period ends (month or year).
        startDate:
          type: integer
          format: int64
          description: The timestamp when the subscription was purchased or trialed for the first time.
        licensedQuantity:
          type: integer
          format: int64
          description: The number of used licenses.
        quantity:
          type: integer
          format: int64
          description: The number of available licenses. If the overall number of purchased licenses exceed the 'licensedQuantity', it indicates that some license aren't currently in use. You can leverage this licenses by inviting more users.
        discountAmount:
          type: number
          format: double
          description: The discount applied to the subscription.

    SubscriptionRequest:
      type: object
      description: The incoming object that contains all the necessary information to subscribe to a product.
      required:
        - planId
        - trial
      properties:
        planId:
          $ref: "#/components/schemas/Id"
        trial:
          type: boolean
          description: The true/false parameter defining if the subscription is trial or not.
        interval:
          $ref: "#/components/schemas/PriceInterval"
        licensedQuantity:
          type: integer
          format: int64
          description: The number of requested licenses.
        betaAccessCode:
          type: string
          description: An access code to allow subscribing to a product that is in beta.
        promotionCode:
          $ref: '#/components/schemas/PromotionCode'

    SubscriptionUpdateRequest:
      type: object
      description: The incoming object containing the updated subscription details.
      properties:
        newPlanId:
          $ref: "#/components/schemas/Id"
        newInterval:
          $ref: "#/components/schemas/PriceInterval"
        newLicenseQuantity:
          type: integer
          format: int64
          description: The number of licenses. The minimum number is 1.
          minimum: 1
        promotionCode:
          $ref: '#/components/schemas/PromotionCode'

    PriceInterval:
      type: string
      enum:
        - MONTH
        - YEAR
      description: The billing frequency. This is the enum parameter.

    Currency:
      type: string
      description: The currency unit.

    PromotionCode:
      type: string
      description: A promotion code to receive a discount off the subscription.

    SubscriptionState:
      type: string
      enum:
        - ACTIVE
        - TRIALING
        - PAST_DUE
        - CANCELED
      description: The state of the subscription. This is the enum parameter.

    PlanFullInfo:
      type: object
      description: The PlanFullInfo object contains complete information about a plan enabled for a specific tenant.
      allOf:
        - $ref: '#/components/schemas/Plan'
        - properties:
            prices:
              type: array
              items:
                $ref: "#/components/schemas/Price"
            features:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/LocalizedFeature'
            affordances:
              type: array
              items:
                $ref: '#/components/schemas/PlanAffordance'

    PlanAffordance:
      type: string
      description: The PlanAffordance object defines what licensing options available for this plan. For example, user can start a trial of this plan to upgrade to this plan.
      enum:
        - TRIAL
        - PURCHASE
        - UPGRADE
        - DOWNGRADE

    LocalizedFeature:
      type: object
      description: The limit or the feature with its translation.
      required:
        - translation
      properties:
        translation:
          type: string
          description: The text in a foreign language.
      allOf:
        - $ref: '#/components/schemas/Feature'
        - $ref: '#/components/schemas/Limit'

    SubscriptionCostEstimate:
      type: object
      required:
        - amountPerUser
        - totalAmount
        - currency
        - interval
        - licensedQuantity
      properties:
        amountPerUser:
          type: number
          format: double
          description: The price per user per interval of the calculated subscription without discount.
        totalAmount:
          type: number
          format: double
          description: The overall price per interval of the calculated subscription without discount.
        discountAmount:
          type: number
          format: double
          description: The discount applied to the subscription.
        totalDiscountedAmount:
          type: number
          format: double
          description: The overall discounted price per interval of the calculated subscription.
        currency:
          $ref: '#/components/schemas/Currency'
        interval:
          $ref: '#/components/schemas/PriceInterval'
        licensedQuantity:
          type: integer
          format: int64
          description: The number of calculated licenses.
        promotionCode:
          $ref: '#/components/schemas/PromotionCode'
