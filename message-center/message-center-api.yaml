openapi: 3.0.3

info:
  title: Message Center API
  description: |
    The Message Center API allows integrating Inperium Sell with client's mailbox provider and facilitates sending and receiving emails.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/messageCenter
  - url: https://api.inperium.com/v1/messageCenter

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Accounts
    description: |
      Clients can connect multiple mail accounts to the Message Center. The number of accounts available per user depends on the subscription plan. For more information about the plans and limits, see the Hub API reference.
  - name: Attachments
    description: |
      Users can send or receive files as attachments.
  - name: Drafts
    description: |
      Drafts are messages that have been  but haven't been sent. These messages are kept in a separate folder and can be discarded or sent upon request.
  - name: Folders
    description: |
      The Message Center mimics the folder structure of the original mail service of the client. For example, the Inbox and Outbox folders.
  - name: Messages
    description: |
      Emails or any other communication messages sent or recieved by Inperium clients. Inperium supports all types of operations with messages any other mail client offers.
  - name: Messages sending
    description: |
      The Message Center enables you to send messages right in Inperium. Under the hood, the message will be sent by the mail server the account belongs to.
  - name: Notifications
    description: |
       In order for the Message Center to stay in sync with the mail service provider, you've got to sync webhooks and properly register them. Synchronization is a one-way process, from Nylas to the Message Center.
  - name: Threads
    description: |
      Emails are organized into threads or conversations. Threads allow users to view messages related to the same subject in the right order.

paths:
  /accounts/authLink:
    get:
      tags:
        - Accounts
      summary: Connect a mailbox
      description: Use this endpoint to send a request to connect to the user's mailbox through Nylas.
      operationId: getAccountRegistrationRedirectUrl
      responses:
        200:
          description: Returns the URL for authorization. To sign in, follow the link and provide credentials.
          content:
            application/json:
              schema:
                type: string
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /accounts:
    get:
      tags:
        - Accounts
      summary: List accounts
      description: Use this endpoint to get a list of connected accounts. This endpoint supports paging and sorting.
      operationId: getAccounts
      parameters:
        - name: email
          in: query
          description: The email account connected to the Inperium Message Center.
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPageNumber'
        - $ref: '#/components/parameters/QueryPageSize'
        - $ref: '#/components/parameters/QuerySort'
      responses:
        200:
          description: Returns the list of accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      tags:
        - Accounts
      summary: Register a mailbox
      description: Use this endpoint to get the confirmation token from Nylas.
      operationId: createAccount
      parameters:
        - name: code
          in: query
          description: After you follow the auth URL and submit credentials, Nylas issues a verification code.
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The account has been created.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Retrieve an account
      description: Use this endpoint to locate a specific email account and retrieve its details.
      operationId: getAccount
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns the Account object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    delete:
      tags:
        - Accounts
      summary: Disconnect an account
      description: Use this endpoint to disconnect and remove a mailbox from Inperium.
      operationId: cancelAccount
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        204:
          description: The mailbox has been removed.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /attachments:
    get:
      tags:
        - Attachments
      summary: List attachments
      description: Use this endpoint to retrieve a list of attachments. This endpoint supports paging and sorting.
      operationId: getAttachments
      parameters:
          - $ref: "#/components/parameters/UserAccountId"
          - $ref: "#/components/parameters/QueryPageNumber"
          - $ref: "#/components/parameters/QueryPageSize"
          - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns attachments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      tags:
        - Attachments
      summary: Create an attachment
      description: Use this endpoint to add a new attachment.
      operationId: uploadAttachmentContent
      parameters:
          - $ref: "#/components/parameters/UserAccountUUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                content:
                  type: string
                  description: An attachment to be uploaded. For example, a pdf or docx file.
                  format: binary
      responses:
        200:
          description: Returns a newly created attachment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /attachments/{id}:
    get:
      tags:
        - Attachments
      summary: Retrieve an attachment
      description: Use this endpoint to get a specific attachment by its ID.
      operationId: getAttachment
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns the attachment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    delete:
      tags:
        - Attachments
      summary: Delete an attachment
      description: Use this endpoint to remove an existing attachment.
      operationId: deleteAttachment
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        204:
          description: The attachment has been removed.
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /attachments/{id}/content:
    get:
      tags:
        - Attachments
      summary: Retrieve attachment contents
      description: Use this endpoint to download the contents of the  attachment.
      operationId: getAttachmentContent
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - $ref: "#/components/parameters/UserAccountUUID"
      responses:
        200:
          description: The file contents have been retrieved.
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /drafts:
    get:
      tags:
        - Drafts
      summary: Retrieve drafts
      description: Use this endpoint to get a list of draft messages. This endpoint supports sorting and paging.
      operationId: getDrafts
      parameters:
          - $ref: "#/components/parameters/UserAccountId"
          - $ref: "#/components/parameters/QueryPageNumber"
          - $ref: "#/components/parameters/QueryPageSize"
          - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of drafts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drafts'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      tags:
        - Drafts
      summary: Create a draft
      description: Use this endpoint to add a message draft.
      operationId: createDraft
      requestBody:
        description: In the request body, pass the DraftRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftRequest'
      responses:
        200:
          description: Returns the newly created draft.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Draft'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /drafts/{id}:
    get:
      tags:
        - Drafts
      summary: Retrieve a draft
      description: Use this endpoint to get a specific draft message by its ID.
      operationId: getDraft
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns a draft.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Draft'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    put:
      summary: Update a draft
      description: Use this endpoint to update an existing draft. Note that the draft contents will be overwritten.
      operationId: updateDraft
      tags:
        - Drafts
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      requestBody:
        description: In the request body, pass the DraftRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftRequest'
      responses:
        200:
          description: Returns an updated draft.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Draft'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /folders:
    get:
      tags:
        - Folders
      summary: List folders
      description: Use this endpoint to retrieve a list of mailbox folders. This endpoint supports paging and sorting.
      operationId: getFolders
      parameters:
        - $ref: "#/components/parameters/UserAccountUUID"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of folders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folders'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      tags:
        - Folders
      summary: Create a folder
      description: Use this endpoint to add a new mailbox folder.
      operationId: createFolder
      requestBody:
        description: In the request body, pass the FolderRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderRequest'
      responses:
        200:
          description: Returns a newly created folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /folders/{id}:
    get:
      tags:
        - Folders
      summary: Retrieve a folder
      description: Use this endpoint to get folder details by its ID.
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/UserAccountUUID"
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns the folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    put:
      summary: Update a folder
      description: Use this endpoint to modify an existing folder such as a folder name. Note that the folder properties will be overwritten.
      operationId: updateFolder
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      requestBody:
        description: In the request body, pass the FolderRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderRequest'
      responses:
        200:
          description: In the request body, pass the FolderRequest object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    delete:
      tags:
        - Folders
      summary: Delete a folder
      description: Use this endpoint to remove an existing folder.
      operationId: deleteFolder
      parameters:
        - $ref: "#/components/parameters/UserAccountUUID"
        - $ref: '#/components/parameters/ResourceId'
      responses:
        204:
          description: The folder has been removed.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /messages:
    get:
      tags:
        - Messages
      summary: Retrieve messages
      description: Use this endpoint to retrieve a list of messages. This endpoint supports paging and sorting.
      operationId: getMessages
      parameters:
        - name: threadId
          description: An ID of the thread where the message belongs to.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/UserAccountId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list the messages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      summary: Create a message
      description: Use this endpoint to compose a new message.
      operationId: sendMessage
      tags:
        - Messages sending
      requestBody:
        description: In the request body, pass the MessageSendRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSendRequest'
      responses:
        200:
          description: Returns a newly created message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /messages/{id}:
    get:
      tags:
        - Messages
      summary: Retrieve a message
      description: Use this endpoint to get a specific message by its ID.
      operationId: getMessage
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns a message. The message has been retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    put:
      summary: Update a message
      description: Use this endpoint to update an existing message. Note that the message contents will be overwritten.
      operationId: updateMessage
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      requestBody:
        description: In the request body, pass the MessageUpdateRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUpdateRequest'
      responses:
        200:
          description: Returns an updated message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /threads:
    get:
      tags:
        - Threads
      summary: List threads
      description: Use this endpoint to get message threads. This endpoint supports paging and sorting.
      operationId: getThreads
      parameters:
        - name: folderId
          description: The ID of the folder where the thread belongs to. Use only if userAccountId isn't empty.
          in: query
          schema:
            type: string
        - name: toMe
          description: This parameter marks if the thread is addressed to a user.
          in: query
          schema:
            type: string
        - name: flagged
          description: This parameter marks if the thread has a flag on it.
          in: query
          schema:
            type: string
        - name: unread
          description: This parameter marks of the thread contains unread messages.
          in: query
          schema:
            type: string
        - name: mentions
          description: This parameter marks if the user is mentioned somewhere down the thread.
          in: query
          schema:
            type: string
        - name: attachments
          description: This parameter allows searching and filtering by attached files.
          in: query
          schema:
            type: string
        - name: body
          description: This parameter allows searching in the message body.
          in: query
          schema:
            type: string
        - name: userAccountId
          description: A unique ID assigned to a user account.
          in: query
          schema:
            type: string
            format: uuid
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of threads.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Threads'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /threads/{id}:
    get:
      tags:
        - Threads
      summary: Retrieve a thread
      description: Use this endpoint to get a specific thread by its ID.
      operationId: getThread
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        200:
          description: Returns the Thread object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    put:
      tags:
        - Threads
      summary: Update a thread
      description: Use this endpoint to update an existing thread. The thread contents will be overwritten.
      operationId: updateThread
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      requestBody:
        description: In the request body, pass the ThreadRequest object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadRequest'
      responses:
        204:
          description: Returns an updated thread.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /webhook/sync:
    get:
      tags:
        - Notifications
      summary: Verify with Nylas (incoming)
      description: Use this endpoint to verify the Message Center service callback URI for Nylas.
      operationId: verifyNotificationURI
      parameters:
        - name: challenge
          description: The verify challenge parameter that must be returned as is.
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: The URI has been verified successfully and the challenge parameter has returned as is.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    post:
      tags:
        - Notifications
      summary: Sync with Nylas (incoming)
      description: Use this endpoint to synchronize the Message Center service with Nylas. Feeds incoming notifications about new messages and other changes from the mail provider.
      operationId: processNotifications
      requestBody:
        description: In the request body, pass the Notifications object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notifications'
      responses:
        200:
          description: The synchronization was successful.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'

components:
  securitySchemes:
    BearerAuth:
      description: The token is generated when a user enters credentials. Although you can leverage this token when making API calls, please note that due to security concerns it frequently expires.
      type: http
      scheme: bearer
    ApiKeyAuth:
      description: The API key is a secure key generated by Inperium that can be used for authentication. The API key has an expiration date after which your API requests will be denied by the server.
      type: apiKey
      in: header
      name: X-API-KEY

  parameters:
    ResourceId:
      name: id
      description: A unique ID of the object.
      in: path
      required: true
      schema:
        type: string
        format: UUID
    UserAccountId:
      name: userAccountId
      description: A unique ID assigned to a user account.
      in: query
      required: true
      schema:
        type: string
    UserAccountUUID:
      name: userAccountId
      description: A unique ID assigned to a user account.
      in: query
      required: true
      schema:
        type: string
        format: uuid
    QueryPageNumber:
      name: pageNumber
      in: query
      description: This parameter affects paging. It defines the chunk of data to be retrieved, e.g., records from page 3.
      schema:
        type: integer
        format: int64
    QueryPageSize:
      name: pageSize
      in: query
      description: This parameter affects paging. It defines the number of records per page, e.g., 20 records per page.
      schema:
        type: integer
        format: int64
    QuerySort:
      name: sort
      in: query
      description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
      schema:
        type: string

  schemas:
    Accounts:
      type: object
      description: The array of Account objects.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Account:
      type: object
      description: The Account object contains basic information about the mailbox including the number of unread messages, information on the mail service provider, etc. Note that the account connected to the Message Center isn't neccessarily the one the users authenticates with. I.e., the user can log in to Inperium with a personal email and connect his or her corporate email to the Message Center.
      properties:
        id:
          type: string
          description: A unique ID of the account.
          format: uuid
        email:
          type: string
          description: The email address registered with the Message Center.
        connectionDate:
          type: integer
          description: The date the email was connected.
          format: int64
        status:
          type: string
          description: The connection status. This is an enum property.
          enum:
            - SYNC_INITIAL
            - SYNC_RUNNING
            - SYNC_STOPPED
            - SYNC_ERROR
            - SYNC_INVALID_CREDENTIALS
            - SYNC_FAILED
            - CONNECTION_FAILED
        provider:
          type: string
          description: The mail service provider.
        unreadMessagesAmount:
          type: integer
          description: The number of unread messages.
          format: int64
        sentMessagesAmount:
          type: integer
          description: The total number of messages sent.
        draftMessagesAmount:
          type: integer
          description: The total number of draft messages.

    Threads:
      type: object
      description: The array of threads.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Thread'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Thread:
      type: object
      description: The Thread object contains information about the conversation such as the number of messages, the subject, and many more.
      properties:
        id:
          type: string
          description: A unique ID of the thread.
          format: UUID
        subject:
          description: The subject of the first message in the thread.
          type: string
        unread:
          description: This true/false parameter indicates whether the thread contains unread messages (mutable).
          type: boolean
        starred:
          description: This true/false parameter indicates one or more messages are flagged (mutable).
          type: boolean
        lastMessageReceivedAt:
          description: The date and time of the most recently received message.
          type: integer
          format: int64
        lastMessageSentAt:
          description: The date and time of the most recently sent message in the thread.
          type: integer
          format: int64
        lastMessageFrom:
          $ref: '#/components/schemas/ThreadParticipant'
        bodyExcerpt:
          description: A shortened plain-text preview of the most recent message in the thread.
          type: string
        folderIds:
          type: array
          description: The list of the folders.
          items:
            type: string
            format: uuid
        hasAttachments:
          description: This true/false parameter indicates if the thread has files attached to it.
          type: boolean
        messagesCount:
          description: The total number of messages in the thread.
          type: integer

    ThreadRequest:
      type: object
      description: The request model for creating or updating a thread.
      properties:
        unread:
          type: boolean
          description: The total number of unread messages.
        starred:
          type: boolean
          description: This true/false parameter indicates if one or more messages in the thread are flagged.
        folderId:
          type: string
          description: The ID of the folder the thread belongs to.
          format: uuid

    ThreadParticipant:
      type: object
      description: The ThreadParticipant lists contacts included in the thread, with email address for each participant.
      properties:
        name:
          type: string
          description: The participant's name.
        email:
          type: string
          description: The participant's email address.

    Messages:
      type: object
      description: The array of the Message objects.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Message:
      type: object
      description: Besides the mail contents, the Message object includes service information such as the contact details, the date the message was received, and whether if it's flagged.
      properties:
        id:
          type: string
          description: A unique ID of the message.
          format: uuid
        threadId:
          type: string
          description: A unique ID of the thread the message belongs to.
        subject:
          type: string
          description: The subject of the message.
        from:
          $ref: '#/components/schemas/ThreadParticipant'
        to:
          type: array
          description: The contacts the message was addressed to.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        cc:
          type: array
          description: The contacts who received the message as a copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        bcc:
          type: array
          description: The contacts who received the message as a blind copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        replyTo:
          type: array
          description: The contacts who will get a reply to the message.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        receivedAt:
          type: integer
          description: The date and time the message was delivered.
          format: int64
        unread:
          type: boolean
          description: The true/false parameter indicating if the message was read.
        starred:
          type: boolean
          description: The true/false parameter indicating if the message is flagged.
        body:
          type: string
          description: The contents of the message.
        attachments:
          type: array
          description: The files attached to the message.
          items:
            $ref: '#/components/schemas/Attachment'
        folderIds:
          type: array
          description: The list of the folders that message belongs to.
          items:
            type: string
            format: uuid

    MessageUpdateRequest:
      type: object
      description: The request model that is used for modifying an existing message, for example when a message is moved to another folder.
      properties:
        unread:
          type: boolean
          description: The true/false parameter indicating if the message was read.
        starred:
          type: boolean
          description: The true/false parameter indicating if the message is flagged.
        folderId:
          type: string
          description: A unique ID of the folder the message belongs to.
          format: uuid

    MessageSendRequest:
      type: object
      description: The MessageSendRequest object contains information about the message you are about to send such as its subject, contents, and contacts.
      properties:
        replyToMessageId:
          type: string
          description: An ID of the message.
          format: uuid
        subject:
          type: string
          description: The subject of the message.
        body:
          type: string
          description: The contents of the message.
        fromUserAccountId:
          type: string
          description: A unique ID of the user sending the message.
          format: UUID
        to:
          type: array
          description: The list of contacts added as respondents.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        replyTo:
          type: array
          description: The list of contacts that are in the message thread.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        cc:
          type: array
          description: The list of contacts who will receive the message as a copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        bcc:
          type: array
          description: The list of contacts who will receive the message as a blind copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        attachmentIds:
          type: array
          description: The list of attached files.
          items:
            type: string
            format: uuid
      required:
        - from
        - to

    Folders:
      type: object
      description: The list of mailbox folders.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Folder:
      type: object
      description: The Folder object describes the mailbox folder containing messages. It can be predefined folder such as Inbox or a custom folder created by the Inperium user.
      properties:
        id:
          type: string
          description: A unique ID of the folder.
          format: UUID
        userAccountId:
          type: string
          description: A unique ID of the account.
          format: UUID
        name:
          type: string
          description: The folder name.
        displayName:
          type: string
          description: The folder name.
        unreadMessagesAmount:
          type: integer
          description: The total number of unread messages.
          format: int64
        subfolders:
          type: array
          description: The list of nested folders.
          items:
            $ref: '#/components/schemas/Folder'

    FolderRequest:
      type: object
      description: The request model used to modify the folder properties.
      properties:
        displayName:
          type: string
          description: The folder name.
        parentFolderId:
          type: string
          description: A unique ID of the parent folder. Change it if you want to move a subfolder to another folder.
          format: UUID
        userAccountId:
          type: string
          description: A unique ID of the account.
          format: UUID
      required:
        - userAccountId

    Drafts:
      type: object
      description: The list of draft messages.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Draft'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Draft:
      description: The message that has been composed but hasn't been sent yet.
      allOf:
        - $ref: "#/components/schemas/Message"
        - type: object
          properties:
            replyToMessageId:
              description: An ID of a previous message if the draft is composed as reply.
              type: string

    DraftRequest:
      type: object
      description: The request model used to draft a message or update it.
      properties:
        subject:
          type: string
          description: The subject of the message.
        to:
          type: array
          description: The contacts the message will be sent to.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        cc:
          type: array
          description: The contacts who will receive the message as a copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        bcc:
          type: array
          description: The contacts who received the message as a blind copy.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        body:
          type: string
          description: The contents of the message.
        replyTo:
          type: array
          description: The contacts who will get a reply to the message.
          items:
            $ref: '#/components/schemas/ThreadParticipant'
        from:
          $ref: '#/components/schemas/ThreadParticipant'
        attachmentIds:
          type: array
          description: The files attached to the message.
          items:
            type: string

    Attachments:
      type: object
      description: The list of attached files.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        paging:
          $ref: "#/components/schemas/PageAndSort"

    Attachment:
      type: object
      description: The object containg metadata about the attached file.
      properties:
        id:
          type: string
          description: A unique of the attachment.
          format: uuid
        filename:
          type: string
          description: The name of the file.
        size:
          type: integer
          description: The size of the file.
        contentType:
          type: string
          description: The type of the file.
        messageIds:
          type: array
          description: An ID of the message the attachment belongs to.
          items:
            type: string

    PageAndSort:
      type: object
      description: Paging and sorting information, including the number of records per page, the total of pages and records, the current page, etc.

    ResponseError:
      type: object
      description: The error that is returned as a response to a request.
      required:
        - status
        - message
      properties:
        status:
          type: string
          description: The HTTP status code.
        code:
          type: string
          format: uuid
          description: The optional code of the exception.
        message:
          type: string
          description: The error message text.
        errors:
          type: object
          description: Mapping of fields and errors.

    MessageAttributes:
      description: The Attributes object is a DTO used for Nylas synchronization. Only applicable for message webhooks.
      type: object
      properties:
        thread_id:
          type: string
          description: An ID of the thread the message belongs to.
        received_date:
          type: integer
          description: The date and time.

    TrackingAttributes:
      description: Applicable for message and thread tracking. Contains metadata.
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: The number of times the message was opened. The count starts with 1. Each time the message is opened, the counter will increase by one.
        timestamp:
          type: integer
          format: int64
          description: Indicates the time of the most recent change such as links clicked, message was opened or thread was replied to.
        link_data:
          type: array
          items:
            $ref: '#/components/schemas/MessageTrackingLinkUpdate'
          description: An array of objects with information about any links in the message.
        message_id:
          type: string
          description: An ID of the message.
        from_self:
          type: boolean
          description: Indicates if the message is sent from the owner of the Nylas account.
        thread_id:
          type: string
          description: The ID of the message thread.
        reply_to_message_id:
          type: string
          description: The ID of the message the thread is replying to.

    MessageTrackingLinkUpdate:
      description: Applicable for message link tracking. Contains metadata.
      type: object
      properties:
        url:
          type: string
          description: The URL.
        count:
          type: integer
          format: int32
          description: Number of times the link was clicked.

    NotificationData:
      description: The ObjectData object is a DTO used for Nylas synchronization.
      type: object
      properties:
        account_id:
          type: string
          description: An ID of the email account.
        object:
          type: string
          description: The changed object type.
        id:
          type: string
          description: An ID of the object.
        attributes:
          $ref: '#/components/schemas/MessageAttributes'
        metadata:
          $ref: '#/components/schemas/TrackingAttributes'

    Notification:
      description: This object is a DTO used for Nylas synchronization.
      type: object
      properties:
        date:
          type: integer
          description: The date and time.
        object:
          type: string
          description: The object.
        type:
          type: string
          description: The type of notification.
        object_data:
          $ref: '#/components/schemas/NotificationData'

    Notifications:
      description: The list of notification DTOs.
      type: object
      properties:
        deltas:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
