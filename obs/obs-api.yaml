openapi: 3.0.1

info:
  title: Object Bucket Storage API
  description: |
    The Inperium Object Bucket Storage (OBS) API provides access to the Inperium OBS service that helps manage documents and files stored by Inperium apps such as attachments in Inperium Sell and audio recordings in Inperium Talk. You can leverage this API to store and retrieve documents.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/obs
  - url: https://api.inperium.com/v1/obs

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]

tags:
  - name: Files
    description: |
      The Inperium Object Bucket Storage service stores files. In most cases, files are attached to product entities but some files are stored independently (e.g., avatar images).
  - name: File Types
    description: |
      The Inperium Object Bucket Storage service enables users to upload files such as pdf, png, etc. The FileTypes list all supported file extensions.
  - name: Health Checks
    description: |
      Since Inperium runs multiple services under the hood, it's crucial to identify the health state of each service. You can rely on the health state information when troubleshooting issues.



paths:
  /files:
    post:
      tags:
        - Files
      summary: Upload file
      description: Use this endpoint to upload a new file to Inperium OBS. For example, a contract or an image.
      operationId: uploadFile
      parameters:
        - name: description
          in: query
          description: An optional description of this file.
          schema:
            type: string
        - name: public
          in: query
          description: An optional true/false parameter that indicates if the file should be visible for non-authorized users or not. Default false.
          schema:
            type: boolean
            default: false
        - name: userId
          in: query
          description: An optional ID of the user who uploaded the file. Default is taken from the principal. Only for internal usage.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                content:
                  type: string
                  description: A file to be uploaded.
                  format: binary
      responses:
        201:
          description: A new file has been created.
          content:
            application/json:
              schema:
                type: string
                example: $FILE-UUID
        default:
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
        - Files
      summary: Delete files
      description: Use this endpoint to remove multiple files.
      operationId: deleteFiles
      requestBody:
        description: File IDs to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
                example: ["$OBJECT-UUID1", "$OBJECT-UUID2"]
        required: true
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          $ref: "#/components/responses/ErrorResponse"
  /files/{id}:
    get:
      tags:
        - Files
      summary: Get a file
      description: Use this endpoint to retrieve a file by its ID.
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: token
          in: query
          description: The JWT token or API key.
          schema:
            type: string
      responses:
        200:
          description: Returns the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFile'
        default:
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
        - Files
      summary: Delete a file
      description: Use this endpoint to remove a file.
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          $ref: "#/components/responses/ErrorResponse"
  /files/{id}/content:
    get:
      tags:
        - Files
      summary: Get file contents
      description: Use this endpoint to read the contents of the file.
      operationId: getFileContent
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: token
          in: query
          description: The JWT token or API key.
          schema:
            type: string
      responses:
        200:
          description: The file contents have been retrieved.
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          $ref: "#/components/responses/ErrorResponse"
  /health:
    get:
      tags:
        - Health Checks
      summary: Check health
      description: Use this endpoint to verify that the microservice runs as usual.
      operationId: checkHealth
      responses:
        200:
          description: Returns an empty response that is used for OK non-returning operations.
          content: { }
        default:
          $ref: "#/components/responses/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      description: This token is generated when a user enters credentials. Although you can leverage this token when making API calls, note that it frequently expires due to security concerns.
      type: http
      scheme: bearer
    ApiKeyAuth:
      description: API key is a secure key that can be used for authentication. The API key has an expiration date after which your API requests will be denied by the server.
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    DataFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        type:
          description: The file extension. Currently, the Inperium OBS service supports PDF, CSV, PNG, etc.
          type: string
        name:
          description: The file name. Unlike ID it's not necessarily a unique name. The name must contain at least one character.
          minLength: 1
          type: string
        contentSize:
          description: The file size.
          type: integer
          format: int64
        description:
          description: The file description provides more information about the file. For example, why it has been uploaded, its author.
          type: string
        public:
          description: The boolean that indicates if the file can be visible for non-authorized users or not.
          type: boolean
        createdAt:
          description: The date when the file was added to Inperium.
          type: integer
          format: int64
        updatedAt:
          description: The date when the file was modified.
          type: integer
          format: int64
      description: Inperium OBS service processes various DataFile objects such as pdf files and images.
    ErrorResponse:
      required:
        - id
        - status
        - path
        - message
        - details
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique error id.
        status:
          type: integer
          description: HTTP response code.
          example: 403
        path:
          type: string
          description: a URI that identifies the specific occurrence of the error.
          example: 'GET items/77807c87-b6ef-49e4-89f5-07c07d33a331'
        message:
          type: string
          description: The human-readable localized error message.
          example: 'Could not change item.'
        details:
          type: string
          description: The human-readable explanation of the error for developers on English.
          example: 'Item entity 77807c87-b6ef-49e4-89f5-07c07d33a331 has READ_ONLY status.'
      description: An error returned by Inperium API.
    Id:
      type: string
      format: uuid
      description: A unique ID of the object.
  responses:
    EmptyResponse:
      description: Returns an empty response that is used for OK non-returning operations.
      content: { }
    ErrorResponse:
      description: Bad request, security violation, or internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    ResourceId:
      name: id
      description: A unique ID of the object.
      in: path
      required: true
      schema:
        type: string
        format: uuid
