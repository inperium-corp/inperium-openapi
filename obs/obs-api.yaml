openapi: 3.0.1

info:
  title: Inperium OBS API
  description: |
    This RESTful API provides access to the Inperium OBS service that helps manage documents and files. You can leverage this API to store and retrieve documents.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/obs
  - url: https://api.inperium.com/v1/obs

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]

tags:
  - name: Files
    description: |
      The Inperium OBS service stores files. In most cases, files are attached to product entities but some files are stored independently (e.g., avatar images).
  - name: FileTypes
    description: |
      The Inperium OBS service enables users to upload files such as pdf, png, etc. The FileTypes list all supported file extensions.
  - name: Health checks
    description: |
      Since Inperium runs multiple services under the hood, it's crucial to identify the health state of each service. You can rely on the health state information when troubleshooting issues.



paths:
  /health:
    get:
      tags:
        - Health checks
      summary: Check health
      description: Use this endpoint to verify that the microservice runs as usual.
      operationId: checkHealth
      responses:
        200:
          description: Returns an empty response that is used for OK non-returning operations.
          content: { }
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /files:
    post:
      tags:
        - Files
      summary: Upload file
      description: Use this endpoint to upload a new file to Inperium OBS. For example, a contract or an image.
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                content:
                  type: string
                  description: A file to be uploaded.
                  format: binary
                description:
                  type: string
                  description: An optional description of this file.
                public:
                  type: boolean
                  default: false
                  description: An optional true/false parameter that indicates if the file should be visible for non-authorized users or not. Default false.
                userId:
                  type: string
                  format: uuid
                  description: An optional ID of the user who uploaded the file. Default is taken from the principal. Only for internal usage.
      responses:
        201:
          description: A new file has been created.
          content:
            application/json:
              schema:
                type: string
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /files/{id}:
    get:
      tags:
        - Files
      summary: Get a file
      description: Use this endpoint to retrieve a file by its ID.
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: token
          in: query
          description: The JWT token or API key.
          schema:
            type: string
      responses:
        200:
          description: Returns the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFile'
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /files/{id}/content:
    get:
      tags:
        - Files
      summary: Get file contents
      description: Use this endpoint to read the contents of the file.
      operationId: getFileContent
      parameters:
        - $ref: '#/components/parameters/ResourceId'
        - name: token
          in: query
          description: The JWT token or API key.
          schema:
            type: string
      responses:
        200:
          description: The file contents have been retrieved.
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /files/uploadFromStarter:
    post:
      tags:
        - Files
      deprecated: true
      summary: Re-upload by OBS starter
      description: This is a deprecated endpoint. Use this endpoint to re-add the file uploaded by OBS starter lib via the microservice.
      operationId: reAddFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMigration'
      responses:
        201:
          description: A new file has been created.
          content:
            application/json:
              schema:
                type: string
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
components:
  securitySchemes:
    BearerAuth:
      description: This token is generated when a user enters credentials. Although you can leverage this token when making API calls, note that it frequently expires due to security concerns.
      type: http
      scheme: bearer
    ApiKeyAuth:
      description: API key is a secure key that can be used for authentication. The API key has an expiration date after which your API requests will be denied by the server.
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    FileMigration:
      type: object
      properties:
        fileId:
          type: string
          description: The ID of the file.
        tenantId:
          type: string
          description: The ID of the tenant.
          format: uuid
        userId:
          type: string
          description: The ID of the user.
          format: uuid
        fileName:
          type: string
          description: The file name.
        fileDescription:
          type: string
          description: Any information about the file.
    DataFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        type:
          description: The file extension. Currently, the Inperium OBS service supports PDF, CSV, PNG, etc.
          type: string
        name:
          description: The file name. Unlike ID it's not necessarily a unique name. The name must contain at least one character.
          minLength: 1
          type: string
        contentSize:
          description: The file size.
          type: integer
          format: int64
        description:
          description: The file description provides more information about the file. For example, why it has been uploaded, its author.
          type: string
        public:
          description: The boolean that indicates if the file can be visible for non-authorized users or not.
          type: boolean
        createdAt:
          description: The date when the file was added to Inperium.
          type: integer
          format: int64
        updatedAt:
          description: The date when the file was modified.
          type: integer
          format: int64
      description: Inperium OBS service processes various DataFile objects such as pdf files and images.
    ErrorModel:
      required:
        - code
        - type
      type: object
      properties:
        code:
          type: string
          description: HTTP error code returned by Inperium.
        message:
          type: string
          description: The message with event details.
        type:
          type: string
          description: The error level.
          enum:
            - ERROR
            - WARN
            - INFO
        details:
          type: string
          description: Comma-separated list of fields, which caused the error condition
      description: Each error contains information that might be helpful for troubleshooting issues.
    Id:
      type: string
      format: uuid
      description: A unique ID of the object.
    ResponseError:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorModel'
  responses:
    EmptyResponse:
      description: Returns an empty response that is used for OK non-returning operations.
      content: { }
    ErrorResponse:
      description: Bad request, security violation, or internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
  parameters:
    ResourceId:
      name: id
      description: A unique ID of the object.
      in: path
      required: true
      schema:
        type: string
        format: uuid
