openapi: 3.0.1

info:
  title: Inperium Sell API
  description: |
    This RESTful API provides access to the Inperium Sell service including the ability to add companies and contacts and create deals.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/sell
  - url: https://api.inperium.com/v1/sell

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Activities
    description: |
      Inperium Sell enables users to keep notes, plan tasks, and log calls and meetings. These activities are typically linked to deals, contacts, or companies.
  - name: Attachments
    description: |
      In Inperium Sell, users have the ability to attach documents (pdf, csv, docx, etc.) to deals and companies.
  - name: Auth
    description: |
      Authentication and authorization methods used to access Inperium Sell.
  - name: Calendars
    description: |
      In Inperium Sell, users have the ability to review calendars & events.
  - name: Campaigns
    description: |
      Inperium Sell enables users to create marketing campaigns.
  - name: CommunicationMethods
    description: |
      In Inperium, you can assign a phone number or email address to a company. A communication method is a channel you can leverage to connect with customers or partners.
  - name: Companies
    description: |
      Company is one of major entities in Inperium Sell. Users add companies, literally the businesses they work with, and track deal progress there.
  - name: Company Data
    description: |
      Company data can be enriched with the publicly available information  from the internet, for example, the industry, employee counts, links to social media.
  - name: Company Relationships
    description: |
      Inperium users can associate companies with each other and create parent-child relationships.
  - name: ContactCommunicationMethods
    description: |
      In Inperium, you can assign a phone number or email address to a contact. A communication method is a channel you can leverage to connect with customers or partners.
  - name: Contacts
    description: |
      Contact is one of the major entities in Inperium Sell. Contacts are individuals or company's representatives Inperium Sell users work with.
  - name: Contact Data
    description: |
      Contact data can be enriched with the publicly available information about from the internet, for example, links to social media or a CV.
  - name: Deals
    description: |
      Deals are one of the major entities in Inperium Sell. Users create deals, link them to contacts or companies. For each deal, a user can create multiple quotes and invoices, add products, etc.
  - name: DealItems
    description: |
      As you create a deal, you add products and additional fees and taxes. These items are required to calculate the deal value.
  - name: Deprecated
    description: |
      Deprecated features which will be terminated in next releases.
  - name: Dictionaries
    description: |
      Dictionaries represent lists of objects.
  - name: Documents
    description: |
      Inperium Sell stores files in AWS. In most cases, documents are attached to entities such as companies or deals, but some documents are stored independently (e.g., avatar images).
  - name: DocumentTypes
    description: |
      Inperium Sell enables users to upload documents such as pdfs, png, etc. The DocumentTypes list all supported document extensions.
  - name: Exports
    description: |
      Inperium Sell enables users to export data from the CRM. For example, to reuse it in another app or to store as a backup.
  - name: Forms
    description: |
      In Inperium Sell, users can create custom forms to collect data.
  - name: GlobalSearch
    description: |
      Global search gives the ability to locate entities by name. It searches across deals, companies, contacts at the same time.
  - name: Import
    description: |
      Inperium Sell enables users to import data from other CRMs. For example, contact data, information about deals, and product pricelists.
  - name: ImportLog
    description: |
      If import fails for some reason or data was mapped to a wrong column, refer to the Import log for troubleshooting ideas.
  - name: Integrations
    description: |
      You can leverage third-party applications such as Stripe and Xero and integrate them with Inperium Sell.
  - name: Invoices
    description: |
      Inperium Sell enables users to create professional-looking invoices and process them within CRM.
  - name: InvoicePage
    description: |
      Inperium Sell allows sharing invoices with customers through public URLs. It means you can send an invoice link to your clients, they will follow this link, and review the invoice right in the browser.
  - name: Items
    description: |
      Products and fees are added to deals and quotes and listed as items.
  - name: PaymentMethods
    description: |
      Inperium Sell support integration with Stripe and allows to process payments through this system.
  - name: Payments
    description: |
      In Inperium Sell, payments are separated from invoices. An invoice can be paid in full or splitted into several payments that should be logged individually.
  - name: Pipelines
    description: |
      Pipelines describe the sales process, or being more specific, milestones the deal goes through from start to end. For example, Lead in, Demo, Contact sent, Deal won.
  - name: PipelineStatistics
    description: |
      Analyze your sales progress with pipeline statistics.
  - name: Predefined Metadata
    description: |
      Predefined metadata groups are dictionaries containing data such as currency names.
  - name: Products
    description: |
      Products are items or services the tenant offers. Each product has a description, retail price, and cost.
  - name: Properties
    description: |
      Inperium Sell comes with preset properties (or fields) as well as enables users to create custom definitions. Custom properties are helpful if you need to accomodate your specific business workflow and keep additional data in Inperium Sell. For example, shipment information for deal tracking. In this case, you can add a custom property for deals: both API and regular users will get access to it fro the deals page.
  - name: Quotes
    description: |
      Quotes are sales offers. While negotiating the contract terms, you can propose quotes that typically include products, discounts, and payment plans.
  - name: PublicQuote
    description: |
      Inperium Sell allows sharing quotes with customers through public URLs. It means you can send your clients a quote link, they will follow the link and review the quote right in the browser.
  - name: Reports
    description: |
      Inperium Sell brings you insights into sales activities and creates charts showing how many companies or contacts were created, how many deals were closed, etc. Use the reports to track team productivity and improve performance.
  - name: Stages
    description: |
      The sales pipelines consist of stages. The stages are milestones the deal goes through before it gets closed. For example, Contract Sent, Initial Call. Inperium Sell enables users to add as many stages to their pipelines as they need.
  - name: StripeAuthorizations
    description: |
      To configure integration with Stripe, you've got to authenticate your app with Stripe.
  - name: StripeTerminals
    description: |
      Configure Stripe terminals to receive payments.
  - name: Template
    description: |
      Templates are ready-to-use samples, for example introductory emails or follow-ups. Templates help speed up sales process and make it more structured.
  - name: TenantIntegrations
    description: |
      You can enable third-party integrations for your tenant and use Inperium to its fullest.
  - name: TenantSettings
    description: |
      In Inperium Sell, administrators can set up tenant-wide properties and preferences such as default currency, quote prefix, revenue goal, etc.
  - name: Views
    description: |
      Views control what data is returned to the user, including fitering, sorting, and columns on a display.
  - name: XeroAuthorizations
    description: |
      Configure integration with Xero.

paths:
  /activities:
    get:
      tags:
        - Activities
      summary: List activities
      description: Use this endpoint to get a complete list of activities. This endpoint supports paging and sorting. To narrow down results and locate specfic activities, use query parameters.
      operationId: getActivities
      parameters:
        - name: authorId
          in: query
          description: The ID of the user who added the activity.
          schema:
            type: string
        - name: type
          in: query
          description: The type of activity. Each activity type (task, call, etc.) has an ID.
          schema:
            type: string
        - name: associatedContactId
          in: query
          description: The ID of the contact the activity is linked to.
          schema:
            type: string
        - name: associatedCompanyId
          in: query
          description: The ID of the company the activity is linked to.
          schema:
            type: string
        - name: associatedDealId
          in: query
          description: The ID of the deal the activity is linked to.
          schema:
            type: string
        - name: createdAt
          in: query
          description: The date when the activity was added.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the activities list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Activities
      summary: Create an activity
      description: Use this endpoint to create a new activity, for example a new To-Do task.
      operationId: createActivity
      requestBody:
        description: In the request body, pass the ActivityRequest object.
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ActivityRequest"
        required: false
      responses:
        201:
          description: A new activity has been created. Returns an activity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: activity
  /activities/{id}:
    put:
      tags:
        - Activities
      summary: Update an activity
      description: Use this endpoint to modify an existing activity.
      operationId: updateActivity
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the ActivityRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ActivityRequest"
            example: {}
        required: false
      responses:
        200:
          description: The activity has been updated. Returns an activity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: activity
    delete:
      tags:
        - Activities
      summary: Delete an activity
      description: Use this endpoint to remove an existing activity.
      operationId: deleteActivity
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The actvity has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /attachments:
    get:
      tags:
        - Attachments
      summary: List attachments
      description: Use this endpoint to get a list of attached files. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getAttachments
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: company
          description: The ID of company. Use this parameter to get attachments associated with this company ID.
          in: query
          schema:
            type: string
        - name: contact
          description: The ID of the contact. Use this parameter to get attachments associated with this contact ID.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of attachments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachments"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Attachments
      summary: Create an attachment
      description: Use this endpoint to add a new attachment to Inperium Sell.
      operationId: createAttachment
      requestBody:
        description: In the request body, pass the AttachmentRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AttachmentRequest"
        required: false
      responses:
        201:
          description: A new attachment has been created. Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: attachment
  /attachments/{id}:
    get:
      tags:
        - Attachments
      summary: Retrieve an attachment
      description: Use this endpoint to locate a specific attachment and retrieve its details.
      operationId: getAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Attachments
      summary: Update an attachment
      description: Use this endpoint to modify and overwrite an existing attachment.
      operationId: updateAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated AttachmentRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AttachmentRequest"
        required: false
      responses:
        200:
          description: The attachment has been updated. Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: attachment
    delete:
      tags:
        - Attachments
      summary: Delete an attachment
      description: Use this endpoint to remove an existing attachment.
      operationId: deleteAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The attachment has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List campaigns
      description: Use this endpoint to get a complete list of campaigns. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getCampaigns
      parameters:
        - name: id
          in: query
          description: The ID of the campaign.
          schema:
            type: string
        - name: name
          in: query
          description: The campaign name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns campaigns.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaigns"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Campaigns
      summary: Create a campaign
      description: Use this endpoint to add a new campaign to Inperium Sell.
      operationId: createCampaign
      requestBody:
        description: In the request body, pass the CampaignRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CampaignRequest"
        required: false
      responses:
        201:
          description: The new campaign has been created. Returns a campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: campaign
  /campaigns/{id}:
    get:
      tags:
        - Campaigns
      summary: Retrieve a campaign
      description: Use this endpoint to search for a specific endpoint and retrieve its details.
      operationId: getCampaign
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The campaign details have been retrieved. Returns a campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignCustom"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Campaigns
      summary: Update a campaign
      description: Use this endpoint to modify an existing campaign.
      operationId: updateCampaign
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the Campaign object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Campaign"
        required: false
      responses:
        200:
          description: The campaign has been updated. Returns a campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: campaign
    delete:
      tags:
        - Campaigns
      summary: Delete a campaign
      description: Use this endpoint to remove an existing campaign.
      operationId: deleteCampaign
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The campaign has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /campaigns/{id}/contacts:
    get:
      tags:
        - Contacts
      summary: List contacts
      description: Use this endpoint to retrieve a list of contacts associated with a specific campaign. This endpoint supports paging and sorting.
      operationId: getCampaignContacts
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The contacts have been retrieved. Returns contacts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contacts"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /communication-methods:
    post:
      tags:
        - CommunicationMethods
      summary: Add a communication method
      description: Use this endpoint to set up a new communication method for an entity (contact, company, etc.). For example, a contact has an email address and now you can add an extra communication channel — the phone number.
      operationId: createCommunicationMethod
      requestBody:
        description: In the request body, pass the CommunicationMethod object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CommunicationMethod"
      responses:
        201:
          description: The new communication method has been added. Returns the communication method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationMethod"
  /communication-methods/{id}:
    get:
      tags:
        - CommunicationMethods
      summary: Retrieve a communication method
      description: Use this endpoint to locate a specific communication method and retrieve its details.
      operationId: getCommunicationMethod
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Information has been retrieved. Returns the communication method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationMethod"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - CommunicationMethods
      summary: Update a communication method
      description: Use this endpoint to modify a communication method.
      operationId: updateCommunicationMethod
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the CommunicationMethod object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CommunicationMethod"
        required: false
      responses:
        200:
          description: The communication method has been updated. Returns the communication method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationMethod"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies:
    get:
      tags:
        - Companies
      summary: List companies
      description: Use this endpoint to get a list of companies. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getCompanies
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The companies have been retrieved. Returns the list of companies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Companies"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Companies
      summary: Create a company
      description: Use this endpoint to add a new company.
      operationId: createCompany
      requestBody:
        description: In the request body, pass CompanyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        201:
          description: The new company has been created. Returns the company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    patch:
      tags:
        - Companies
      summary: Update companies in bulk
      description: Use this endpoint to modify multiple companies at once. For example, you can set the 'industry' field to the same value or assign several companies to a certain Inperium user.
      operationId: updateCompanies
      parameters:
        - name: ids
          description: The ID of the company.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: In the request body, pass the CompanyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        201:
          description: The companies have been updated. Returns the list of companies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: companies
  /companies/enrich:
    get:
      tags:
        - Company Data
      summary: Enrich company information
      description: Use this endpoint to load information about the company that is publicly available online. Inperium pulls information about the company based on its domain.
      operationId: getCompanyDataByDomain
      parameters:
        - name: domainName
          in: query
          description: The company website address.
          schema:
            type: string
      responses:
        200:
          description: The company data has been found. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Retrieve a company
      description: Use this endpoint to retrieve company details.
      operationId: getCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Companies
      summary: Update a company
      description: Use this endpoint to modify and overwrite company information. Unlike `PATCH`, this action completely overwrites the company data.
      operationId: updateCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the reguest body, pass the CompanyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    patch:
      tags:
        - Companies
      summary: Partially update a company
      description: Use this endpoint to update specific fields in company details.
      operationId: updateCompanyPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the CompanyRequest object with the details that need to be updated.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    delete:
      tags:
        - Companies
      summary: Delete a company
      description: Use this endpoint to remove a company.
      operationId: deleteCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies/merge:
    post:
      tags:
        - Companies
      summary: Merge company properties
      description: Use this endpoint to merge companies. The properties will be copied from the former company and written to the latter company. The source company will be deleted.
      operationId: mergeCompanies
      parameters:
        - name: sourceId
          in: query
          description: The ID of the origin company.
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          in: query
          description: The ID of the target company.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the CompanyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The origin company has been removed. The target company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

  /companyRelationships:
    get:
      tags:
        - Company Relationships
      summary: List relationships
      description: Use this endpoint to get a list of connections associated with the company.
      operationId: getAllCompanyRelationships
      parameters:
        - name: company
          in: query
          description: The ID of the company.
          schema:
            type: string
      responses:
        200:
          description: The company links have been retrieved. Returns the company relationships.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyRelationships"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Company Relationships
      summary: Add a relationship
      description: Use this endpoint to create a new link for the company.
      operationId: createCompanyRelationship
      requestBody:
        description: In the request body, pass the CompanyRelationshipRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CompanyRelationshipRequest"
        required: false
      responses:
        201:
          description: A new link has been added for the company. Returns a company relationship.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyRelationship"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: companyRelationship
  /companyRelationships/{id}:
    delete:
      tags:
        - Company Relationships
      summary: Delete a relationship
      description: Use this endpoint to remove a relationship for the company and delete links between companies.
      operationId: deleteCompanyRelationships
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts:
    get:
      tags:
        - Contacts
      summary: List contacts
      description: Use this endpoint to get a list of available contacts. This operation supports paging, sorting, and filtering by fields such as contact name.
      operationId: getContacts
      parameters:
        - name: fullName
          description: The name of the contact.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: Contacts have been retrieved. Returns a list of contacts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contacts"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Contacts
      summary: Create a contact
      description: Use this endpoint to add new contacts to Inperium Sell.
      operationId: createContact
      requestBody:
        description: In the request body, pass the ContactRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        201:
          description: A new contact has been created. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    patch:
      tags:
        - Contacts
      summary: Update contacts in bulk
      description: Use this endpoint to update properties for two or more contacts. For example, assign contacts to an Inperium user or associate several contacts with the same company.
      operationId: updateContacts
      parameters:
        - name: ids
          description: IDs of the contacts that you want to update.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: In the request body, pass the ContactRequest objects will the values you want to set.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        201:
          description: The contacts have been updated. Returns the list of contacts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
  /contacts/enrich:
    get:
      tags:
        - Contact Data
      summary: Enrich contact data
      description: Use this endpoint to load information about the contact that is publicly available online. Inperium pulls information about the contact based on contact's email address.
      operationId: getContactDataByEmail
      parameters:
        - name: email
          in: query
          description: The contact's email address.
          schema:
            type: string
      responses:
        200:
          description: The contact details has been enriched. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Retrieve a contact
      description: Use this endpoint to retrieve details for a specific contact.
      operationId: getContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The contact data has been retrieved. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Contacts
      summary: Update a contact
      description: Use this endpoint to update a contact. Unlike `PATCH`, this operation overwrites contact details completely.
      operationId: updateContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, the ContactRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The contact details have been updated. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    patch:
      tags:
        - Contacts
      summary: Partially update a contact
      description: Use this endpoint to update specific fields in contact details. Unlike `PUT`, this operation overwrites properties partially.
      operationId: updateContactPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the ContactRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The contact details have been updated. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    delete:
      tags:
        - Contacts
      summary: Delete a contact
      description: Use this endpoint to remove a contact from Inperium Sell.
      operationId: deleteContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/merge:
    post:
      tags:
        - Contacts
      summary: Merge contact properties
      description: Use this endpoint to merge contacts. The properties of the origin contact will be moved to the target contact (e.g., name, address) and the origin contact will be deleted.
      operationId: mergeContacts
      parameters:
        - name: sourceId
          description: The ID of the source contact.
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          description: The ID of the target contact.
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the ContactRequest object with the properties that need to be merged.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The target contact has been updated. The origin contact has been removed. Returns the target contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/{id}/communication-methods:
    get:
      tags:
        - ContactCommunicationMethods
      summary: Retrieve a communication method
      description: Use this endpoint to retrieve a phone number or email address associated with this contact.
      operationId: getContactCommunicationMethods
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The contact data has been retrieved. Returns a communication method.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommunicationMethod"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - ContactCommunicationMethods
      summary: Add a communication method
      description: Use this endpoint to add a new communication channel for the contact, i.e. an email or phone number.
      operationId: createContactCommunicationMethod
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the CommunicationMethod object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CommunicationMethod"
        required: false
      responses:
        200:
          description: The contact data has been updated. Returns a communication method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationMethod"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/{id}/communication-methods/{communicationMethodId}:
    put:
      tags:
        - ContactCommunicationMethods
      summary: Update a communication method
      description: Use this endpoint to update contact's phone number or email address.
      operationId: updateContactCommunicationMethod
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: communicationMethodId
          description: The ID of the communication method.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the CommunicationMethod object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CommunicationMethod"
      responses:
        200:
          description: The contact data has been updated. Returns a communication method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationMethod"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals:
    get:
      tags:
        - Deals
      summary: Retrieve deals
      description: Use this endpoint to list all deals. This operation supports paging and sorting.
      operationId: getDeals
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - in: query
          name: sort
          schema:
            type: string
            default: "+createdAt"
          description: This parameter affects sorting. It specifies the property name to sort the records by, e.g., price or date.
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The deals have been retrieved. Returns deals.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deals"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Deals
      summary: Create a deal
      description: Use this endpoint to create a new deal.
      operationId: createDeal
      requestBody:
        description: In the request body, pass the DealRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        201:
          description: A new deal has been created. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    patch:
      tags:
        - Deals
      summary: Update deals in bulk
      description: Use this endpoint to simultaneously update properties of several deals. For example, you can pick multiple deals and assign them to the same Inperium user.
      operationId: updateDeals
      parameters:
        - name: ids
          description: The IDs of the deals.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: In the request body, pass the DealRequest object with properties you want to update.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        201:
          description: The deals have been updated. Returns the deals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deals
  /deals/{id}:
    get:
      tags:
        - Deals
      summary: Retrieve a deal
      description: Use this endpoint to locate a specific deal and retrieve its details.
      operationId: getDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The deal has been retrieved. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Deals
      summary: Update a deal
      description: Use this endpoint to modify deal details. Unlike `PATCH`, this operation completely overwrites a deal.
      operationId: updateDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the DealRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The deal has been updated. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    patch:
      tags:
        - Deals
      summary: Partially update a deal
      description: Use this endpoint to modify some of the deal properties. Unlike `PUT`, this operation doesn't overwrite the deal completely.
      operationId: updateDealPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the DealRequest object with the properties you want to update.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The deal has been updated. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    delete:
      tags:
        - Deals
      summary: Delete a deal
      description: Use this endpoint to remove a deal. Note that removing a deal that is no longer active is not the best decision from the business perspective. Stale deals should be assigned to a final stage like 'Deal lost' instead of being deleted.
      operationId: deleteDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals/merge:
    post:
      tags:
        - Deals
      summary: Merge deals
      description: Use this endpoint to merge deals. The contents of the origin deal with be moved to the target deal. As a result, the first deal will be removed.
      operationId: mergeDeals
      parameters:
        - name: sourceId
          description: The ID of the origin deal.
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          description: The ID of the target deal.
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the DealRequest object with the properties to be merged.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The target deal has been updated. The origin deal has been removed. Returns the deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals/{id}/items:
    get:
      tags:
        - DealItems
      summary: List deal items
      description: Use this endpoint to get information about the products included in the deal as well as any applicable fees.
      operationId: getDealItems
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Deal items have been retrieved. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsAndAdditionalFees"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - DealItems
      summary: Add items
      description: Use this endpoint to add items to the deal. It can be a product or fee.
      operationId: createDealItems
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the ItemsAndAdditionalFees object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ItemsAndAdditionalFees"
        required: false
      responses:
        201:
          description: Items have been added. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsAndAdditionalFees"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: dealItems
  /dictionaryGroups/{groupId}:
    get:
      tags:
        - Dictionaries
      summary: Retrieve a dictionary
      description: Use this endpoint to retrieve a dictionary group by its ID.
      operationId: getDictionaryGroup
      parameters:
        - name: groupId
          description: The ID of the dictionary group.
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The dictionary group has been retrieved. Returns dictionary items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DictionaryItems"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /exports:
    post:
      tags:
        - Exports
      summary: Export data
      description: Use this endpoint to export companies, deals, etc. This operation supports paging, sorting, and filtering.
      operationId: runExport
      requestBody:
        description: In the request body, pass the ExportRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRequest"
      responses:
        200:
          description: The export started. Returns the export file name.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Export"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: fields
  /exports/{id}:
    get:
      tags:
        - Exports
      summary: Download a file
      description: Use this endpoint to download a file containing export results.
      operationId: getExport
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The export file has been downloaded.
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /items:
    get:
      tags:
        - Items
      summary: List items
      description: Use this endpoint to retrieve items (products or fees) connected to a specific deal or quote. This operation supports paging and sorting.
      operationId: getItems
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: dealId
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The items have been retrieved. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /forms:
    get:
      tags:
        - Forms
      summary: List forms
      description: Use this endpoint to retrieve custom forms. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getForms
      parameters:
        - name: name
          in: query
          description: The form name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The forms have been retrieved. Returns forms.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forms"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Forms
      summary: Create a form
      description: Use this endpoint to add a new custom forms.
      operationId: createForm
      requestBody:
        description: In the request body, pass the Form object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Form"
        required: false
      responses:
        201:
          description: The form has been created. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: form
  /forms/{id}:
    get:
      tags:
        - Forms
      summary: Retrieve a form
      description: Use this endpoint to locate a specific form and get its details.
      operationId: getForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The form has been retrieved. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Forms
      summary: Update a form
      description: Use this endpoint to modify and overwrite an existing form.
      operationId: updateForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the Form object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Form"
        required: false
      responses:
        200:
          description: The form has been updated. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: form
    delete:
      tags:
        - Forms
      summary: Delete a form
      description: Use this endpoint to remove a form.
      operationId: deleteForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /globalSearch:
    get:
      tags:
        - GlobalSearch
      summary: Retrieve data
      description: Use this endpoint to search across companies, contacts, and deals. For example, locate all entities that contain "bowl" such as Bowler Inc., Marcus Bowlson.
      operationId: globalSearch
      parameters:
        - name: query
          description: The phrase to search for.
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: The search results have been retrieved. Returns GlobalSearchResults.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalSearchResults"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /imports:
    get:
      tags:
        - Imports
      summary: List imports
      description: Use this endpoint to get information about previous imports. This operation supports paging and sorting.
      operationId: getImportEntries
      parameters:
        - name: filename
          in: query
          description: The name of the uploaded file. Specify a name to search for a specific import.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The import log has been retrieved. Returns the list of imports.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imports"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Imports
      summary: Import a file
      description: Use this endpoint to upload a file containing entities to Inperium. For example, you can upload your client data exported from other CRMs and that was previously stored in spreadsheets.
      operationId: importFile
      parameters:
        - name: mappings
          description: This parameter defines mapping between incoming data and Inperium Sell properties.
          in: query
          schema:
            type: string
        - name: fileUrl
          description: The link to the import file.
          in: query
          schema:
            type: string
      responses:
        201:
          description: The entities have been imported.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations:
    get:
      tags:
        - Integrations
      summary: List integrations
      description: Use this endpoint to retrieve a complete list of third-party integrations enabled for the tenant account. This operation supports paging, sorting, and filtering.
      operationId: getIntegrations
      parameters:
        - name: id
          description: The integration ID.
          in: query
          schema:
            type: string
        - name: name
          description: The integration name.
          in: query
          schema:
            type: string
        - name: type
          description: The integration type.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Integrations have been retrieved. Returns integrations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integrations"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/authorize:
    get:
      tags:
        - StripeAuthorizations
      summary: Authorize Stripe
      description: Use this endpoint to enable payment processing with Stripe and authorize the Stripe account.
      operationId: authorizeStripe
      responses:
        200:
          description: The request has been forwarded to the redirect URL. Returns the OAuth2Redirect object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2Redirect"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/authorize/callback:
    get:
      tags:
        - StripeAuthorizations
      summary: Get the Stripe callback
      description: Get the Stripe OAuth2 authorization callback.
      operationId: callbackStripe
      parameters:
        - name: code
          description: The one-off authorization code.
          in: query
          schema:
            type: string
      responses:
        200:
          description: Authorization has been successful.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/credentials:
    get:
      tags:
        - StripeAuthorizations
      summary: Get the Stripe credentials
      description: Use this endpoint to retrieve Stripe credentials for the current tenant.
      operationId: getStripeCredentials
      responses:
        200:
          description: The Stripe credentials have been retrieved. Returns Stripe credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeCredentials"
  /integrations/stripe/deauthorize:
    get:
      tags:
        - StripeAuthorizations
      summary: Deauthorize Stripe
      description: Use this endpoint to disable integration with Stripe and revoke access.
      operationId: deauthorizeStripe
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/xero/authorize:
    get:
      tags:
        - XeroAuthorizations
      summary: Authorize Xero
      description: Use this endpoint to enable integration with Xero and authorize the Xero account.
      operationId: authorizeXero
      responses:
        200:
          description: The request has been forwarded to the redirect URL.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2Redirect"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/xero/authorize/callback:
    get:
      tags:
        - XeroAuthorizations
      summary: Get the Xero callback
      description: Use this endpoint to receive the Xero OAuth2 authorization callback.
      operationId: callbackXero
      parameters:
        - name: oAuthToken
          description: The Xero token.
          in: query
          schema:
            type: string
        - name: oAuthVerifier
          description: The verification code.
          in: query
          schema:
            type: string
      responses:
        204:
          description: Returns an empty response.
          content: {}
  /integrations/xero/deauthorize:
    get:
      tags:
        - XeroAuthorizations
      summary: Deauthorize Xero
      description: Use this endpoint to disable the tenant's intergration with Xero and revoke access.
      operationId: deauthorizeXero
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/{id}:
    get:
      tags:
        - Integrations
      summary: Retrieve integration
      description: Use this endpooint to locate a specific integration and retrieve its details.
      operationId: getIntegration
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Integration details have been retrieved. Returns integration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices:
    get:
      tags:
        - Invoices
      summary: List invoices
      description: Use this endpoint to retrieve a list of invoices. This operation supports sorting, paging, and filtering.
      operationId: getInvoices
      parameters:
        - name: id
          description: The ID of the invoice.
          in: query
          schema:
            type: string
        - name: contactId
          in: query
          description: The ID of the contact associated with this invoice. It is the person the invoice is issued to.
          schema:
            type: string
        - name: dealId
          in: query
          description: The ID of the deal. Invoices are always linked to deals to ensure they are accountable.
          schema:
            type: string
        - name: number
          description: The number of the invoice.
          in: query
          schema:
            type: string
        - name: date
          in: query
          description: The date when the invoice was issued (mm/dd/yyyy).
          schema:
            type: string
        - name: dueDate
          in: query
          description: The date by which the invoice must be paid (mm/dd/yyyy).
          schema:
            type: string
        - name: status
          in: query
          description: The invoice status. For example, if the invoice was paid or is pending.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The invoices have been retrieved. Returns invoices.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoices"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Invoices
      summary: Create an invoice
      description: Use this endpoint to add a new invoice to Inperium Sell.
      operationId: createInvoice
      requestBody:
        description: In the request body, pass the InvoiceRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/InvoiceRequest"
        required: false
      responses:
        201:
          description: A new invoice has been created. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoice
  /invoices/paymentPlans:
    get:
      tags:
        - Invoices
      summary: List payment plans
      description: Use this endpoint to get the list of payment plans for the invoices. For each invoice, you can set up a payment plan, for example, to split the invoice into several payments. This endpoint supports sorting and paging.
      operationId: getInvoicesPaymentPlans
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The payment plans have been retrieved. Returns InvoicePaymentPlans.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePaymentPlans"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices/{id}:
    get:
      tags:
        - Invoices
      summary: Retrieve an invoice
      description: Use this endpoint to locate an invoice by its ID and get invoice details.
      operationId: getInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The invoice has been retrieved. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Invoices
      summary: Update an invoice
      description: Use this endpoint to modify the invoice. The contents of the invoice will be overwritten.
      operationId: updateInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated InvoiceRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/InvoiceRequest"
        required: false
      responses:
        200:
          description: The invoice has been updated. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoice
    delete:
      tags:
        - Invoices
      summary: Delete an invoice
      description: Use this endpoint to remove an invoice.
      operationId: deleteInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices/{id}/email:
    post:
      tags:
        - Invoices
      summary: Send an invoice
      description: Use this endpoint to send an invoice by email to the client.
      operationId: emailInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the InvoiceEmail object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/InvoiceEmail"
        required: false
      responses:
        202:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoiceEmail
  /invoices/{id}/sync/{integrationAnchor}:
    get:
      tags:
        - Invoices
      summary: Sync invoices
      description: Use this endpoint to get the most recent information about invoices and synchronize them.
      operationId: syncInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: integrationAnchor
          description: The ID of the integration (e.g., Xero) that facilitates invoice processing and synchronization.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /paymentMethods/stripe:
    get:
      tags:
        - PaymentMethods
      summary: Retrieve a Stripe publishable key
      description: Use this endpoint to get a Stripe publishable key for the current tenant.
      operationId: getStripePublishableKey
      responses:
        200:
          description: The publishable key has been retrieved. Returns a string.
          content:
            application/json:
              schema:
                type: string
  /payments:
    get:
      tags:
        - Payments
      summary: List payments
      description: Use this endpoint to get a payment log and see what invoices have been paid. This operation supports paging and sorting. Search for a specific payment or narrow down results to similar payments (e.g., made by credit card).
      operationId: getPayments
      parameters:
        - name: id
          in: query
          description: The payment ID.
          schema:
            type: string
        - name: contactId
          in: query
          description: The contact associated with the payment.
          schema:
            type: string
        - name: date
          in: query
          description: The date the payment was made (mm/dd/yyyy).
          schema:
            type: string
        - name: method
          in: query
          description: Payment method (cash, credit card, etc.).
          schema:
            type: string
        - name: amount
          in: query
          description: The amount that was paid.
          schema:
            type: string
        - name: status
          in: query
          description: The payment status.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Payments have been retrieved. Returns payments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payments"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Payments
      summary: Create a payment
      description: Use this endpoint to add a new payment to Inperium.
      operationId: createPayment
      requestBody:
        description: In the request body, pass the PaymentRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: false
      responses:
        200:
          description: A new payment has been created. Returns a payment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: paymentDetails
  /payments/capturePaymentIntent:
    get:
      tags:
        - Payments
      summary: Capture a payment intent
      description: Use this endpoint to get information about a payment intent from Stripe. Payment intents help process complex transaction and improve logging.
      operationId: capturePaymentIntent
      parameters:
        - name: paymentIntentId
          description: The Stripe identificatior for payment intents.
          in: query
          schema:
            type: string
      responses:
        200:
          description: The payment intent has been retrieved. Returns a payment intent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CapturedPaymentIntent"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /payments/createPaymentIntent:
    post:
      tags:
        - Payments
      summary: Create a payment intent
      description: Use this endpoint to create a Stripe payment intent. See Stripe API reference for background information.
      operationId: createPaymentIntent
      requestBody:
        description: In the request body, pass the CreatePaymentIntent object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreatePaymentIntent"
        required: false
      responses:
        200:
          description: A new payment intent has been created. Returns a payment intent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentIntent"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: createPaymentIntent
  /payments/{id}:
    put:
      tags:
        - Payments
      summary: Update a payment
      description: Use this endpoint to modify payments. Locate the payment you are interested in and overwrite it.
      operationId: updatePayment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the PaymentRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: false
      responses:
        200:
          description: The payment has been updated. Returns a payment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: payment
  /pipelines:
    get:
      tags:
        - Pipelines
      summary: List pipelines
      description: Use this endpoint to get a list of pipelines created by the current tenant. This operation supports sorting and paging.
      operationId: getPipelines
      parameters:
        - name: name
          description: The pipeline name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The pipelines have been retrieved. Returns pipelines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipelines"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Pipelines
      summary: Create a pipiline
      description: Use this endpoint to add a new pipeline.
      operationId: createPipeline
      requestBody:
        description: In the request body, pass the PipelineRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PipelineRequest"
        required: false
      responses:
        201:
          description: A new pipeline has been created. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: pipeline
  /pipelines/{id}:
    get:
      tags:
        - Pipelines
      summary: Retrieve a pipeline
      description: Use this endpoint to get detailed information about a specific pipeline.
      operationId: getPipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The pipeline details have been retrieved. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Pipelines
      summary: Update a pipeline
      description: Use this endpoint to modify a pipeline.
      operationId: updatePipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated PipelineRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PipelineRequest"
        required: false
      responses:
        200:
          description: The pipeline has been updated. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: pipeline
    delete:
      tags:
        - Pipelines
      summary: Delete a pipeline
      description: Use this endpoint to remove a pipeline.
      operationId: deletePipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /pipelines/{id}/statistics:
    get:
      tags:
        - PipelineStatistics
      summary: Retrieve deal statistics
      description: Use this endpoint to find out how many deals you have in a specific pipeline. The deals will be grouped by stage and you'll see the total for each stage.
      operationId: getPipelineStatistics
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The pipeline statistics has been retrieved. Returns PipelineStatistics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineStatistics"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /predefinedMetadataGroups:
    get:
      tags:
        - Predefined Metadata
      summary: List metedata groups
      description: Use this endpoint to get a list of dictionaries.
      operationId: getAllPredefinedMetadataGroups
      responses:
        200:
          description: The list of predefined metadata groups has been retrieved. Returns predefined metadata groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PredefinedMetadataGroup"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /predefinedMetadataGroups/{id}:
    get:
      tags:
        - Predefined Metadata
      summary: Retrieve a metedata group
      description: Use this endpoint to search for a specific predefined metadata group and retrieve its details.
      operationId: getPredefinedMetadataGroup
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        200:
          description: The predefined metedata group has been retrieved. Returns a predefined metedata group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredefinedMetadataGroup"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /predefinedMetadataGroups/{id}/options:
    get:
      tags:
        - Predefined Metadata
      summary: List options
      description: Use this endpoint to retrieve a list of options for a specific predefined metadata group.
      operationId: getAllPredefinedMetadataOptions
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        200:
          description: The options has been retrieved. Returns PredefinedMetadataOptionList.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredefinedMetadataOptionList"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /products:
    get:
      tags:
        - Products
      summary: List products
      description: Use this endpoint to get a complete list of products offered by the tenant. This operation supports paging and sorting. You can also narrow down results to the products of a specific price, etc.
      operationId: getProducts
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - in: query
          name: sort
          schema:
            type: string
            default: "+createdAt"
          description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The products have been retrieved. Returns products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Products
      summary: Create a product
      description: Use this endpoint to add new products to Inperium Sell.
      operationId: createProduct
      requestBody:
        description: In the request body, pass the ProductRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: false
      responses:
        201:
          description: A new product has been created. Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: product
  /products/{id}:
    get:
      tags:
        - Products
      summary: Retrieve product details
      description: Use this endpoint to locate a product by its ID and get its details such as price and cost.
      operationId: getProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The product details have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Products
      summary: Update a product
      description: Use this endpoint to modify products. The operation overwrites the product record.
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the product details
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: false
      responses:
        200:
          description: The product has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

      x-codegen-request-body-name: product
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Use this endpoint to remove products the tenant no longer offers.
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties:
    get:
      tags:
        - Properties
      summary: List properties
      description: Use this endpoint to retrieve all property definitions for the current tenant, including builtin and custom properties. This operation supports paging and sorting. You can also filter properties by label or data type.
      operationId: getAllProperties
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - name: dataType
          in: query
          description: The type of the property value.
          schema:
            type: string
        - name: owner
          in: query
          description: The user who created the property.
          schema:
            type: string
        - name: label
          in: query
          description: The display name of the property.
          schema:
            type: string
        - name: objectType
          in: query
          description: The entity the property refers to, e.g. companies, contacts, or deals.
          schema:
            type: string
      responses:
        200:
          description: The list of properties has been retrieved. Returns PropertyConfigs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfigs"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Properties
      summary: Create a property
      description: Use this endpoint to create a custom property.
      operationId: createProperty
      requestBody:
        description: In the request body, pass the PropertyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PropertyRequest"
      responses:
        201:
          description: A new property has been created. Returns a PropertyConfig.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties/{id}:
    put:
      tags:
        - Properties
      summary: Update a property
      description: Use this endpoint to modify a custom property. For example, to change a label or a data type. The property will be overwritten.
      operationId: updateProperty
      parameters:
        - name: id
          in: path
          description: The ID of the property.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the PropertyRequest object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PropertyRequest"
      responses:
        200:
          description: The property has been updated. Returns a PropertyConfig.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Properties
      summary: Delete a property
      description: Use this endpoint to remove a custom property.
      operationId: deleteProperty
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties/{objectType}:
    get:
      tags:
        - Properties
      summary: List properties by object
      description: Retrieve properties belonging to a specific entity. For example, company properties or deal properties.
      operationId: getPropertiesByType
      parameters:
        - name: objectType
          in: path
          description: The object, e.g., companies, contacts, or deals.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The properties have been retrieved. Returns the list of PropertyConfigs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /public/invoices/{id}:
    get:
      tags:
        - InvoicePage
      summary: Retrieve invoice details
      description: Use this endpoint to generate the invoice page. You can share the invoice page with a customer who would pay the invoice.
      operationId: getInvoiceByUid
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The data has been retrieved
          content:
            text/html:
              schema:
                type: string
  /public/invoices/{id}/download:
    get:
      tags:
        - InvoicePage
      summary: Download the invoice
      description: Use this endpoint to retrieve invoice details and save the invoice page as pdf.
      operationId: getInvoicePagePdf
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The invoice details have been saved as pdf
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /public/quotes/{id}:
    get:
      tags:
        - PublicQuote
      summary: Gets quote model for anon user
      description: Use endpoint to get quote anon
      operationId: getPublicQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The quote has been accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicQuote"
  /public/quotes/{id}/accept:
    get:
      tags:
        - PublicQuote
      summary: Accept a quote
      description: Use this endpoint to mark the quote as accepted. Accepting a quote means that the customer agreed with the terms and is ready to proceed with the payment.
      operationId: acceptQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: signature
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: The quote
          content: {}
  /quotes:
    get:
      tags:
        - Quotes
      summary: List quotes
      description: Use this endpoint to get a list of quotes for the current tenant. This operation supports sorting and paging as well filtering by deal ID.
      operationId: getQuotes
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: dealId
          in: query
          description: Unique deal ID. Quotes are always associated with deals. Note that multiple quotes can be linked to a single deal.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Quotes have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quotes"
    post:
      tags:
        - Quotes
      summary: Create a quote
      description: Use this endpoint to add new quotes to the deal.
      operationId: createQuote
      requestBody:
        description: In the request body, pass the quote.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: false
      responses:
        201:
          description: The quote has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: quote
  /quotes/{id}:
    get:
      tags:
        - Quotes
      summary: Retrieve quote details
      description: Use this endpoint to locate a quote by its ID and retrieve its details.
      operationId: getQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The quote details have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Quotes
      summary: Update a quote
      description: Use this endpoint to modify an existing quote.
      operationId: updateQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the quote details
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: true
      responses:
        200:
          description: The quote status has been changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
    patch:
      tags:
        - Quotes
      summary: Mark a quote as created, sent or accepted
      description: Use this endpoint to mark the quote as created, sent or accepted. Accepting a quote means that the customer agreed with the terms and is ready to proceed with the payment.
      operationId: updateQuotePartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the quote details
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: true
      responses:
        200:
          description: The quote status has been changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
    delete:
      tags:
        - Quotes
      summary: Delete a quote
      description: Use this endpoint to revoke old quotes.
      operationId: deleteQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /quotes/{id}/convertToInvoice:
    post:
      tags:
        - Quotes
      summary: Convert to an invoice
      description: Use this endpoint to convert the quote to an invoice. Once the quote get accepted, you can convert it to the invoice that can later be sent to a client.
      operationId: convertQuoteToInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the quote details
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/QuoteToInvoice"
        required: true
      responses:
        200:
          description: The quote has been converted to an invoice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: conversionModel
  /reports:
    get:
      tags:
        - Reports
      summary: List reports
      description: Use this endpoint to get a list of reports available in Inperium Sell. This operation supports paging and sorting.
      operationId: getReports
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The report list has been retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reports"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /reports/{id}/data:
    get:
      tags:
        - Reports
      summary: Retrieve report data
      description: Use this endpoint to see report data returned by a specific report.
      operationId: getReportData
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: who
          in: query
          description: The report can show data for the currently authenticated user (ME) or the whole team (TEAM).
          schema:
            type: string
            enum:
              - ME
              - TEAM
        - name: from
          in: query
          description: The start date
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: The finish date
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The data has been retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportData"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /stages:
    get:
      tags:
        - Stages
      summary: List stages
      description: Use this endpoint to get a complete list of stages.
      operationId: getStages
      parameters:
        - in: query
          name: pipeline
          description: Pipeline name. Use this query parameter to narrow down your search to stages of a specific pipeline.
          schema:
            type: string
      responses:
        200:
          description: The stages have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stages"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Stages
      summary: Create a stage
      description: Use this endpoint to add a new stage to a pipeline.
      operationId: createStage
      requestBody:
        description: In the request body, pass the stage specification.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/StageRequest"
        required: false
      responses:
        201:
          description: A new stage has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: stage
  /stages/{id}:
    get:
      tags:
        - Stages
      summary: Get a stage
      description: Use this endpoint to get a specific stage by ID.
      operationId: getStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The stage has been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Stages
      summary: Update a stage
      description: Use this endpoint to modify and overvwrite an existing stage.
      operationId: updateStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated stage
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/StageRequest"
        required: false
      responses:
        200:
          description: The stage has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: stage
    delete:
      tags:
        - Stages
      summary: Delete a stage
      description: Use this endpoint to remove a stage from a pipeline.
      operationId: deleteStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The stage has been deleted
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /templates:
    get:
      tags:
        - Template
      summary: List templates
      description: Use this endpoint to get a complete list of available templates. This operation supports paging and sorting.
      operationId: getTemplates
      parameters:
        - name: name
          in: query
          description: Template name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The templates have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Templates"
    post:
      tags:
        - Template
      summary: Create a template
      description: Use this endpoint to add new templates.
      operationId: createTemplate
      requestBody:
        description: In the request body, pass a new template
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Template"
        required: false
      responses:
        200:
          description: A new template has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
      x-codegen-request-body-name: template
  /templates/{id}:
    get:
      tags:
        - Template
      summary: Retrieve template details
      description: Use this endpoint to locate a specific template by its ID and retrieve its details.
      operationId: getTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Template details have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Template
      summary: Update a template
      description: Use this endpoint to modify and overwrite the existing template.
      operationId: updateTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated template
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Template"
        required: false
      responses:
        200:
          description: The template has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: tenant
    delete:
      tags:
        - Template
      summary: Delete a template
      description: Use this endpoint to remove a template.
      operationId: deleteTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /temporary/send-system-mail:
    post:
      tags:
        - Temporary
      summary: Send email
      description: This endpoint is for testing purposes. (will be removed)
      operationId: sendSystemMail
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - content
                - receiver
                - sender
                - subject
              properties:
                sender:
                  type: string
                receiver:
                  type: string
                subject:
                  type: string
                content:
                  type: string
        required: true
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /tenant/settings:
    put:
      tags:
        - TenantSettings
      summary: Update tenant settings
      description: Use this endpoint to modify and overvwrite tenant settings including billing, company name, default time zone.
      operationId: updateTenantSettings
      requestBody:
        description: In the request body, pass the updated tenant settings
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TenantSettings"
        required: false
      responses:
        200:
          description: The tenant settings have been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantSettings"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: tenantSettings
    get:
      tags:
        - TenantSettings
      summary: Retrieve tenant settings
      description: Use this endpoint to get information about a current tenant.
      operationId: getTenantSettings
      responses:
        200:
          description: The tenant settings have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantSettings"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /tenant/integrations:
    get:
      tags:
        - TenantIntegrations
      summary: List active integrations
      description: Use this endpoint to get a list of integrations enabled for a current tenant. This operation supports paging and sorting.
      operationId: getTenantIntegrations
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The list of active integrations has been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantIntegrations"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /terminals/connectionToken:
    post:
      tags:
        - StripeTerminals
      summary: Create a terminal token
      description: Use this endpoint to issue a new terminal token.
      operationId: createTerminalToken
      responses:
        200:
          description: A new token has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminalTokenDetails"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /terminals/readers:
    get:
      tags:
        - StripeTerminals
      summary: List Stripe terminal readers
      description: Use this endpoint to retrieve a list of existing Stripe terminal readers.
      operationId: getReaders
      parameters:
        - name: limit
          in: query
          schema:
            type: string
      responses:
        200:
          description: The readers have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReaders"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - StripeTerminals
      summary: Create a new reader
      description: Use this endpoint to add new terminal readers.
      operationId: createReader
      requestBody:
        description: In the request body, pass the new reader
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/StripeReaderRequest"
        required: false
      responses:
        200:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: readerDetails
  /terminals/readers/{id}:
    get:
      tags:
        - StripeTerminals
      summary: Retrieve reader details
      description: Use this endpoint to locate a Stripe terminal reader by its ID and get its details.
      operationId: getReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        200:
          description: The reader details have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReader"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - StripeTerminals
      summary: Update a reader
      description: Use this endpoint to modify and overwrite an existing Stripe terminal reader.
      operationId: updateReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      requestBody:
        description: In the request body, pass the updated Stripe terminal reader
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/StripeReaderRequest"
        required: false
      responses:
        200:
          description: The reader has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReader"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: reader
    delete:
      tags:
        - StripeTerminals
      summary: Delete a reader
      description: Use this endpoint to remove an unused Stripe terminal reader.
      operationId: deleteReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views:
    get:
      tags:
        - Views
      summary: List views
      description: Use this endpoint to get a list of views, including company views, contact views, etc. This operation supports paging and sorting.
      operationId: getAllViews
      parameters:
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The views have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Views"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Views
      summary: Create a view
      description: Use this endpoint to add new views.
      operationId: createView
      requestBody:
        description: In the request body, pass the new view.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ViewRequest"
      responses:
        201:
          description: The view have been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views/{type}:
    get:
      tags:
        - Views
      summary: List views of a specific type
      description: Use this endpoint to retrieve views by their type. For example, company views or contact views.
      operationId: getViews
      parameters:
        - name: type
          in: path
          description: Inperium entity (companies, deals, etc.) the views are used for
          required: true
          schema:
            type: string
      responses:
        200:
          description: The views have been retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views/{id}:
    put:
      tags:
        - Views
      summary: Update a view
      description: Use this endpoint to modfiy and overwrite existing views.
      operationId: updateView
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated view
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ViewRequest"
      responses:
        200:
          description: The view has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Views
      summary: Delete a view
      description: Use this endpoint to remove obsolete views.
      operationId: deleteView
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /widgets:
    get:
      tags:
        - Widgets
      summary: Use this endpoint to get a dashboard includes widgets
      operationId: getAllWidgets
      parameters:
        - name: from
          in: query
          description: The date when the widgets data set calculation starts
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: The date when the widgets data set calculation starts
          schema:
            type: integer
            format: int64
        - name: who
          in: query
          description: The widgets can show data for the currently authenticated user (ME) or the whole team (TEAM).
          schema:
            type: string
            enum:
              - ME
              - TEAM
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The widgets have been retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Widgets"
        default:
          description: Bad request, security violation, or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    ActivityRequest:
      description: Activity model submitted to Inperium API
      example: {}
      type: object
      discriminator:
        propertyName: type
        mapping:
          note: "#/components/schemas/NoteActivityRequest"
          NOTE: "#/components/schemas/NoteActivityRequest"
          email: "#/components/schemas/EmailActivityRequest"
          EMAIL: "#/components/schemas/EmailActivityRequest"
          call: "#/components/schemas/CallActivityRequest"
          CALL: "#/components/schemas/CallActivityRequest"
          meeting: "#/components/schemas/MeetingActivityRequest"
          MEETING: "#/components/schemas/MeetingActivityRequest"
          task: "#/components/schemas/TaskActivityRequest"
          TASK: "#/components/schemas/TaskActivityRequest"
      properties:
        id:
          $ref: "#/components/schemas/Id"
        associatedCompanies:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        associatedContacts:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        associatedDeals:
          type: array
          items:
            $ref: "#/components/schemas/Id"
    NoteActivityRequest:
      description: A representation of a Activity. Note that `NOTE` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
          required:
            - body
    EmailActivityRequest:
      description: A representation of a Activity. Note that `EMAIL` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            to:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - body
            - subject
            - to
            - activityDate
    CallActivityRequest:
      description: A representation of a Activity. Note that `CALL` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              type: string
            subject:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - subject
            - activityDate
    MeetingActivityRequest:
      description: A representation of a Activity. Note that `MEETING` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              type: string
            subject:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - subject
            - activityDate
    TaskActivityRequest:
      description: A representation of a Activity. Note that `TASK` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            status:
              type: string
              enum:
                - TODO
                - DONE
              default: TODO
            dueDate:
              type: integer
              format: int64
          required:
            - subject
            - dueDate
    Activities:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Activity:
      description: Activity model returned by Inperium API
      example: {}
      type: object
      discriminator:
        propertyName: type
        mapping:
          NOTE: "#/components/schemas/NoteActivity"
          EMAIL: "#/components/schemas/EmailActivity"
          CALL: "#/components/schemas/CallActivity"
          MEETING: "#/components/schemas/MeetingActivity"
          TASK: "#/components/schemas/TaskActivity"
          EVENT: "#/components/schemas/EventActivity"
      properties:
        id:
          $ref: "#/components/schemas/Id"
        associatedCompanies:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        associatedContacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        associatedDeals:
          type: array
          items:
            $ref: "#/components/schemas/Deal"
        authorId:
          $ref: "#/components/schemas/Id"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
      required:
        - type
    NoteActivity:
      description: A representation of a Activity. Note that `NOTE` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
          required:
            - body
    EmailActivity:
      description: A representation of a Activity. Note that `EMAIL` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            to:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - body
            - subject
            - to
            - activityDate
    CallActivity:
      description: A representation of a Activity. Note that `CALL` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - subject
            - activityDate
    MeetingActivity:
      description: A representation of a Activity. Note that `MEETING` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            activityDate:
              type: integer
              format: int64
          required:
            - subject
            - activityDate
    TaskActivity:
      description: A representation of a Activity. Note that `TASK` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The content of a note.
              type: string
            subject:
              type: string
            status:
              type: string
              enum:
                - TODO
                - DONE
              default: TODO
            dueDate:
              type: integer
              format: int64
          required:
            - subject
            - dueDate
    EventActivity:
      description: A representation of a Activity. Note that `EVENT` will be used as the discriminator value."
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            eventType:
              type: string
              enum:
                - COMPANY_CREATED
                - CONTACT_CREATED
                - DEAL_CREATED
                - ASSIGNED_USER_UPDATED
                - DEAL_WON
                - DEAL_LOST
                - OTHER
            activityDate:
              type: integer
              format: int64
          required:
            - eventType
            - activityDate
    AdditionalFee:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amountPercent:
          type: number
          maximum: 100
        amountMoney:
          type: number
        name:
          type: string
        type:
          type: string
      description: Additional fee model (e.g., processing fee, shipping fee)
    Attachment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        contactIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        document:
          $ref: "#/components/schemas/Document"
      description: Document model returned by Inperium API
    AttachmentRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        contactIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        documentUrl:
          type: string
      description: Document model submitted to Inperium API
    Attachments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: An aggregation of attachments
    Campaign:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
      description: Campaign model returned by Inperium API
    CampaignRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        userId:
          $ref: "#/components/schemas/Id"
      description: Campaign model submitted to Inperium API
    CampaignCustom:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        enrolled:
          type: integer
      description: Custom campaign model with enrolled field
    Campaigns:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Campaign"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    CapturedPaymentIntent:
      type: object
      properties:
        id:
          type: string
      description: Captured payment intent model
    CommunicationMethod:
      type: object
      description: Communication method model
      properties:
        id:
          $ref: "#/components/schemas/Id"
        value:
          type: string
        type:
          type: string
        specificType:
          type: string
        isPrimary:
          type: boolean
    Company:
      type: object
      description: Company model returned by Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        properties:
          type: object
          additionalProperties: true
    CompanyRequest:
      description: Company model submitted to Inperium API
      type: object
      additionalProperties: true
    CompanyRelationshipRequest:
      type: object
      description: Company relationship model submitted to Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyId:
          type: string
          format: uuid
        parentCompanyId:
          type: string
          format: uuid
    CompanyRelationship:
      description: Company relashionship model returned by Inperium API
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        company:
          $ref: "#/components/schemas/Company"
        parentCompany:
          $ref: "#/components/schemas/Company"
    CompanyRelationships:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CompanyRelationship"
      description: An aggregation of company's relationships
    Companies:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: An aggregation of companies
    Contact:
      description: Contact model returned by Inperium API
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        properties:
          type: object
          additionalProperties: true
    ContactRequest:
      description: Contact model submitted to Inperium API
      type: object
      additionalProperties: true
    ProductRequest:
      description: Product model submitted to Inperium API
      type: object
      additionalProperties: true
    ContactPaymentMethod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        contactId:
          $ref: "#/components/schemas/Id"
        fingerprint:
          type: string
    Contacts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    CreatePaymentIntent:
      type: object
      properties:
        payment:
          $ref: "#/components/schemas/PaymentRequest"
        useTerminal:
          type: boolean
      description: Model of creating a payment intent
    Deal:
      type: object
      description: Deal model returned to Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        createdAt:
          type: integer
          format: int64
    DealRequest:
      type: object
      additionalProperties: true
      description: Deal model submitted to Inperium API
    ItemsAndAdditionalFees:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFee"
    Deals:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Deal"
        paging:
          $ref: "#/components/schemas/PageAndSort"

    PipelineStatistics:
      type: object
      properties:
        stages:
          type: array
          items:
            type: object
            properties:
              stageId:
                $ref: "#/components/schemas/Id"
              dealsTotalValue:
                type: number
              dealsCount:
                type: integer
                format: int64

    DictionaryItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          minLength: 1
          type: string
        caption:
          minLength: 1
          type: string
        description:
          type: string
        extendedAttributes:
          type: object
          properties: {}
      description: A dictionary item which cannot be modified
    DictionaryItems:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DictionaryItem"
      description: An aggregation of dictionary items
    DocumentType:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        defaultCaption:
          type: string
        mimeType:
          type: string
        fileExtension:
          type: string
    Document:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        authorId:
          $ref: "#/components/schemas/Id"
        typeId:
          $ref: "#/components/schemas/Id"
        filename:
          minLength: 1
          type: string
        contentSize:
          type: integer
        contentPreview:
          type: string
        description:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
      description: A document stored in CRM
    ErrorModel:
      required:
        - code
        - type
      type: object
      properties:
        code:
          type: string
          description: Error Code
        message:
          type: string
          description: Error Message
        type:
          type: string
          description: Error Message
          enum:
            - ERROR
            - WARN
            - INFO
        details:
          type: string
          description: Comma separated list of fields, which caused the error condition
      description: An individual error
    ExportRequest:
      type: object
      properties:
        entityType:
          type: string
          enum:
            - COMPANIES
            - DEALS
            - PRODUCTS
            - CONTACTS
        fileFormat:
          type: string
          enum:
            - CSV
            - PDF
            - XLS
            - XLSX
        properties:
          type: array
          items:
            type: string
        filters:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              filter:
                type: string
        pageNumber:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        sort:
          type: string
    Export:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        filename:
          type: string
    PropertyConfig:
      anyOf:
        - $ref: "#/components/schemas/PropertyDefinition"
        - type: object
          properties:
            usedIn:
              type: integer
              format: int64
            ownerId:
              type: string
              format: uuid
            configuration:
              type: object
              additionalProperties: true
            propertyOptions:
              type: array
              items:
                $ref: "#/components/schemas/PropertyOption"
            validation:
              type: object
              properties:
                required:
                  type: boolean
                max:
                  type: integer
                  format: int64
                min:
                  type: integer
                  format: int64
                maxLength:
                  type: integer
                  format: int64
                minLength:
                  type: integer
                  format: int64
                pattern:
                  type: string

    PropertyConfigs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PropertyConfig"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    PropertyDefinition:
      required:
        - label
        - name
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        objectType:
          type: string
        name:
          type: string
        label:
          type: string
        description:
          type: string
        dataType:
          type: string
        currency:
          type: string
        custom:
          type: boolean
    PropertyOption:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        label:
          type: string
        value:
          type: string
    PropertyRequest:
      allOf:
        - $ref: "#/components/schemas/PropertyDefinition"
        - type: object
          properties:
            propertyOptions:
              type: array
              items:
                $ref: "#/components/schemas/PropertyOption"
    Form:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        inlineMessage:
          type: string
        submitText:
          type: string
        redirectUrl:
          type: string
        style:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FormField"
      description: Form model
    FormField:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        formId:
          $ref: "#/components/schemas/Id"
        labelHidden:
          type: boolean
        placeholder:
          type: string
        defaultValue:
          type: string
        label:
          type: string
        sortOrder:
          type: integer
        required:
          type: boolean
        hidden:
          type: boolean
        definition:
          $ref: "#/components/schemas/PropertyDefinition"
        description:
          type: string
      description: Form field model
    Forms:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Form"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    GlobalSearchResult:
      type: object
      description: Data returned by Inperium API
      properties:
        type:
          type: string
        avatar:
          type: string
        title:
          type: string
        description:
          type: string
        itemId:
          type: string
          format: uuid
        additionalProperties:
          type: string
    GlobalSearchResults:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/GlobalSearchResult"
    Id:
      type: string
      format: uuid
    Import:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        filename:
          type: string
        importDate:
          type: integer
          format: int64
        result:
          type: object
          additionalProperties: true
    Imports:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Import"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: An aggregation of import log entries
    Integration:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
      description: Intergration model
    Integrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Integration"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: An aggregation of integrations
    InvoiceRequest:
      type: object
      description: The model to create or update an invoice.
      required:
        - addressLine1
        - city
        - country
        - zip
        - contactId
        - date
        - dueDate
        - number
        - items
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
        country:
          type: string
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFee"
        contactId:
          $ref: "#/components/schemas/Id"
        date:
          type: integer
          format: int64
        dealId:
          $ref: "#/components/schemas/Id"
        dueDate:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        number:
          type: string
        paymentPlans:
          type: array
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
    Invoice:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
        country:
          type: string
        id:
          $ref: "#/components/schemas/Id"
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFee"
        contact:
          $ref: "#/components/schemas/Contact"
        date:
          type: integer
          format: int64
        deal:
          $ref: "#/components/schemas/Deal"
        dueDate:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        amountPaid:
          type: number
        total:
          type: number
        amountDue:
          type: number
        number:
          type: string
        paymentPlans:
          type: array
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        status:
          type: string
          enum:
            - PAID
            - OVERDUE
            - OPEN
        syncedToIntegration:
          type: boolean
    InvoiceEmail:
      type: object
      properties:
        to:
          type: string
        from:
          type: string
        replyTo:
          type: string
        subject:
          type: string
        message:
          type: string
      description: Invoice email model
    InvoicePaymentPlan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amount:
          type: number
        invoiceId:
          $ref: "#/components/schemas/Id"
        invoiceNumber:
          type: string
        paymentDate:
          type: integer
          format: int64
        paymentMethod:
          type: string
        contactFirstName:
          type: string
        contactLastName:
          type: string
      description: Payment plan model
    InvoicePaymentPlans:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Invoices:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Invoice"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Item:
      type: object
      description: Item model. Products and services are added to deals as items.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        price:
          type: number
        discountMoney:
          description: Fixed amount of money to be deducted from the subtotal, e.g., $5.
          type: number
        discountPercent:
          description: Percentage of subtotal, e.g., 5%.
          type: number
          maximum: 100
        quantity:
          type: integer
          format: int64
        value:
          type: number
        product:
          $ref: "#/components/schemas/Product"
        dealId:
          $ref: "#/components/schemas/Id"
        quoteId:
          $ref: "#/components/schemas/Id"
        invoiceId:
          $ref: "#/components/schemas/Id"
    Items:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    OAuth2Redirect:
      type: object
      properties:
        redirectUrl:
          type: string
      description: Model containing a redirect URL to OAuth2 provider

    PageAndSort:
      type: object
      description: Paging and sorting information

    Payment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        stripeId:
          type: string
        invoice:
          $ref: "#/components/schemas/Invoice"
        currency:
          type: string
        description:
          type: string
        amount:
          type: number
        date:
          type: integer
          format: int64
        stripePaymentMethod:
          $ref: "#/components/schemas/StripePaymentMethod"
        paymentMethod:
          type: string
        declinedReason:
          type: string
        status:
          type: string
      description: Payment model returned by Inperium API
    PaymentRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        invoiceId:
          $ref: "#/components/schemas/Id"
        currency:
          type: string
        amount:
          type: number
        paymentMethod:
          type: string
        stripePaymentMethod:
          $ref: "#/components/schemas/StripePaymentMethod"
        description:
          type: string
        date:
          type: integer
          format: int64
        status:
          type: string
        declinedReason:
          type: string
        stripeId:
          type: string
      description: Payment model submitted to Inperium API
    PaymentIntent:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        transfer_group:
          type: string
        amount_received:
          type: integer
          format: int64
        application_fee_amount:
          type: integer
          format: int64
        canceled_at:
          type: integer
          format: int64
        cancellation_reason:
          type: string
        capture_method:
          type: string
        client_secret:
          type: string
        confirmation_method:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        customer:
          type: object
          properties: {}
        description:
          type: string
        id:
          type: string
        invoice:
          type: object
          properties: {}
        amount_capturable:
          type: integer
          format: int64
        object:
          type: string
        on_behalf_of:
          type: object
          properties: {}
        payment_method:
          type: object
          properties: {}
        payment_method_options:
          type: string
        payment_method_types:
          type: array
          items:
            type: string
        receipt_email:
          type: string
        review:
          type: object
          properties: {}
        setup_future_usage:
          type: string
        shipping:
          type: object
          properties: {}
        source:
          type: object
          properties: {}
        statement_descriptor:
          type: string
        statement_descriptor_suffix:
          type: string
        status:
          type: string
        transfer_data:
          type: object
          properties: {}
        livemode:
          type: boolean
      description: Payment intent model
    Payments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Pipeline:
      type: object
      description: Pipeline model returned by Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        stages:
          type: array
          items:
            $ref: "#/components/schemas/Stage"
    PipelineRequest:
      type: object
      description: Pipeline model submitted to Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        stages:
          type: array
          items:
            $ref: "#/components/schemas/StageRequest"
      required:
        - name
    Pipelines:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Pipeline"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    PredefinedMetadataGroup:
      type: object
      properties:
        id:
          maxLength: 32
          minLength: 1
          type: string
        options:
          $ref: "#/components/schemas/PredefinedMetadataOptionList"
      description: Model containing predefined metadata group
    PredefinedMetadataOption:
      type: object
      properties:
        id:
          maxLength: 32
          minLength: 1
          type: string
          deprecated: true
        caption:
          minLength: 1
          type: string
          deprecated: true
        label:
          type: string
        description:
          type: string
        value:
          type: string
      description: Model containing a single predefined metadata option
    PredefinedMetadataOptionList:
      type: array
      description: Model containing a list of predefined metadata options
      items:
        $ref: "#/components/schemas/PredefinedMetadataOption"
    Product:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        tenantId:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
      description: Product model returned by Inperium API
    Products:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Report:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
    Reports:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Report"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    ReportData:
      type: object
      properties:
        xAxis:
          type: object
          properties:
            label:
              type: string
            data:
              type: array
              items:
                type: object
        yAxis:
          type: object
          properties:
            label:
              type: string
            data:
              type: array
              items:
                type: object

    PublicQuote:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: integer
          format: int64
        comment:
          type: string
        purchaseTerm:
          type: string
        value:
          type: number
        createdDate:
          type: integer
          format: int64
        paymentPlans:
          type: array
          items:
            $ref: "#/components/schemas/PublicQuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/PublicQuoteUser"
        quoteContacts:
          type: array
          items:
            $ref: "#/components/schemas/PublicQuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/PublicQuoteCompany"
        items:
          type: array
          items:
            $ref: "#/components/schemas/PublicQuoteItem"
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/PublicQuoteAdditionalFee"
        tenant:
          $ref: "#/components/schemas/PublicQuoteTenant"
        contactAcceptAllowed:
          type: boolean
        signature:
          type: string
        status:
          type: string
          enum:
            - DRAFT
            - CREATED
            - ACCEPTED
          example: DRAFT
    PublicQuoteAdditionalFee:
      type: object
      properties:
        amountMoney:
          type: number
        amountPercent:
          type: number
        name:
          type: string
        type:
          type: string
    PublicQuoteItem:
      type: object
      description: Item model.
      properties:
        price:
          type: number
        discountMoney:
          description: Fixed amount of money to be deducted from the subtotal, e.g., $5.
          type: number
        discountPercent:
          description: Percentage of subtotal, e.g., 5%.
          type: number
          maximum: 100
        quantity:
          type: integer
          format: int64
        value:
          type: number
        product:
          $ref: "#/components/schemas/Product"

    PublicQuotePaymentPlan:
      type: object
      properties:
        amount:
          type: number
        paymentDate:
          type: integer
          format: int64
        paymentMethod:
          type: string
    PublicQuoteUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    PublicQuoteContact:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    PublicQuoteCompany:
      type: object
      properties:
        companyName:
          type: string
        domainName:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
        country:
          type: string
    PublicQuoteTenant:
      type: object
      properties:
        companyLogo:
          type: string
        logoAltText:
          type: string
        defaultCurrency:
          type: string
        companyName:
          type: string
        name:
          type: string
        domainName:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
        country:
          type: string
    Quote:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        dealId:
          $ref: "#/components/schemas/Id"
        expirationDate:
          type: integer
          format: int64
        acceptedAt:
          type: integer
          format: int64
        comment:
          type: string
        purchaseTerm:
          type: string
        displayColor:
          type: string
        companyId:
          $ref: "#/components/schemas/Id"
        avatarUrl:
          type: string
        language:
          type: string
        value:
          type: number
        uid:
          type: string
          format: uuid
        userId:
          $ref: "#/components/schemas/Id"
        paymentPlans:
          type: array
          items:
            $ref: "#/components/schemas/QuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/QuoteUser"
        quoteContacts:
          type: array
          items:
            $ref: "#/components/schemas/QuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/QuoteCompany"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFee"
        status:
          type: string
          enum:
            - DRAFT
            - CREATED
            - ACCEPTED
          example: DRAFT
        mostRelevant:
          type: boolean
          example: false
        signatureUrl:
          type: string
      description: Quote model returned by Inperium API
    QuoteRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        dealId:
          $ref: "#/components/schemas/Id"
        expirationDate:
          type: integer
          format: int64
        acceptedAt:
          type: integer
          format: int64
        comment:
          type: string
        purchaseTerm:
          type: string
        companyId:
          $ref: "#/components/schemas/Id"
        value:
          type: number
        paymentPlans:
          type: array
          items:
            $ref: "#/components/schemas/QuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/QuoteUser"
        quoteContacts:
          type: array
          items:
            $ref: "#/components/schemas/QuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/QuoteCompany"
        additionalFees:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFee"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        status:
          type: string
          enum:
            - DRAFT
            - CREATED
            - SENT
            - ACCEPTED
          example: DRAFT
        mostRelevant:
          type: boolean
          example: false
        signatureId:
          type: string
          format: uuid
        avatarId:
          $ref: "#/components/schemas/Id"
      required:
        - status
      description: Quote model submitted to Inperium API
    QuoteCompany:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        originCompanyId:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
        domainName:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
        country:
          type: string
      description: Model containing a company associated with the quote
    QuoteContact:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        originContactId:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
      description: Model containing a contact associated with the quote
    QuotePaymentPlan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amount:
          type: number
        quoteId:
          $ref: "#/components/schemas/Id"
        paymentDate:
          type: integer
          format: int64
        paymentMethod:
          type: string
      description: Payment plan model
    QuoteToInvoice:
      type: object
      properties:
        contactId:
          $ref: "#/components/schemas/Id"
        dueDate:
          type: integer
          format: int64
        addressLine1:
          type: string
        addressLine2:
          type: string
    QuoteUser:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        originUserId:
          $ref: "#/components/schemas/Id"
      description: Model containing the user data history
    Quotes:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Quote"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    ResponseError:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorModel"
    Stage:
      type: object
      description: Stage model returned by Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        probability:
          type: number
        sortOrder:
          type: integer
        pipelineId:
          $ref: "#/components/schemas/Id"
    StageRequest:
      type: object
      description: Stage model submitted to Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        probability:
          type: number
          minimum: 0
        sortOrder:
          type: integer
        pipelineId:
          $ref: "#/components/schemas/Id"
      required:
        - name
    Stages:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Stage"
    StripeCredentials:
      type: object
      properties:
        publishableKey:
          type: string
        accountId:
          type: string
      description: Model of Stripe credentials
    StripePaymentMethod:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        billing_details:
          type: object
          properties: {}
        card:
          $ref: "#/components/schemas/StripePaymentMethodCard"
        card_present:
          type: object
          properties: {}
        created:
          type: integer
          format: int64
        customer:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          properties: {}
        type:
          type: string
      description: Model of Stripe payment method
    StripePaymentMethodCard:
      type: object
      properties:
        id:
          type: string
        wallet:
          type: object
          properties: {}
        checks:
          type: object
          properties: {}
        country:
          type: string
        exp_month:
          type: integer
          format: int64
        exp_year:
          type: integer
          format: int64
        brand:
          type: string
        funding:
          type: string
        generated_from:
          type: string
        last4:
          type: string
        three_d_secure_usage:
          type: object
          properties: {}
        fingerprint:
          type: string
      description: Model of card payment through Stripe
    StripeReader:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        deviceSwVersion:
          type: string
        deviceType:
          type: string
        ipAddress:
          type: string
        label:
          type: string
        location:
          type: string
        serialNumber:
          type: string
        status:
          type: string
        registrationCode:
          type: string
      description: Stripe reader model returned by Inperium API
    StripeReaderRequest:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        deviceSwVersion:
          type: string
        deviceType:
          type: string
        ipAddress:
          type: string
        label:
          type: string
        location:
          type: string
        serialNumber:
          type: string
        status:
          type: string
        registrationCode:
          type: string
      description: Stripe reader model submitted to Inperium API
    StripeReaders:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StripeReader"
        object:
          type: string
        url:
          type: string
        hasMore:
          type: boolean
    Template:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        body:
          type: string
        name:
          type: string
        subject:
          type: string
        companyWide:
          type: boolean
          default: false
        tenantId:
          $ref: "#/components/schemas/Id"
        userId:
          $ref: "#/components/schemas/Id"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
      description: Email template model
    Templates:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    TenantSettings:
      type: object
      properties:
        defaultCurrency:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        accentColor:
          type: string
        accentColorTwo:
          type: string
        quotePrefix:
          type: string
        quoteContactAcceptAllowed:
          type: boolean
        companyLogoUrl:
          type: string
        squareLogoUrl:
          type: string
        logoAltText:
          type: string
        revenueGoalPeriod:
          type: string
        revenueGoal:
          type: number
      description: Tenant settings model
    TenantIntegration:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        integration:
          $ref: "#/components/schemas/Integration"
      description: Model containing tenant's integrations
    TenantIntegrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TenantIntegration"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: An aggregation of tenant's integrations
    TerminalTokenDetails:
      type: object
      properties:
        object:
          type: string
        secret:
          type: string
      description: Model containing a tenant's token
    View:
      type: object
      description: View model returned by Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        state:
          type: object
          additionalProperties: true
        filters:
          type: array
          items:
            type: object
            additionalProperties: true
        columns:
          type: array
          items:
            type: object
            properties:
              propertyId:
                $ref: "#/components/schemas/Id"
              columnOrder:
                type: integer
        type:
          type: string
        custom:
          type: boolean
        private:
          type: boolean
    ViewRequest:
      type: object
      description: View model submitted to Inperium API
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        state:
          type: object
          additionalProperties: true
        filters:
          type: array
          items:
            type: object
            additionalProperties: true
        columns:
          type: array
          items:
            type: object
            properties:
              propertyId:
                $ref: "#/components/schemas/Id"
              columnOrder:
                type: integer
        type:
          type: string
        custom:
          type: boolean
        private:
          type: boolean
    Views:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/View"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Widgets:
      type: object
      properties:
        dealsRevenue:
          $ref: "#/components/schemas/WidgetDealsRevenue"
        deals:
          $ref: "#/components/schemas/WidgetDeals"
        dealsByPipeline:
          $ref: "#/components/schemas/WidgetDealsByPipeline"
        revenueGoal:
          $ref: "#/components/schemas/WidgetRevenueGoal"
        completedActivities:
          $ref: "#/components/schemas/WidgetCompletedActivities"
        newLeads:
          $ref: "#/components/schemas/WidgetNewLeads"
        dealsLeaderboard:
          $ref: "#/components/schemas/WidgetDealsLeaderboard"
        activitiesLeaderboard:
          $ref: "#/components/schemas/WidgetActivitiesLeaderboard"
    WidgetDealsRevenue:
      type: object
      properties:
        won:
          type: number
        wonDifference:
          type: number
        lost:
          type: number
        lostDifference:
          type: number
    WidgetDeals:
      type: object
      properties:
        created:
          type: integer
        createdDifference:
          type: integer
        won:
          type: integer
        wonDifference:
          type: integer
        lost:
          type: integer
        lostDifference:
          type: integer
    WidgetDealsByPipeline:
      type: object
      properties:
        pipelineDeals:
          type: array
          items:
            $ref: "#/components/schemas/PipelineDeals"
    PipelineDeals:
      type: object
      properties:
        pipelineName:
          type: string
        dealsCount:
          type: integer
          format: int64
        dealsDifference:
          type: integer
          format: int64
    WidgetRevenueGoal:
      type: object
      properties:
        currentValue:
          type: number
    CompletedActivities:
      type: object
      properties:
        emails:
          type: integer
          format: int32
        meetings:
          type: integer
          format: int32
        calls:
          type: integer
          format: int32
        tasks:
          type: integer
          format: int32
    CompletedActivitiesDifferences:
      type: object
      properties:
        emailsDifference:
          type: integer
          format: int32
        meetingsDifference:
          type: integer
          format: int32
        callsDifference:
          type: integer
          format: int32
        tasksDifference:
          type: integer
          format: int32
    WidgetCompletedActivities:
      allOf:
        - $ref: "#/components/schemas/CompletedActivities"
        - $ref: "#/components/schemas/CompletedActivitiesDifferences"
    WidgetNewLeads:
      type: object
      properties:
        companies:
          type: integer
        companiesDifference:
          type: integer
        contacts:
          type: integer
        contactsDifference:
          type: integer
    WidgetDealsLeaderboard:
      type: object
      properties:
        leaders:
          type: array
          items:
            $ref: "#/components/schemas/UserStatisticsDeals"
    WidgetActivitiesLeaderboard:
      type: object
      properties:
        leaders:
          type: array
          items:
            $ref: "#/components/schemas/UserStatisticsCompletedActivities"
    UserStatistics:
      type: object
      properties:
        avatarUrl:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    UserStatisticsDeals:
      allOf:
        - $ref: "#/components/schemas/UserStatistics"
        - type: object
          properties:
            deals:
              $ref: "#/components/schemas/WidgetDeals"
    UserStatisticsCompletedActivities:
      allOf:
        - $ref: "#/components/schemas/UserStatistics"
        - type: object
          properties:
            activities:
              $ref: "#/components/schemas/CompletedActivities"
  parameters:
    ResourceId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryStringResourceId:
      name: id
      in: query
      schema:
        type: string
    ResourceStringId:
      name: id
      in: path
      required: true
      schema:
        type: string
    QueryPageNumber:
      name: pageNumber
      in: query
      description: This parameter affects paging. It defines the chunk of data to be retrieved, e.g., records from the page 3.
      schema:
        type: integer
    QueryPageSize:
      name: pageSize
      in: query
      description: This parameter affects paging. It defines the number of records per page
      schema:
        type: integer
    QuerySort:
      name: sort
      in: query
      description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
      schema:
        type: string
    EntityProperties:
      name: properties
      in: query
      schema:
        type: object
        additionalProperties:
          type: string
