openapi: 3.0.1

info:
  title: Sell API
  description: |
    The Inperium Sell API provides access to the Inperium Sell service including the ability to add companies and contacts, create deals, and generate quotes. To leverage this API, you must have an active subscription to Inperium Sell and the user creating an API key must have access to the product.
    Inperium Sell API seamlessly integrates with other API such as the Object Bucket Storage API and the Message Center API that provide document storage and email sync functionality to Inperium Sell.
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://api.inperium.com/v1/sell
  - url: https://api.inperium.com/v1/sell

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Activities
    description: |
      Inperium Sell enables users to keep notes, plan tasks, and log calls and meetings. These activities are typically linked to deals, contacts, or companies.
  - name: Attachments
    description: |
      In Inperium Sell, users have the ability to attach documents (pdf, csv, docx, etc.) to deals and companies.
  - name: Auth
    description: |
      Authentication and authorization methods used to access Inperium Sell.
  - name: Calendars
    description: |
      In Inperium Sell, users have the ability to review calendars & events.
  - name: Campaigns
    description: |
      Inperium Sell enables users to create marketing campaigns.
  - name: Companies
    description: |
      Company is one of major entities in Inperium Sell. Users add companies, literally the businesses they work with, and track deal progress there.
  - name: Company Data
    description: |
      Company data can be enriched with the publicly available information  from the internet, for example, the industry, employee counts, links to social media.
  - name: Company Relationships
    description: |
      Inperium users can associate companies with each other and create parent-child relationships.
  - name: Contacts
    description: |
      Contact is one of the major entities in Inperium Sell. Contacts are individuals or company's representatives Inperium Sell users work with.
  - name: Contact Data
    description: |
      Contact data can be enriched with the publicly available information about from the internet, for example, links to social media or a CV.
  - name: Deals
    description: |
      Deals are one of the major entities in Inperium Sell. Users create deals, link them to contacts or companies. For each deal, a user can create multiple quotes and invoices, add products, etc.
  - name: Deal Items
    description: |
      As you create a deal, you add products and additional fees and taxes. These items are required to calculate the deal value.
  - name: Deprecated
    description: |
      Deprecated features which will be terminated in next releases.
  - name: Dictionaries
    description: |
      Dictionaries contain predefined data that users typically see in drop-down lists. For example, days of weeks, standard statuses, countries, or phone codes.
  - name: Documents
    description: |
      Inperium Sell stores files in AWS. In most cases, documents are attached to entities such as companies or deals, but some documents are stored independently (e.g., avatar images).
  - name: Document Types
    description: |
      Inperium Sell enables users to upload documents such as pdfs, png, etc. The Document Types list all supported document extensions.
  - name: Exports
    description: |
      Inperium Sell enables users to export data from the CRM. For example, to reuse it in another app or to store as a backup.
  - name: Forms
    description: |
      In Inperium Sell, users can create custom forms to collect data.
  - name: Global Search
    description: |
      Global search gives the ability to locate entities by name. It searches across deals, companies, contacts at the same time.
  - name: Import
    description: |
      Inperium Sell enables users to import data from other CRMs. For example, contact data, information about deals, and product pricelists.
  - name: Import Log
    description: |
      If import fails for some reason or data was mapped to a wrong column, refer to the Import log for troubleshooting ideas.
  - name: Integrations
    description: |
      You can leverage third-party applications such as Stripe and Xero and integrate them with Inperium Sell.
  - name: Invoices
    description: |
      Inperium Sell enables users to create professional-looking invoices and process them within CRM.
  - name: Invoice Page
    description: |
      Inperium Sell allows sharing invoices with customers through public URLs. It means you can send an invoice link to your clients, they will follow this link, and review the invoice right in the browser.
  - name: Items
    description: |
      Products and fees are added to deals and quotes and listed as items.
  - name: Messages
    description: |
      With Inperium, you can send messages to multiple contacts at the same time. The bulk mailing option is available once you configure the Message Center. Check out the Message Center API for more details.
  - name: Payment Methods
    description: |
      Inperium Sell supports integration with Stripe and allows processing payments through this system.
  - name: Payments
    description: |
      In Inperium Sell, payments are separated from invoices. An invoice can be paid in full or split into several payments that should be logged individually.
  - name: Pipelines
    description: |
      Pipelines describe the sales process, or being more specific, milestones the deal goes through from start to end. For example, Lead in, Demo, Contact sent, Deal won.
  - name: Pipeline Statistics
    description: |
      Analyze your sales progress with pipeline statistics.
  - name: Products
    description: |
      Products are items or services the tenant offers. Each product has a description, retail price, and cost.
  - name: Properties
    description: |
      Inperium Sell comes with preset properties (or fields) as well as enables users to create custom definitions. Custom properties are helpful if you need to accommodate your specific business workflow and keep additional data in Inperium Sell. For example, shipment information for deal tracking. In this case, you can add a custom property for deals: both API and regular users will get access to it fro the deals page.
  - name: Quotes
    description: |
      Quotes are sales offers. While negotiating the contract terms, you can propose quotes that typically include products, discounts, and payment plans.
  - name: Public Quote
    description: |
      Inperium Sell allows sharing quotes with customers through public URLs. It means you can send your clients a quote link, they will follow the link and review the quote right in the browser.
  - name: Reports
    description: |
      Inperium Sell brings you insights into sales activities and creates charts showing how many companies or contacts were created, how many deals were closed, etc. Use the reports to track team productivity and improve performance.
  - name: Stages
    description: |
      The sales pipelines consist of stages. The stages are milestones the deal goes through before it gets closed. For example, Contract Sent, Initial Call. Inperium Sell enables users to add as many stages to their pipelines as they need.
  - name: Snippets
    description: |
      Snippets are reusable text excerpts, for use-cases such as follow-up emails or quote purchase terms. Snippets help speed up the sales process and make it more structured.
  - name: Stripe Authorizations
    description: |
      To configure integration with Stripe, you've got to authenticate your app with Stripe.
  - name: Stripe Terminals
    description: |
      Configure Stripe terminals to receive payments.
  - name: Template
    description: |
      Templates are ready-to-use samples, for example introductory emails or follow-ups. Templates help speed up the sales process and make it more structured. They support variables to automatically insert the individual contacts data.
  - name: Tenant Integrations
    description: |
      You can enable third-party integrations for your tenant and use Inperium to its fullest.
  - name: Tenant Settings
    description: |
      In Inperium Sell, administrators can set up tenant-wide properties and preferences such as default currency, quote prefix, revenue goal, etc.
  - name: Views
    description: |
      Views control what data is returned to the user, including filtering, sorting, and columns on a display.
  - name: Widgets
    description: |
      In Inperium Sell, a widget is a dashboard element providing certain data, for example, the leader board or the number of deals on each pipeline.
  - name: Xero Authorizations
    description: |
      Configure integration with Xero.

paths:
  /activities:
    get:
      tags:
        - Activities
      summary: List activities
      description: Use this endpoint to get a complete list of activities. This endpoint supports paging and sorting. To narrow down results and locate specific activities, use query parameters.
      operationId: getActivities
      parameters:
        - name: authorId
          in: query
          description: The ID of the user who added the activity.
          schema:
            type: string
        - name: type
          in: query
          description: The type of activity. Each activity type (task, call, etc.) has an ID.
          schema:
            type: string
        - name: associatedContactId
          in: query
          description: The ID of the contact the activity is linked to.
          schema:
            type: string
        - name: associatedCompanyId
          in: query
          description: The ID of the company the activity is linked to.
          schema:
            type: string
        - name: associatedDealId
          in: query
          description: The ID of the deal the activity is linked to.
          schema:
            type: string
        - name: createdAt
          in: query
          description: The date when the activity was added.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the activities list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Activities
      summary: Create an activity
      description: Use this endpoint to create a new activity, for example a new To-Do task.
      operationId: createActivity
      requestBody:
        description: In the request body, pass the ActivityRequest object.
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ActivityRequest"
        required: false
      responses:
        201:
          description: A new activity has been created. Returns an activity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: activity
  /activities/{id}:
    put:
      tags:
        - Activities
      summary: Update an activity
      description: Use this endpoint to modify an existing activity.
      operationId: updateActivity
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the ActivityRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityRequest"
        required: false
      responses:
        200:
          description: The activity has been updated. Returns an activity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: activity
    delete:
      tags:
        - Activities
      summary: Delete an activity
      description: Use this endpoint to remove an existing activity.
      operationId: deleteActivity
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The activity has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /attachments:
    get:
      tags:
        - Attachments
      summary: List attachments
      description: Use this endpoint to get a list of attached files. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getAttachments
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: company
          description: The ID of company. Use this parameter to get attachments associated with this company ID.
          in: query
          schema:
            type: string
        - name: contact
          description: The ID of the contact. Use this parameter to get attachments associated with this contact ID.
          in: query
          schema:
            type: string
        - name: deal
          description: The ID of the deal. Use this parameter to get attachments associated with this deal ID.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns the list of attachments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachments"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Attachments
      summary: Create an attachment
      description: Use this endpoint to add a new attachment to Inperium Sell.
      operationId: createAttachment
      requestBody:
        description: In the request body, pass the AttachmentRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachmentRequest"
        required: false
      responses:
        201:
          description: A new attachment has been created. Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: attachment
  /attachments/{id}:
    get:
      tags:
        - Attachments
      summary: Retrieve an attachment
      description: Use this endpoint to locate a specific attachment and retrieve its details.
      operationId: getAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Attachments
      summary: Update an attachment
      description: Use this endpoint to modify and overwrite an existing attachment.
      operationId: updateAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated AttachmentRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachmentRequest"
        required: false
      responses:
        200:
          description: The attachment has been updated. Returns an attachment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: attachment
    delete:
      tags:
        - Attachments
      summary: Delete an attachment
      description: Use this endpoint to remove an existing attachment.
      operationId: deleteAttachment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The attachment has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List campaigns
      description: Use this endpoint to get a complete list of campaigns. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getCampaigns
      parameters:
        - name: id
          in: query
          description: The ID of the campaign.
          schema:
            type: string
        - name: name
          in: query
          description: The campaign name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Returns campaigns.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaigns"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Campaigns
      summary: Create a campaign
      description: Use this endpoint to add a new campaign to Inperium Sell.
      operationId: createCampaign
      requestBody:
        description: In the request body, pass the CampaignRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CampaignRequest"
        required: false
      responses:
        201:
          description: The new campaign has been created. Returns a campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: campaign
  /campaigns/{id}:
    get:
      tags:
        - Campaigns
      summary: Retrieve a campaign
      description: Use this endpoint to search for a specific endpoint and retrieve its details.
      operationId: getCampaign
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The campaign details have been retrieved. Returns a campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignCustom"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Campaigns
      summary: Delete a campaign
      description: Use this endpoint to remove an existing campaign.
      operationId: deleteCampaign
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: The campaign has been removed. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /campaigns/{id}/contacts:
    get:
      tags:
        - Contacts
      summary: List contacts for campaign
      description: Use this endpoint to retrieve a list of contacts associated with a specific campaign. This endpoint supports paging and sorting.
      operationId: getCampaignContacts
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The contacts have been retrieved. Returns contacts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contacts"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies:
    get:
      tags:
        - Companies
      summary: List companies
      description: Use this endpoint to get a list of companies. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getCompanies
      parameters:
        - $ref: "#/components/parameters/QueryFilter"
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The companies have been retrieved. Returns the list of companies. The `company` object contains flexible properties that can be customized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Companies"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Companies
      summary: Create a company
      description: Use this endpoint to add a new company. This method operates with the `CompanyRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: createCompany
      requestBody:
        description: The CompanyRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        201:
          description: The new company has been created. Returns the company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    patch:
      tags:
        - Companies
      summary: Update companies in bulk
      description: Use this endpoint to modify multiple companies at once. For example, you can set the 'industry' field to the same value or assign several companies to a certain Inperium user. This method operates with the `CompanyRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateCompanies
      parameters:
        - name: ids
          description: The ID of the company.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: The CompanyRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        201:
          description: The companies have been updated. Returns the list of companies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: companies
    delete:
      tags:
        - Companies
      summary: Delete companies
      description: Use this endpoint to remove multiple companies.
      operationId: deleteCompanies
      requestBody:
        description: Company IDs to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
                example: ["$OBJECT-UUID1", "$OBJECT-UUID2"]
        required: true
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies/enrich:
    get:
      tags:
        - Company Data
      summary: Enrich company information
      description: Use this endpoint to load information about the company that is publicly available online. Inperium pulls information about the company based on its domain.
      operationId: getCompanyDataByDomain
      parameters:
        - name: domainName
          in: query
          description: The company website address.
          schema:
            type: string
      responses:
        200:
          description: The company data has been found. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Retrieve a company
      description: Use this endpoint to retrieve company details.
      operationId: getCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Companies
      summary: Update a company
      description: Use this endpoint to modify and overwrite company information. Unlike `PATCH`, this action completely overwrites the company data. This method operates with the `CompanyRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The CompanyRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    patch:
      tags:
        - Companies
      summary: Partially update a company
      description: Use this endpoint to update specific fields in company details. This method operates with the `CompanyRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateCompanyPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The CompanyRequest object example with updated fields
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: company
    delete:
      tags:
        - Companies
      summary: Delete a company
      description: Use this endpoint to remove a company.
      operationId: deleteCompany
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companies/merge:
    post:
      tags:
        - Companies
      summary: Merge company properties
      description: Use this endpoint to merge companies. The properties will be copied from the former company and written to the latter company. The source company will be deleted. This method operates with the `CompanyRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: mergeCompanies
      parameters:
        - name: sourceId
          in: query
          description: The ID of the origin company.
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          in: query
          description: The ID of the target company.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The CompanyRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRequest"
        required: false
      responses:
        200:
          description: The origin company has been removed. The target company has been updated. Returns a company.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /companyRelationships:
    get:
      tags:
        - Company Relationships
      summary: List relationships
      description: Use this endpoint to get a list of connections associated with the company.
      operationId: getAllCompanyRelationships
      parameters:
        - name: company
          in: query
          description: The ID of the company.
          schema:
            type: string
      responses:
        200:
          description: The company links have been retrieved. Returns the company relationships.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyRelationships"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Company Relationships
      summary: Add a relationship
      description: Use this endpoint to create a new link for the company.
      operationId: createCompanyRelationship
      requestBody:
        description: In the request body, pass the CompanyRelationshipRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyRelationshipRequest"
        required: false
      responses:
        201:
          description: A new link has been added for the company. Returns a company relationship.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyRelationship"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: companyRelationship
  /companyRelationships/{id}:
    delete:
      tags:
        - Company Relationships
      summary: Delete a relationship
      description: Use this endpoint to remove a relationship for the company and delete links between companies.
      operationId: deleteCompanyRelationships
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts:
    get:
      tags:
        - Contacts
      summary: List contacts
      description: Use this endpoint to get a list of available contacts. This operation supports paging, sorting, and filtering by fields such as contact name.
      operationId: getContacts
      parameters:
        - name: fullName
          description: The name of the contact.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryFilter"
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: Contacts have been retrieved. Returns a list of contacts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contacts"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Contacts
      summary: Create a contact
      description: Use this endpoint to add new contacts to Inperium Sell. This method operates with the `ContactRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: createContact
      requestBody:
        description: The ContactRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        201:
          description: A new contact has been created. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    patch:
      tags:
        - Contacts
      summary: Update contacts in bulk
      description: Use this endpoint to update properties for two or more contacts. For example, assign contacts to an Inperium user or associate several contacts with the same company. This method operates with the `ContactRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateContacts
      parameters:
        - name: ids
          description: IDs of the contacts that you want to update.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: The ContactRequest object example with updated fields
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        201:
          description: The contacts have been updated. Returns the list of contacts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    delete:
      tags:
        - Contacts
      summary: Delete contacts
      description: Use this endpoint to remove multiple contacts.
      operationId: deleteContacts
      requestBody:
        description: Contact IDs to delete
        content:
          application/json:
            schema:
              type: array
              example: ["$OBJECT-UUID1", "$OBJECT-UUID2"]
              items:
                type: string
                format: uuid
        required: true
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/enrich:
    get:
      tags:
        - Contact Data
      summary: Enrich contact data
      description: Use this endpoint to load information about the contact that is publicly available online. Inperium pulls information about the contact based on contact's email address.
      operationId: getContactDataByEmail
      parameters:
        - name: email
          in: query
          description: The contact's email address.
          schema:
            type: string
      responses:
        200:
          description: The contact details has been enriched. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Retrieve a contact
      description: Use this endpoint to retrieve details for a specific contact.
      operationId: getContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The contact data has been retrieved. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Contacts
      summary: Update a contact
      description: Use this endpoint to update a contact. Unlike `PATCH`, this operation overwrites contact details completely. This method operates with the `ContactRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The ContactRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The contact details have been updated. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    patch:
      tags:
        - Contacts
      summary: Partially update a contact
      description: Use this endpoint to update specific fields in contact details. Unlike `PUT`, this operation overwrites properties partially. This method operates with the `ContactRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateContactPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The ContactRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The contact details have been updated. Returns a contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: contact
    delete:
      tags:
        - Contacts
      summary: Delete a contact
      description: Use this endpoint to remove a contact from Inperium Sell.
      operationId: deleteContact
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /contacts/merge:
    post:
      tags:
        - Contacts
      summary: Merge contact properties
      description: Use this endpoint to merge contacts. The properties of the origin contact will be moved to the target contact (e.g., name, address) and the origin contact will be deleted. This method operates with the `ContactRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: mergeContacts
      parameters:
        - name: sourceId
          description: The ID of the source contact.
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          description: The ID of the target contact.
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The ContactRequest object example with the properties that need to be merged
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequest"
        required: false
      responses:
        200:
          description: The target contact has been updated. The origin contact has been removed. Returns the target contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals:
    get:
      tags:
        - Deals
      summary: Retrieve deals
      description: Use this endpoint to list all deals. This operation supports paging and sorting.
      operationId: getDeals
      parameters:
        - $ref: "#/components/parameters/QueryFilter"
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - in: query
          name: sort
          schema:
            type: string
            default: "+createdAt"
          description: This parameter affects sorting. It specifies the property name to sort the records by, e.g., price or date.
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The deals have been retrieved. Returns deals.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deals"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Deals
      summary: Create a deal
      description: Use this endpoint to create a new deal. This method operates with the `DealRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: createDeal
      requestBody:
        description: The DealRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        201:
          description: A new deal has been created. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    patch:
      tags:
        - Deals
      summary: Update deals in bulk
      description: Use this endpoint to simultaneously update properties of several deals. For example, you can pick multiple deals and assign them to the same Inperium user. This method operates with the `DealRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateDeals
      parameters:
        - name: ids
          description: The IDs of the deals.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      requestBody:
        description: The DealRequest object exaple with updated fields
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        201:
          description: The deals have been updated. Returns the deals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deals
    delete:
      tags:
        - Deals
      summary: Delete deals
      description: Use this endpoint to remove multiple deals.
      operationId: deleteDeals
      requestBody:
        description: Deal IDs to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
                example: ["$OBJECT-UUID1", "$OBJECT-UUID2"]
        required: true
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals/{id}:
    get:
      tags:
        - Deals
      summary: Retrieve a deal
      description: Use this endpoint to locate a specific deal and retrieve its details.
      operationId: getDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The deal has been retrieved. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Deals
      summary: Update a deal
      description: Use this endpoint to modify deal details. Unlike `PATCH`, this operation completely overwrites a deal. This method operates with the `DealRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The DealRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The deal has been updated. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    patch:
      tags:
        - Deals
      summary: Partially update a deal
      description: Use this endpoint to modify some of the deal properties. Unlike `PUT`, this operation doesn't overwrite the deal completely. This method operates with the `DealRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateDealPartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The DealRequest object example with updated fields.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The deal has been updated. Returns a deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: deal
    delete:
      tags:
        - Deals
      summary: Delete a deal
      description: Use this endpoint to remove a deal. Note that removing a deal that is no longer active is not the best decision from the business perspective. Stale deals should be assigned to a final stage like 'Deal lost' instead of being deleted.
      operationId: deleteDeal
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals/merge:
    post:
      tags:
        - Deals
      summary: Merge deals
      description: Use this endpoint to merge deals. The contents of the origin deal with be moved to the target deal. As a result, the first deal will be removed. This method operates with the `DealRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: mergeDeals
      parameters:
        - name: sourceId
          description: The ID of the origin deal.
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          description: The ID of the target deal.
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The DealRequest object example with the properties to be merged
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DealRequest"
        required: false
      responses:
        200:
          description: The target deal has been updated. The origin deal has been removed. Returns the deal.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deal"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /deals/{id}/items:
    get:
      tags:
        - Deal Items
      summary: List deal items
      description: Use this endpoint to get information about the products included in the deal as well as any applicable fees.
      operationId: getDealItems
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Deal items have been retrieved. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsAndAdditionalFees"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Deal Items
      summary: Add items
      description: Use this endpoint to add items to the deal. It can be a product or fee.
      operationId: createDealItems
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the ItemsAndAdditionalFees object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsAndAdditionalFees"
        required: false
      responses:
        201:
          description: Items have been added. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsAndAdditionalFees"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: dealItems
  /exports:
    post:
      tags:
        - Exports
      summary: Export data
      description: Use this endpoint to export companies, deals, etc. This operation supports paging, sorting, and filtering.
      operationId: runExport
      requestBody:
        description: In the request body, pass the ExportRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRequest"
      responses:
        204:
          description: Export started. You will receive an email with the download link once the export completes.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: fields
  /exports/{id}:
    get:
      tags:
        - Exports
      summary: Download a file
      description: Use this endpoint to download a file containing export results.
      operationId: getExport
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The export file has been downloaded.
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /items:
    get:
      tags:
        - Items
      summary: List items
      description: Use this endpoint to retrieve items (products or fees) connected to a specific deal or quote. This operation supports paging and sorting.
      operationId: getItems
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: dealId
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The items have been retrieved. Returns items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /forms:
    get:
      tags:
        - Forms
      summary: List forms
      description: Use this endpoint to retrieve custom forms. This endpoint supports paging and sorting. Use query parameters to narrow down results.
      operationId: getForms
      parameters:
        - name: name
          in: query
          description: The form name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The forms have been retrieved. Returns forms.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forms"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Forms
      summary: Create a form
      description: Use this endpoint to add a new custom forms.
      operationId: createForm
      requestBody:
        description: In the request body, pass the Form object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Form"
        required: false
      responses:
        201:
          description: The form has been created. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: form
  /forms/{id}:
    get:
      tags:
        - Forms
      summary: Retrieve a form
      description: Use this endpoint to locate a specific form and get its details.
      operationId: getForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The form has been retrieved. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Forms
      summary: Update a form
      description: Use this endpoint to modify and overwrite an existing form.
      operationId: updateForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the Form object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Form"
        required: false
      responses:
        200:
          description: The form has been updated. Returns a form.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: form
    delete:
      tags:
        - Forms
      summary: Delete a form
      description: Use this endpoint to remove a form.
      operationId: deleteForm
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /globalSearch:
    get:
      tags:
        - Global Search
      summary: Retrieve data
      description: Use this endpoint to search across companies, contacts, and deals. For example, locate all entities that contain "bowl" such as Bowler Inc., Marcus Bowlson.
      operationId: globalSearch
      parameters:
        - name: query
          description: The phrase to search for.
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: The search results have been retrieved. Returns global search results.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalSearchResults"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /imports:
    get:
      tags:
        - Imports
      summary: List imports
      description: Use this endpoint to get information about previous imports. This operation supports paging and sorting.
      operationId: getImportEntries
      parameters:
        - name: filename
          in: query
          description: The name of the uploaded file. Specify a name to search for a specific import.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The import log has been retrieved. Returns the list of imports.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imports"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Imports
      summary: Import a file
      description: Use this endpoint to upload a file containing entities to Inperium. For example, you can upload your client data exported from other CRMs and that was previously stored in spreadsheets.
      operationId: importFile
      parameters:
        - name: mappings
          description: This parameter defines mapping between incoming data and Inperium Sell properties.
          in: query
          schema:
            type: string
        - name: fileUrl
          description: The link to the import file.
          in: query
          schema:
            type: string
      responses:
        201:
          description: The entities have been imported.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations:
    get:
      tags:
        - Integrations
      summary: List integrations
      description: Use this endpoint to retrieve a complete list of third-party integrations enabled for the tenant account. This operation supports paging, sorting, and filtering.
      operationId: getIntegrations
      parameters:
        - name: id
          description: The integration ID.
          in: query
          schema:
            type: string
        - name: name
          description: The integration name.
          in: query
          schema:
            type: string
        - name: type
          description: The integration type.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Integrations have been retrieved. Returns integrations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integrations"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/authorize:
    get:
      tags:
        - Stripe Authorizations
      summary: Authorize Stripe
      description: Use this endpoint to enable payment processing with Stripe and authorize the Stripe account.
      operationId: authorizeStripe
      responses:
        200:
          description: The request has been forwarded to the redirect URL. Returns the OAuth2Redirect object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2Redirect"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/authorize/callback:
    x-access: private
    get:
      x-access: private
      tags:
        - Stripe Authorizations
      summary: Get the Stripe callback
      description: Get the Stripe OAuth2 authorization callback.
      operationId: callbackStripe
      parameters:
        - name: code
          description: The one-off authorization code.
          in: query
          schema:
            type: string
      responses:
        200:
          description: Authorization has been successful.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/stripe/credentials:
    get:
      tags:
        - Stripe Authorizations
      summary: Get the Stripe credentials
      description: Use this endpoint to retrieve Stripe credentials for the current tenant.
      operationId: getStripeCredentials
      responses:
        200:
          description: The Stripe credentials have been retrieved. Returns Stripe credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeCredentials"
  /integrations/stripe/deauthorize:
    get:
      tags:
        - Stripe Authorizations
      summary: Deauthorize Stripe
      description: Use this endpoint to disable integration with Stripe and revoke access.
      operationId: deauthorizeStripe
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/xero/authorize:
    get:
      tags:
        - Xero Authorizations
      summary: Authorize Xero
      description: Use this endpoint to enable integration with Xero and authorize the Xero account.
      operationId: authorizeXero
      responses:
        200:
          description: The request has been forwarded to the redirect URL.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2Redirect"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/xero/authorize/callback:
    x-access: private
    get:
      x-access: private
      tags:
        - Xero Authorizations
      summary: Get the Xero callback
      description: Use this endpoint to receive the Xero OAuth2 authorization callback.
      operationId: callbackXero
      parameters:
        - name: oAuthToken
          description: The Xero token.
          in: query
          schema:
            type: string
        - name: oAuthVerifier
          description: The verification code.
          in: query
          schema:
            type: string
      responses:
        204:
          description: Returns an empty response.
          content: {}
  /integrations/xero/deauthorize:
    get:
      tags:
        - Xero Authorizations
      summary: Deauthorize Xero
      description: Use this endpoint to disable the tenant's integration with Xero and revoke access.
      operationId: deauthorizeXero
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /integrations/{id}:
    get:
      tags:
        - Integrations
      summary: Retrieve integration
      description: Use this endpoint to locate a specific integration and retrieve its details.
      operationId: getIntegration
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: Integration details have been retrieved. Returns integration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices:
    get:
      tags:
        - Invoices
      summary: List invoices
      description: Use this endpoint to retrieve a list of invoices. This operation supports sorting, paging, and filtering.
      operationId: getInvoices
      parameters:
        - name: id
          description: The ID of the invoice.
          in: query
          schema:
            type: string
        - name: contactId
          in: query
          description: The ID of the contact associated with this invoice. It is the person the invoice is issued to.
          schema:
            type: string
        - name: dealId
          in: query
          description: The ID of the deal. Invoices are always linked to deals to ensure they are accountable.
          schema:
            type: string
        - name: number
          description: The number of the invoice.
          in: query
          schema:
            type: string
        - name: date
          in: query
          description: The date when the invoice was issued (mm/dd/yyyy).
          schema:
            type: string
        - name: dueDate
          in: query
          description: The date by which the invoice must be paid (mm/dd/yyyy).
          schema:
            type: string
        - name: status
          in: query
          description: The invoice status. For example, if the invoice was paid or is pending.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The invoices have been retrieved. Returns invoices.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoices"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Invoices
      summary: Create an invoice
      description: Use this endpoint to add a new invoice to Inperium Sell.
      operationId: createInvoice
      requestBody:
        description: In the request body, pass the InvoiceRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceRequest"
        required: false
      responses:
        201:
          description: A new invoice has been created. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoice
  /invoices/paymentPlans:
    get:
      tags:
        - Invoices
      summary: List payment plans
      description: Use this endpoint to get the list of payment plans for the invoices. For each invoice, you can set up a payment plan, for example, to split the invoice into several payments. This endpoint supports sorting and paging.
      operationId: getInvoicesPaymentPlans
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The payment plans have been retrieved. Returns InvoicePaymentPlans.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePaymentPlans"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices/{id}:
    get:
      tags:
        - Invoices
      summary: Retrieve an invoice
      description: Use this endpoint to locate an invoice by its ID and get invoice details.
      operationId: getInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The invoice has been retrieved. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Invoices
      summary: Update an invoice
      description: Use this endpoint to modify the invoice. The contents of the invoice will be overwritten.
      operationId: updateInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated InvoiceRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceRequest"
        required: false
      responses:
        200:
          description: The invoice has been updated. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoice
    delete:
      tags:
        - Invoices
      summary: Delete an invoice
      description: Use this endpoint to remove an invoice.
      operationId: deleteInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /invoices/{id}/email:
    post:
      tags:
        - Invoices
      summary: Send an invoice
      description: Use this endpoint to send an invoice to the client by email.
      operationId: emailInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the InvoiceEmail object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceEmail"
        required: false
      responses:
        202:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: invoiceEmail
  /invoices/{id}/sync/{integrationAnchor}:
    get:
      tags:
        - Invoices
      summary: Sync invoices
      description: Use this endpoint to get the most recent information about invoices and synchronize them.
      operationId: syncInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: integrationAnchor
          description: The ID of the integration (e.g., Xero) that facilitates invoice processing and synchronization.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /payments:
    get:
      tags:
        - Payments
      summary: List payments
      description: Use this endpoint to get a payment log and see what invoices have been paid. This operation supports paging and sorting. Search for a specific payment or narrow down results to similar payments (e.g., made by credit card).
      operationId: getPayments
      parameters:
        - name: id
          in: query
          description: The payment ID.
          schema:
            type: string
        - name: contactId
          in: query
          description: The contact associated with the payment.
          schema:
            type: string
        - name: date
          in: query
          description: The date the payment was made (mm/dd/yyyy).
          schema:
            type: string
        - name: method
          in: query
          description: Payment method (cash, credit card, etc.).
          schema:
            type: string
        - name: amount
          in: query
          description: The amount that was paid.
          schema:
            type: string
        - name: status
          in: query
          description: The payment status.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Payments have been retrieved. Returns payments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payments"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Payments
      summary: Create a payment
      description: Use this endpoint to add a new payment to Inperium.
      operationId: createPayment
      requestBody:
        description: In the request body, pass the PaymentRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: false
      responses:
        200:
          description: A new payment has been created. Returns a payment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: paymentDetails
  /payments/capturePaymentIntent:
    get:
      tags:
        - Payments
      summary: Capture a payment intent
      description: Use this endpoint to get information about a payment intent from Stripe. Payment intents help process complex transaction and improve logging.
      operationId: capturePaymentIntent
      parameters:
        - name: paymentIntentId
          description: The Stripe identifier for payment intents.
          in: query
          schema:
            type: string
      responses:
        200:
          description: The payment intent has been retrieved. Returns a payment intent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CapturedPaymentIntent"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /payments/createPaymentIntent:
    post:
      tags:
        - Payments
      summary: Create a payment intent
      description: Use this endpoint to create a Stripe payment intent. See Stripe API reference for background information.
      operationId: createPaymentIntent
      requestBody:
        description: In the request body, pass the CreatePaymentIntent object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentIntent"
        required: false
      responses:
        200:
          description: A new payment intent has been created. Returns a payment intent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentIntent"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: createPaymentIntent
  /payments/{id}:
    put:
      tags:
        - Payments
      summary: Update a payment
      description: Use this endpoint to modify payments. Locate the payment you are interested in and overwrite it.
      operationId: updatePayment
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the PaymentRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: false
      responses:
        200:
          description: The payment has been updated. Returns a payment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: payment
  /pipelines:
    get:
      tags:
        - Pipelines
      summary: List pipelines
      description: Use this endpoint to get a list of pipelines created by the current tenant. This operation supports sorting and paging.
      operationId: getPipelines
      parameters:
        - name: name
          description: The pipeline name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The pipelines have been retrieved. Returns pipelines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipelines"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Pipelines
      summary: Create a pipeline
      description: Use this endpoint to add a new pipeline.
      operationId: createPipeline
      requestBody:
        description: In the request body, pass the PipelineRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineRequest"
        required: false
      responses:
        201:
          description: A new pipeline has been created. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: pipeline
  /pipelines/{id}:
    get:
      tags:
        - Pipelines
      summary: Retrieve a pipeline
      description: Use this endpoint to get detailed information about a specific pipeline.
      operationId: getPipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The pipeline details have been retrieved. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Pipelines
      summary: Update a pipeline
      description: Use this endpoint to modify a pipeline.
      operationId: updatePipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated PipelineRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineRequest"
        required: false
      responses:
        200:
          description: The pipeline has been updated. Returns a pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: pipeline
    delete:
      tags:
        - Pipelines
      summary: Delete a pipeline
      description: Use this endpoint to remove a pipeline.
      operationId: deletePipeline
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /pipelines/{id}/statistics:
    get:
      tags:
        - Pipeline Statistics
      summary: Retrieve deal statistics
      description: Use this endpoint to find out how many deals you have in a specific pipeline. The deals will be grouped by stage and you'll see the total for each stage.
      operationId: getPipelineStatistics
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: Returns pipeline statistics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineStatistics"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /dictionaries:
    get:
      tags:
        - Dictionaries
      summary: List dictionaries
      description: Use this endpoint to retrieve available dictionaries.
      operationId: getDictionaries
      responses:
        200:
          description: The dictionaries have been retrieved. Returns a list of Dictionary objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /dictionaries/{id}:
    get:
      tags:
        - Dictionaries
      summary: Retrieve a dictionary
      description: Use this endpoint to search for a specific dictionary and retrieve its items.
      operationId: getDictionary
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        200:
          description: The dictionary has been retrieved. Returns dictionary items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dictionary"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /products:
    get:
      tags:
        - Products
      summary: List products
      description: Use this endpoint to get a complete list of products offered by the tenant. This operation supports paging and sorting. You can also narrow down results to the products of a specific price, etc.
      operationId: getProducts
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - in: query
          name: sort
          schema:
            type: string
            default: "+createdAt"
          description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
        - $ref: "#/components/parameters/EntityProperties"
      responses:
        200:
          description: The products have been retrieved. Returns products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Products
      summary: Create a product
      description: Use this endpoint to add new products to Inperium Sell. This method operates with the `ProductRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: createProduct
      requestBody:
        description: The ProductRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: false
      responses:
        201:
          description: A new product has been created. Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: product
  /products/{id}:
    get:
      tags:
        - Products
      summary: Retrieve a product
      description: Use this endpoint to locate a specific product and get its details such as price and cost.
      operationId: getProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The product details have been retrieved. Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Products
      summary: Update a product
      description: Use this endpoint to modify a product. The operation overwrites the product record. This method operates with the `ProductRequest` object that encompasses flexible properties. If you are unsure what properties are available, query the `/properties` endpoint first.
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: The ProductRequest object example
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: false
      responses:
        200:
          description: The product has been updated. Returns a product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

      x-codegen-request-body-name: product
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Use this endpoint to remove a product the tenant no longer offers.
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties:
    get:
      tags:
        - Properties
      summary: List properties
      description: Use this endpoint to retrieve all property definitions for the current tenant, including builtin and custom properties. This operation supports paging and sorting. You can also filter properties by label or data type.
      operationId: getAllProperties
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
        - name: dataType
          in: query
          description: The type of the property value.
          schema:
            type: string
        - name: owner
          in: query
          description: The user who created the property.
          schema:
            type: string
        - name: label
          in: query
          description: The display name of the property.
          schema:
            type: string
        - name: objectType
          in: query
          description: The entity the property refers to, e.g. companies, contacts, or deals.
          schema:
            type: string
      responses:
        200:
          description: The list of properties has been retrieved. Returns PropertyConfigs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfigs"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Properties
      summary: Create a property
      description: Use this endpoint to create a custom property.
      operationId: createProperty
      requestBody:
        description: In the request body, pass the PropertyRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyRequest"
      responses:
        201:
          description: A new property has been created. Returns a PropertyConfig.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties/{id}:
    put:
      tags:
        - Properties
      summary: Update a property
      description: Use this endpoint to modify a custom property. For example, to change a label or a data type. The property will be overwritten.
      operationId: updateProperty
      parameters:
        - name: id
          in: path
          description: The ID of the property.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: In the request body, pass the PropertyRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyRequest"
      responses:
        200:
          description: The property has been updated. Returns a PropertyConfig.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Properties
      summary: Delete a property
      description: Use this endpoint to remove a custom property.
      operationId: deleteProperty
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /properties/{objectType}:
    get:
      tags:
        - Properties
      summary: List properties by object
      description: Retrieve properties belonging to a specific entity. For example, company properties or deal properties.
      operationId: getPropertiesByType
      parameters:
        - name: objectType
          in: path
          description: The object, e.g., companies, contacts, or deals.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The properties have been retrieved. Returns the list of PropertyConfigs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyConfig"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /public/invoices/{id}:
    get:
      tags:
        - Invoice Page
      summary: Retrieve an invoice
      description: Use this endpoint to generate the invoice page. You can share the invoice page with a customer who would pay the invoice.
      operationId: getInvoiceByUid
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The invoice page has been generated.
          content:
            text/html:
              schema:
                type: string
  /public/invoices/{id}/download:
    get:
      tags:
        - Invoice Page
      summary: Download the invoice
      description: Use this endpoint to retrieve invoice details and save the invoice page as pdf.
      operationId: getInvoicePagePdf
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The invoice has been saved as pdf.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /public/quotes/{id}:
    get:
      tags:
        - Public Quote
      summary: Retrieve a quote
      description: Use endpoint to generate a quote page for an anonymous user.
      operationId: getPublicQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The quote has been generated. Returns a public quote.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicQuote"
  /public/quotes/{id}/accept:
    get:
      tags:
        - Public Quote
      summary: Accept a quote
      description: Use this endpoint to mark the quote as accepted. Accepting a quote means that the customer agreed with the terms and is ready to proceed with the payment.
      operationId: acceptQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: signature
          in: query
          description: The client's signature.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The quote has been accepted.
          content: {}
  /quotes:
    get:
      tags:
        - Quotes
      summary: List quotes
      description: Use this endpoint to get a list of quotes for the current tenant. This operation supports sorting and paging as well filtering by the deal ID.
      operationId: getQuotes
      parameters:
        - $ref: "#/components/parameters/QueryStringResourceId"
        - name: dealId
          in: query
          description: The ID of the deal. Quotes are always associated with deals. Note that multiple quotes can be linked to a single deal.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The quotes have been retrieved. Returns quotes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quotes"
    post:
      tags:
        - Quotes
      summary: Create a quote
      description: Use this endpoint to add a new quote to the deal.
      operationId: createQuote
      requestBody:
        description: In the request body, pass the QuoteRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: false
      responses:
        201:
          description: The quote has been created. Returns a quote.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: quote
  /quotes/{id}:
    get:
      tags:
        - Quotes
      summary: Retrieve a quote
      description: Use this endpoint to locate a specific quote and retrieve its details.
      operationId: getQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The quote has been retrieved. Returns a quote.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Quotes
      summary: Update a quote
      description: Use this endpoint to modify an existing quote. The quote details will be overwritten.
      operationId: updateQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the QuoteRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: true
      responses:
        200:
          description: The quote status has been updated. Returns a quote.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
    patch:
      tags:
        - Quotes
      summary: Partially update a quote
      description: Use this endpoint to partially update a quote. For example, you can mark the quote as created, sent or accepted. Accepting a quote means that the customer agreed with the terms and is ready to proceed with the payment.
      operationId: updateQuotePartial
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the QuoteRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteRequest"
        required: true
      responses:
        200:
          description: The quote has been updated. Returns a quote.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
    delete:
      tags:
        - Quotes
      summary: Delete a quote
      description: Use this endpoint to delete an obsolete quote.
      operationId: deleteQuote
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /quotes/{id}/convertToInvoice:
    post:
      tags:
        - Quotes
      summary: Convert to an invoice
      description: Use this endpoint to convert the quote to an invoice. Once the quote gets accepted, you can convert it to the invoice to streamline payments.
      operationId: convertQuoteToInvoice
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the QuoteToInvoice object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteToInvoice"
        required: true
      responses:
        200:
          description: The quote has been converted to an invoice. Returns an invoice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: conversionModel
  /reports:
    get:
      tags:
        - Reports
      summary: List reports
      description: Use this endpoint to get a list of reports available in Inperium Sell. This operation supports paging and sorting.
      operationId: getReports
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The report list has been retrieved. Returns reports.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reports"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /reports/{id}/data:
    get:
      tags:
        - Reports
      summary: Retrieve report data
      description: Use this endpoint to see report data returned by a specific report.
      operationId: getReportData
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - name: who
          in: query
          description: The report can show data for the currently authenticated user (ME) or the entire team (TEAM).
          schema:
            type: string
            enum:
              - ME
              - TEAM
        - name: from
          in: query
          description: The start date.
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: The finish date.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The data has been retrieved. Returns ReportData.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportData"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /snippets:
    get:
      tags:
        - Snippets
      summary: List snippets
      description: Use this endpoint to get a complete list of available snippets. This operation supports paging, sorting, and filtering.
      operationId: getSnippets
      parameters:
        - name: name
          in: query
          description: The snippet name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The snippets have been retrieved. Returns snippets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippets"
    post:
      tags:
        - Snippets
      summary: Create a snippet
      description: Use this endpoint to add a new snippet.
      operationId: createSnippet
      requestBody:
        description: In the request body, pass the snippet object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnippetRequest"
        required: false
      responses:
        201:
          description: A new snippet has been created. Returns a snippet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
      x-codegen-request-body-name: snippet
  /snippets/{id}:
    get:
      tags:
        - Snippets
      summary: Retrieve a snippet
      description: Use this endpoint to locate a specific snippet and retrieve its details.
      operationId: getSnippet
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The snippet has been retrieved. Returns a snippet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Snippets
      summary: Update a snippet
      description: Use this endpoint to modify and overwrite an existing snippet.
      operationId: updateSnippet
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated snippet object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnippetRequest"
        required: false
      responses:
        200:
          description: The snippet has been updated. Returns a snippet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: snippet
    delete:
      tags:
        - Snippets
      summary: Delete a snippet
      description: Use this endpoint to remove a snippet.
      operationId: deleteSnippet
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /stages:
    get:
      tags:
        - Stages
      summary: List stages
      description: Use this endpoint to get a complete list of pipeline stages.
      operationId: getStages
      parameters:
        - in: query
          name: pipeline
          description: The pipeline name. Use this query parameter to retrieve stages of a specific pipeline.
          schema:
            type: string
      responses:
        200:
          description: The stages have been retrieved. Returns stages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stages"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Stages
      summary: Create a stage
      description: Use this endpoint to add a new stage to the pipeline.
      operationId: createStage
      requestBody:
        description: In the request body, pass the StageRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageRequest"
        required: false
      responses:
        201:
          description: A new stage has been added. Returns a stage.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: stage
  /stages/{id}:
    get:
      tags:
        - Stages
      summary: Retrieve a stage
      description: Use this endpoint to get a specific stage by ID.
      operationId: getStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The stage has been retrieved. Returns a stage.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Stages
      summary: Update a stage
      description: Use this endpoint to modify and overwrite an existing stage.
      operationId: updateStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated StageRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageRequest"
        required: false
      responses:
        200:
          description: The stage has been updated. Returns a stage.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: stage
    delete:
      tags:
        - Stages
      summary: Delete a stage
      description: Use this endpoint to remove a stage from a pipeline.
      operationId: deleteStage
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The stage has been deleted. Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /templates:
    get:
      tags:
        - Template
      summary: List templates
      description: Use this endpoint to get a complete list of available templates. This operation supports paging, sorting, and filtering.
      operationId: getTemplates
      parameters:
        - name: name
          in: query
          description: The template name.
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The templates have been retrieved. Returns templates.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Templates"
    post:
      tags:
        - Template
      summary: Create a template
      description: Use this endpoint to add a new template.
      operationId: createTemplate
      requestBody:
        description: In the request body, pass the template object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: false
      responses:
        200:
          description: A new template has been created. Returns a template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
      x-codegen-request-body-name: template
  /templates/{id}:
    get:
      tags:
        - Template
      summary: Retrieve a template
      description: Use this endpoint to locate a specific template and retrieve its details.
      operationId: getTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        200:
          description: The template has been retrieved. Returns a template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Template
      summary: Update a template
      description: Use this endpoint to modify and overwrite an existing template.
      operationId: updateTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated template object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: false
      responses:
        200:
          description: The template has been updated. Returns a template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: template
    delete:
      tags:
        - Template
      summary: Delete a template
      description: Use this endpoint to remove a template.
      operationId: deleteTemplate
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /messages:
    post:
      tags:
        - Messages
      summary: Create and send a message
      description: Use this endpoint to compose and send a bulk message.
      operationId: sendMessages
      requestBody:
        description: In the request body, pass the MessageRequest object.
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/MessageRequest"
        required: true
      responses:
        200:
          description: A new message has been created and sent.
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: message
  /tenant/settings:
    put:
      tags:
        - Tenant Settings
      summary: Update tenant settings
      description: Use this endpoint to modify and overwrite tenant settings including billing, company name, default time zone.
      operationId: updateTenantSettings
      requestBody:
        description: In the request body, pass the TenantSettings object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantSettings"
        required: false
      responses:
        200:
          description: The tenant settings have been updated. Returns Tenant Settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantSettings"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: tenantSettings
    get:
      tags:
        - Tenant Settings
      summary: Retrieve tenant settings
      description: Use this endpoint to get information about a current tenant.
      operationId: getTenantSettings
      responses:
        200:
          description: The tenant settings have been retrieved. Returns Tenant Settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantSettings"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /tenant/integrations:
    get:
      tags:
        - Tenant Integrations
      summary: List integrations
      description: Use this endpoint to get a list of integrations enabled for a current tenant. This operation supports paging and sorting.
      operationId: getTenantIntegrations
      parameters:
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: Integrations have been retrieved. Returns Tenant Integrations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantIntegrations"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /terminals/connectionToken:
    post:
      tags:
        - Stripe Terminals
      summary: Create a terminal token
      description: Use this endpoint to issue a new terminal token.
      operationId: createTerminalToken
      responses:
        200:
          description: A new token has been created. Returns TerminalTokenDetails.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminalTokenDetails"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /terminals/readers:
    get:
      tags:
        - Stripe Terminals
      summary: List Stripe terminal readers
      description: Use this endpoint to retrieve a list of existing Stripe terminal readers.
      operationId: getReaders
      parameters:
        - name: limit
          description: The volume or quantity assigned to a terminal.
          in: query
          schema:
            type: string
      responses:
        200:
          description: The readers have been retrieved. Returns Stripe Readers.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReaders"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    post:
      tags:
        - Stripe Terminals
      summary: Create a new reader
      description: Use this endpoint to add a new terminal reader.
      operationId: createReader
      requestBody:
        description: In the request body, pass the StripeReaderRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripeReaderRequest"
        required: false
      responses:
        200:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: readerDetails
  /terminals/readers/{id}:
    get:
      tags:
        - Stripe Terminals
      summary: Retrieve reader details
      description: Use this endpoint to locate a Stripe terminal reader by its ID and get its details.
      operationId: getReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        200:
          description: The reader details have been retrieved. Returns Stripe Reader.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReader"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    put:
      tags:
        - Stripe Terminals
      summary: Update a reader
      description: Use this endpoint to modify and overwrite an existing Stripe terminal reader.
      operationId: updateReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      requestBody:
        description: In the request body, pass the updated StripeReaderRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripeReaderRequest"
        required: false
      responses:
        200:
          description: The reader has been updated. Returns Stripe Reader.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeReader"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      x-codegen-request-body-name: reader
    delete:
      tags:
        - Stripe Terminals
      summary: Delete a reader
      description: Use this endpoint to remove a Stripe terminal reader.
      operationId: deleteReader
      parameters:
        - $ref: "#/components/parameters/ResourceStringId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views:
    post:
      tags:
        - Views
      summary: Create a view
      description: Use this endpoint to add a new view.
      operationId: createView
      requestBody:
        description: In the request body, pass the ViewRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewRequest"
      responses:
        201:
          description: A new view has been created. Returns a view.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views/{type}:
    get:
      tags:
        - Views
      summary: List views of a specific type
      description: Use this endpoint to retrieve views by their type. For example, company views or contact views.
      operationId: getViews
      parameters:
        - name: type
          in: path
          description: The Inperium entity (companies, deals, etc.) the views are used for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The views have been retrieved. Returns views.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /views/{id}:
    put:
      tags:
        - Views
      summary: Update a view
      description: Use this endpoint to modify and overwrite an existing view.
      operationId: updateView
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      requestBody:
        description: In the request body, pass the updated ViewRequest object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewRequest"
      responses:
        200:
          description: The view has been updated. Returns a view.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
    delete:
      tags:
        - Views
      summary: Delete a view
      description: Use this endpoint to remove an obsolete view.
      operationId: deleteView
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        204:
          description: Returns an empty response.
          content: {}
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
  /widgets:
    get:
      tags:
        - Widgets
      summary: Retrieve widgets
      description: Use this endpoint to retrieve a list of widgets with data.
      operationId: getAllWidgets
      parameters:
        - name: from
          in: query
          description: The start date for the widget data.
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: The end date for the widget data.
          schema:
            type: integer
            format: int64
        - name: who
          in: query
          description: The widgets can show data for the currently authenticated user (ME) or the entire team (TEAM).
          schema:
            type: string
            enum:
              - ME
              - TEAM
        - $ref: "#/components/parameters/QueryPageSize"
        - $ref: "#/components/parameters/QueryPageNumber"
        - $ref: "#/components/parameters/QuerySort"
      responses:
        200:
          description: The widgets have been retrieved. Returns widgets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Widgets"
        default:
          description: Bad request, security violation, or internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
components:
  securitySchemes:
    BearerAuth:
      description: This token is generated when a user enters credentials. Although you can leverage this token when making API calls, please note that due to security concerns it frequently expires.
      type: http
      scheme: bearer
    ApiKeyAuth:
      description: The API key is a secure key generated by Inperium that can be used for authentication. The API key has an expiration date after which your API requests will be denied by the server.
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    ActivityRequest:
      description: The ActivityRequest object is submitted to Inperium API to add or modify activities.
      type: object
      discriminator:
        propertyName: type
        description: The type of the activity.
        mapping:
          note: "#/components/schemas/NoteActivityRequest"
          NOTE: "#/components/schemas/NoteActivityRequest"
          email: "#/components/schemas/EmailActivityRequest"
          EMAIL: "#/components/schemas/EmailActivityRequest"
          call: "#/components/schemas/CallActivityRequest"
          CALL: "#/components/schemas/CallActivityRequest"
          meeting: "#/components/schemas/MeetingActivityRequest"
          MEETING: "#/components/schemas/MeetingActivityRequest"
          task: "#/components/schemas/TaskActivityRequest"
          TASK: "#/components/schemas/TaskActivityRequest"
      properties:
        associatedCompanies:
          type: array
          description: The list of company IDs.
          items:
            $ref: "#/components/schemas/Id"
        associatedContacts:
          type: array
          description: The list of contact IDs.
          items:
            $ref: "#/components/schemas/Id"
        associatedDeals:
          type: array
          description: The list of deal IDs.
          items:
            $ref: "#/components/schemas/Id"
    NoteActivityRequest:
      description: An incoming object that describes an activity. `NOTE` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The contents of a note.
              type: string
          required:
            - body
    EmailActivityRequest:
      description: An incoming object that describes an activity. `EMAIL` will be used as the discriminator value. Currently, the email activity isn't in sync with the Message Center. These emails aren't sent to recipients but rather work as drafts or reminders.
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The contents of an email.
              type: string
            subject:
              type: string
              description: The email subject.
            to:
              type: string
              description: The recipient.
            activityDate:
              type: integer
              format: int64
              description: The date when the email was sent or received.
          required:
            - body
            - subject
            - to
            - activityDate
    CallActivityRequest:
      description: An incoming object that describes an activity. `CALL` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              type: string
              description: Any information about the call such as call agenda or resolution.
            subject:
              type: string
              description: A short title of the call.
            activityDate:
              type: integer
              format: int64
              description: The date the call took place.
          required:
            - subject
            - activityDate
    MeetingActivityRequest:
      description: An incoming object that describes an activity. `MEETING` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              type: string
              description: Any information about the meeting such as meeting notes or agenda.
            subject:
              type: string
              description: A short title of the meeting.
            activityDate:
              type: integer
              format: int64
              description: The date the meeting took place.
          required:
            - subject
            - activityDate
    TaskActivityRequest:
      description: An incoming object that describes an activity. `TASK` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/ActivityRequest"
        - type: object
          properties:
            body:
              description: The contents of a task, for example the task description, important items, or action steps.
              type: string
            subject:
              type: string
              description: A short title.
            status:
              type: string
              description: This parameters marks if the task is complete or in the pending state.
              enum:
                - TODO
                - DONE
              default: TODO
            dueDate:
              type: integer
              description: The date the task has to be completed.
              format: int64
          required:
            - subject
            - dueDate
    Activities:
      type: object
      description: The array of Activity objects with paging and sorting information.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Activity:
      description: The object describes an entry in the activity timeline such as a note, email, or call.
      type: object
      discriminator:
        propertyName: type
        description: The type of the activity.
        mapping:
          NOTE: "#/components/schemas/NoteActivity"
          EMAIL: "#/components/schemas/EmailActivity"
          CALL: "#/components/schemas/CallActivity"
          MEETING: "#/components/schemas/MeetingActivity"
          TASK: "#/components/schemas/TaskActivity"
          EVENT: "#/components/schemas/EventActivity"
      properties:
        id:
          $ref: "#/components/schemas/Id"
        associatedCompanies:
          type: array
          description: The list of companies.
          items:
            $ref: "#/components/schemas/Company"
        associatedContacts:
          type: array
          description: The list of the contacts.
          items:
            $ref: "#/components/schemas/Contact"
        associatedDeals:
          type: array
          description: The list of deals.
          items:
            $ref: "#/components/schemas/Deal"
        authorId:
          description: The activity creator.
          $ref: "#/components/schemas/Id"
        createdAt:
          type: integer
          description: The date the activity was recorded.
          format: int64
        updatedAt:
          type: integer
          description: The date the activity was modified.
          format: int64
      required:
        - type
    NoteActivity:
      description: The note type of activity. `NOTE` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The contents of a note.
              type: string
          required:
            - body
    EmailActivity:
      description: The email type of activity. `EMAIL` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The contents of an email.
              type: string
            subject:
              type: string
              description: The email subject.
            to:
              type: string
              description: The recipient.
            activityDate:
              type: integer
              format: int64
              description: The date when the email was sent or received.
          required:
            - body
            - subject
            - to
            - activityDate
    CallActivity:
      description: The call type of activity. `CALL` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: Any information about the call such as call agenda or resolution.
              type: string
            subject:
              type: string
              description: A short title of the call.
            activityDate:
              type: integer
              format: int64
              description: The date the call took place.
          required:
            - subject
            - activityDate
    MeetingActivity:
      description: The meeting type of activity. `MEETING` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: Any information about the meeting such as meeting notes or agenda.
              type: string
            subject:
              type: string
              description: A short title of the meeting.
            activityDate:
              type: integer
              format: int64
              description: The date the meeting took place.
          required:
            - subject
            - activityDate
    TaskActivity:
      description: The task type of activity. `TASK` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            body:
              description: The contents of a task, for example the task description, important items, or action steps.
              type: string
            subject:
              type: string
              description: A short title.
            status:
              type: string
              description: This parameters marks if the task is complete or in the pending state.
              enum:
                - TODO
                - DONE
              default: TODO
            dueDate:
              type: integer
              description: The date the task has to be completed.
              format: int64
          required:
            - subject
            - dueDate
    EventActivity:
      description: The event type of activity. It logs changes to deals, contacts, and companies. `EVENT` will be used as the discriminator value.
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            eventType:
              type: string
              description: The action that occurred, e.g., a new company was created or a deal won. Select one of the predefined values.
              enum:
                - COMPANY_CREATED
                - COMPANY_IMPORTED
                - CONTACT_CREATED
                - CONTACT_IMPORTED
                - DEAL_CREATED
                - DEAL_IMPORTED
                - ASSIGNED_USER_UPDATED
                - DEAL_WON
                - DEAL_LOST
                - OTHER
            activityDate:
              type: integer
              format: int64
              description: The date the meeting took place.
          required:
            - eventType
            - activityDate
    AdditionalFee:
      type: object
      description: Any extra charge added to the deal or an invoice such as a processing fee or a shipping tax.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amountPercent:
          type: number
          description: The fee amount calculated in %, e.g., 1% card processing fee.
          maximum: 100
        amountMoney:
          type: number
          description: The flat fee, e.g., 5$ per order.
        name:
          type: string
          description: The fee title.
          maxLength: 64
        type:
          type: string
          description: The fee type.
          maxLength: 32
    Attachment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyIds:
          type: array
          description: The list of associated companies.
          items:
            $ref: "#/components/schemas/Id"
        contactIds:
          type: array
          description: The list of associated contacts.
          items:
            $ref: "#/components/schemas/Id"
        dealIds:
          type: array
          description: The list of associated deals.
          items:
            $ref: "#/components/schemas/Id"
        document:
          $ref: "#/components/schemas/Document"
      description: The Attachment object returned by Inerium API contains information about the uploaded document and related contacts and companies.
    AttachmentRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyIds:
          type: array
          description: The list of associated companies.
          items:
            $ref: "#/components/schemas/Id"
        contactIds:
          type: array
          description: The list of associated contacts.
          items:
            $ref: "#/components/schemas/Id"
        dealIds:
          type: array
          description: The list of associated deals.
          items:
            $ref: "#/components/schemas/Id"
        documentUrl:
          type: string
          description: The upload URL.
      description: The incoming AttchmentRequest object describes an attachment.
    Attachments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: The array of Attachment objects with paging and sorting information.
    Campaign:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The campaign title.
      description: The Campaign object returned by Inperium API describes the marketing activity.
    CampaignRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The campaign title.
        userId:
          $ref: "#/components/schemas/Id"
      description: The incoming Campaign object submitted to Inperium API.
    CampaignCustom:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The campaign title.
        enrolled:
          type: integer
          description: The number of clients enrolled after a campaign.
      description: The custom Campaign object contains an additional 'enrolled' parameter.
    Campaigns:
      type: object
      description: The array of Campaign objects with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Campaign"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    CapturedPaymentIntent:
      type: object
      properties:
        id:
          type: string
      description: The object containing a Stripe payment intent.
    CommunicationMethod:
      type: object
      description: The communication method object that defines a source of communication configured for a company.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        value:
          type: string
          description: The email address or phone number.
        type:
          type: string
          description: The optional parameter that defines if the communication channel is personal or corporate.
        isPrimary:
          type: boolean
    Company:
      type: object
      description: The Company object returned by Inperium API includes the ID, activities, and the properties stored in a JSON format. To retrieve property definitions, send a GET request to '/properties'.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
          description: The JSON containing company properties and their values, such as a company name or employee count.
          example:
            companyName: Arts Inc.
            industry: RETAIL
            employeeCount: 200
            country: US
            type: LEAD
            city: Newtown
            state: CA
            description: Musical instruments shop
            userId: $OBJECT-UUID
            contactIds: [$OBJECT-UUID, $OBJECT-UUID]
        createdAt:
          type: integer
          format: int64
          description: The date the company was created or imported.
        updatedAt:
          type: integer
          format: int64
          description: The date the company was last modified.
    CompanyRequest:
      description: The incoming object that describes company properties such as a company name or employee count. To retrieve property definitions, send a GET request to '/properties'.
      type: object
      additionalProperties: true
      example:
        companyName: Arts Inc.
        industry: RETAIL
        employeeCount: 200
        country: US
        type: LEAD
        city: Newtown
        state: CA
        description: Musical instruments shop
    CompanyRelationshipRequest:
      type: object
      description: The incoming company relationship object enables you to link companies and define relations between companies.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        companyId:
          type: string
          description: The ID of the origin company.
          format: uuid
        parentCompanyId:
          type: string
          description: The ID of the parent company.
          format: uuid
    CompanyRelationship:
      description: The company relationship object defines company hierarchy.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        company:
          $ref: "#/components/schemas/Company"
        parentCompany:
          $ref: "#/components/schemas/Company"
    CompanyRelationships:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CompanyRelationship"
      description: The list of company's relationships.
    Companies:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: The list of companies with paging data.
    Contact:
      description: The contact object returned by Inperium API includes the ID, activities, and the properties stored in a JSON format. To retrieve property definitions, send a GET request to '/properties'.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
          description: The JSON containing contact properties and their values, such as a name or employee title.
          example:
            emails:
              - id: $OBJECT-UUID
                value: emma.clock@email.com
                type: PERSONAL
                isPrimary: true
            lastName: Clock
            firstName: Emma
            companyId: $OBJECT-UUID
            userId: $OBJECT-UUID
        createdAt:
          type: integer
          format: int64
          description: The date the contact was created or imported.
        updatedAt:
          type: integer
          format: int64
          description: The date the contact was last modified.
    ContactRequest:
      description: The incoming object that describes contact properties such as a name or employee title. To retrieve property definitions, send a GET request to '/properties'.
      type: object
      additionalProperties: true
      example:
        emails:
          - id: $OBJECT-UUID
            value: emma.clock@email.com
            type: PERSONAL
            isPrimary: true
        lastName: Clock
        firstName: Emma
    ContactPaymentMethod:
      description: The contact's preferred method of payment with its details.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        contactId:
          $ref: "#/components/schemas/Id"
        fingerprint:
          type: string
          description: Verification information.
    Contacts:
      type: object
      description: The list of contacts with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    CreatePaymentIntent:
      type: object
      properties:
        payment:
          $ref: "#/components/schemas/PaymentRequest"
        useTerminal:
          type: boolean
          description: The true/false parameter that defines the terminal usage.
      description: The incoming object that instructs Stripe to create a payment intent.
    Deal:
      type: object
      description: The deal object returned by Inperium API includes the ID, activities, the timestamp, and he properties stored in a JSON format. To retrieve property definitions, send a GET request to '/properties'.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
          description: The JSON containing product properties and their values, such as a deal name or value.
          example:
            companyId: $OBJECT-UUID
            name: Small band pack
            userId: $OBJECT-UUID
            contactIds: [$OBJECT-UUID, $OBJECT-UUID]
            stageId: $OBJECT-UUID
            pipelineId: $OBJECT-UUID
        createdAt:
          type: integer
          format: int64
          description: The date the deal was created or imported.
        updatedAt:
          type: integer
          format: int64
          description: The date the deal was last modified.
    DealRequest:
      type: object
      additionalProperties: true
      description: The incoming object that describes deal properties such as a deal name or value. To retrieve property definitions, send a GET request to '/properties'.
      example:
        name: Small band pack
        userId: $OBJECT-UUID
        contactIds: [$OBJECT-UUID, $OBJECT-UUID]
        stageId: $OBJECT-UUID
        pipelineId: $OBJECT-UUID
    Deals:
      type: object
      description: The list of deals with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Deal"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    DictionaryItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          minLength: 1
          type: string
          description: The ID of the item.
        caption:
          minLength: 1
          type: string
          description: The display name.
        description:
          type: string
          description: The item description or any additional information.
        extendedAttributes:
          type: object
          properties: {}
          description: Additional properties.
      description: An entry in a preset dictionary (e.g., currency). Dictionary items cannot be modified.
    DictionaryItems:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DictionaryItem"
      description: The list of dictionary items.
    DocumentType:
      type: object
      description: The type of the uploaded file.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        defaultCaption:
          type: string
          description: The display name.
        mimeType:
          type: string
          description: The media (MIME) type.
        fileExtension:
          type: string
          description: The document extension such as pdf.
    Document:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        authorId:
          $ref: "#/components/schemas/Id"
        typeId:
          $ref: "#/components/schemas/Id"
        filename:
          minLength: 1
          type: string
          description: The file name.
        contentSize:
          type: integer
          description: The file size.
        contentPreview:
          type: string
          description: A short preview.
        description:
          type: string
          description: Information about the file.
        createdAt:
          type: integer
          format: int64
          description: The date the file was uploaded.
        updatedAt:
          type: integer
          format: int64
          description: The date the file was modified.
      description: A document stored in Inperium Sell.
    ErrorModel:
      required:
        - code
        - type
      type: object
      properties:
        code:
          type: string
          description: The error code.
        message:
          type: string
          description: The error message.
        type:
          type: string
          description: The error level (error, warn, or info).
          enum:
            - ERROR
            - WARN
            - INFO
        details:
          type: string
          description: Comma-separated list of fields, which caused the error condition.
      description: An error returned by Inperium API.
    Email:
      anyOf:
        - $ref: "#/components/schemas/CommunicationMethod"
    ExportRequest:
      type: object
      description: The object defines parameters for export.
      properties:
        entityType:
          type: string
          description: The entity to be exported.
          enum:
            - COMPANIES
            - DEALS
            - PRODUCTS
            - CONTACTS
        fileFormat:
          type: string
          description: The export file format.
          enum:
            - CSV
            - PDF
            - XLS
            - XLSX
        properties:
          type: array
          description: The export properties.
          items:
            type: string
        filter:
          type: string
          description: This parameter controls filtering. Enter your query here, Inperium will look for matching records. For example, enter 'AND(eq(firstName,Bob),eq(lastName,Lee))' to filter out records with Bob Lee.
        pageNumber:
          type: integer
          format: int64
          description: The page to be exported.
        pageSize:
          type: integer
          format: int64
          description: The number of records per page.
        sort:
          type: string
          description: The sorting.
    Export:
      type: object
      description: The export outcome.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        filename:
          type: string
          description: The name of the file containing exported data.
    Form:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The form title.
        inlineMessage:
          type: string
          description: The displayed message.
        submitText:
          type: string
          description: The input text.
        redirectUrl:
          type: string
          description: The URL the form redirects to.
        style:
          type: string
          description: The form style.
        fields:
          type: array
          description: The list of form fields.
          items:
            $ref: "#/components/schemas/FormField"
      description: The object describing a custom form.
    FormField:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        formId:
          $ref: "#/components/schemas/Id"
        labelHidden:
          type: boolean
          description: The true/false parameter that defines if the label should be hidden.
        placeholder:
          type: string
          description: An example text.
        defaultValue:
          type: string
          description: A default value for this field.
        label:
          type: string
          description: The display name.
        sortOrder:
          type: integer
          description: The sorting details.
        required:
          type: boolean
          description: The true/false parameter that defines if the field is mandatory.
        hidden:
          type: boolean
          description: The true/false parameter that defines if the field should be hidden from view.
        definition:
          $ref: "#/components/schemas/PropertyDefinition"
        description:
          type: string
          description: Additional information about the form field.
      description: The object describing a form field.
    Forms:
      type: object
      description: The list of forms with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Form"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    GlobalSearchResult:
      type: object
      description: Data returned by Inperium API.
      properties:
        type:
          type: string
          description: The type of entity.
        avatar:
          type: string
          description: The picture.
        title:
          type: string
          description: The entity name.
        description:
          type: string
          description: The additional description.
        itemId:
          type: string
          format: uuid
          description: The item.
        additionalProperties:
          type: string
          description: Additional details.
    GlobalSearchResults:
      type: object
      description: The list of results returned by Global Search.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/GlobalSearchResult"
    Id:
      type: string
      format: uuid
      description: A unique object identifier.
      example: $OBJECT-UUID

    Import:
      type: object
      description: Information about the import results.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        filename:
          type: string
          description: The imported file name.
        importDate:
          type: integer
          format: int64
          description: The import date.
        result:
          type: object
          description: The import outcome.
          additionalProperties: true
          example:
            DEALS:
              errors: ""
              created: 10
              updated: 0
            CONTACTS:
              errors: ""
              created: 20
              updated: 0
            PRODUCTS:
              errors: ""
              created: 0
              updated: 0
            COMPANIES:
              errors: ""
              created: 10
              updated: 0
    Imports:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Import"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: The list of import events.
    Integration:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        anchor:
          type: string
          description: The integration anchor.
        name:
          type: string
          description: The title.
        description:
          type: string
          description: The integration details.
        type:
          type: string
          description: The type of the integration.
      description: The integration configuration.
    Integrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Integration"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: The list of integrations with paging data.
    InvoiceRequest:
      type: object
      description: The incoming object that facilitates invoice creation or modification.
      required:
        - addressLine1
        - city
        - country
        - zip
        - contactId
        - date
        - dueDate
        - number
        - items
      properties:
        addressLine1:
          type: string
          description: The recipient's address.
        addressLine2:
          type: string
          description: The recipient's address.
        city:
          type: string
          description: The city or town.
        zip:
          type: string
          description: The postal code.
        state:
          type: string
          description: The recipient's state (if applicable).
        country:
          type: string
          description: The recipient's country.
        additionalFees:
          type: array
          description: The list of applicable fees.
          items:
            $ref: "#/components/schemas/AdditionalFee"
        contactId:
          $ref: "#/components/schemas/Id"
        date:
          type: integer
          format: int64
          description: The date the invoice was issued.
        dealId:
          $ref: "#/components/schemas/Id"
        dueDate:
          type: integer
          format: int64
          description: The date by which the invoice must be paid.
        items:
          type: array
          description: The products included in the invoice.
          items:
            $ref: "#/components/schemas/Item"
        number:
          type: string
          description: The invoice number.
        paymentPlans:
          type: array
          description: The list of payment plans enabled for the invoice.
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
    Invoice:
      type: object
      description: The object returned by Inperium API includes information about an invoice awaiting payment.
      properties:
        addressLine1:
          type: string
          description: The recipient's address.
        addressLine2:
          type: string
          description: The recipient's address.
        city:
          type: string
          description: The city or town.
        zip:
          type: string
          description: The postal code.
        state:
          type: string
          description: The recipient's state (if applicable).
        country:
          type: string
          description: The recipient's country.
        id:
          $ref: "#/components/schemas/Id"
        additionalFees:
          type: array
          description: The list of applicable fees.
          items:
            $ref: "#/components/schemas/AdditionalFee"
        contact:
          $ref: "#/components/schemas/Contact"
        date:
          type: integer
          format: int64
          description: The date the invoice was issued.
        deal:
          $ref: "#/components/schemas/Deal"
        dueDate:
          type: integer
          format: int64
          description: The date by which the invoice must be paid.
        items:
          type: array
          description: The products included in the invoice.
          items:
            $ref: "#/components/schemas/Item"
        amountPaid:
          type: number
          description: The sum that has been paid so far. Managers can split invoices in several payments.
        total:
          type: number
          description: The total sum.
        amountDue:
          type: number
          description: The remaining amount to be paid.
        number:
          type: string
          description: The invoice number.
        paymentPlans:
          type: array
          description: The list of payment plans enabled for the invoice.
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
        payments:
          type: array
          description: The list of processed payments.
          items:
            $ref: "#/components/schemas/Payment"
        status:
          type: string
          description: The invoice status such as open, paid, or overdue.
          enum:
            - PAID
            - OVERDUE
            - OPEN
        syncedToIntegration:
          type: boolean
          description: The true/false parameter that marks if the invoice is in sync with an integration.
    InvoiceEmail:
      type: object
      properties:
        to:
          type: string
          description: The client's email address.
        from:
          type: string
          description: The sender email address.
        replyTo:
          type: string
          description: In case the invoice email is sent as a reply to a previous message.
        subject:
          type: string
          description: The subject of the email.
        message:
          type: string
          description: The message accompanying the invoice.
      description: The invoice email object facilitates sending an invoice to a customer.
    InvoicePaymentPlan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amount:
          type: number
          description: The amount to be paid.
        invoiceId:
          $ref: "#/components/schemas/Id"
        invoiceNumber:
          type: string
          description: The invoice number.
        paymentDate:
          type: integer
          format: int64
          description: The payment due date.
        paymentMethod:
          type: string
          description: The payment method.
        contactFirstName:
          type: string
          description: The name of the contact person.
        contactLastName:
          type: string
          description: The surname of the contact person.
      description: The payment paln for a invoice. For each invoice, a manager can suggest a payment schedule and split the total amount into several payments.
    InvoicePaymentPlans:
      type: object
      description: The list of invoice payment plans with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InvoicePaymentPlan"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Invoices:
      type: object
      description: The list of invoices.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Invoice"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Item:
      type: object
      description: The products and services are added to invoices as items.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        price:
          type: number
          description: The price per item.
        discountMoney:
          description: The fixed amount of money to be deducted from the subtotal, e.g., $5.
          type: number
        discountPercent:
          description: The percentage-based discount, e.g., 5%.
          type: number
          maximum: 100
        quantity:
          type: integer
          format: int64
          description: The number of included products.
        value:
          type: number
          description: The total calculated as the price multiplied by quantity.
        product:
          $ref: "#/components/schemas/Product"
        dealId:
          $ref: "#/components/schemas/Id"
        quoteId:
          $ref: "#/components/schemas/Id"
        invoiceId:
          $ref: "#/components/schemas/Id"
    ItemsAndAdditionalFees:
      type: object
      description: The products included in the deal as well as various taxes and fees.
      properties:
        items:
          type: array
          description: The list of items.
          items:
            $ref: "#/components/schemas/Item"
        additionalFees:
          type: array
          description: The list of applicable fees.
          items:
            $ref: "#/components/schemas/AdditionalFee"
    Items:
      type: object
      description: The list of items with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    OAuth2Redirect:
      type: object
      properties:
        redirectUrl:
          type: string
          description: The URL for redirection.
      description: The object containing a redirect URL to the OAuth2 provider.
    MessageRequest:
      type: object
      description: The object describes the message that will be sent in bulk, including recipients, the message text, and its subject.
      properties:
        messageCenterAccountId:
          $ref: "#/components/schemas/Id"
        toParticipants:
          type: array
          description: The list of recipients.
          minItems: 1
          items:
            $ref: "#/components/schemas/Participant"
        subject:
          type: string
          description: The subject of the message.
          minLength: 1
        body:
          type: string
          minLength: 1
      required:
        - messageCenterAccountId
        - toParticipants
        - subject
        - body
    Participant:
      type: object
      description: The recipient.
      properties:
        name:
          type: string
          description: The participant's name.
        email:
          type: string
          format: email
          description: The participant's email address.
      required:
        - email
    PageAndSort:
      type: object
      description: Paging and sorting information.
      example:
        pageNumber: 1
        pageSize: 20
        totalNumberOfRecords: 1
        totalNumberOfPages: 1
        hasNextPage: false
        hasPreviousPage: false
        sortingCriteria: null
        hasMore: false
    Payment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        stripeId:
          type: string
          description: The Stripe ID.
        invoice:
          $ref: "#/components/schemas/Invoice"
        currency:
          type: string
          description: The currency of the payment.
        description:
          type: string
          description: The payment notes or description.
        amount:
          type: number
          description: The amount paid.
        date:
          type: integer
          format: int64
          description: The date the payment was processed.
        stripePaymentMethod:
          $ref: "#/components/schemas/StripePaymentMethod"
        paymentMethod:
          type: string
          description: The payment method.
        declinedReason:
          type: string
          description: In case the payment was declined, provide a reason.
        status:
          type: string
          description: The status of the payment.
      description: The payment object contains information about incoming payment.
    PaymentRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        invoiceId:
          $ref: "#/components/schemas/Id"
        currency:
          type: string
          description: The currency of the payment.
        amount:
          type: number
          description: The amount paid.
        paymentMethod:
          type: string
          description: The payment method.
        stripePaymentMethod:
          $ref: "#/components/schemas/StripePaymentMethod"
        description:
          type: string
          description: The payment notes or description.
        date:
          type: integer
          format: int64
          description: The date the payment was processed.
        status:
          type: string
          description: The status of the payment.
        declinedReason:
          type: string
          description: In case the payment was declined, provide a reason.
        stripeId:
          type: string
          description: The Stripe ID.
      description: The incoming objects that describes a new payment.
    PaymentIntent:
      type: object
      properties:
        amount:
          type: integer
          format: int64
          description: The amount to be charged.
        transfer_group:
          type: string
          description: This parameter identifies if the payment is a part of a group.
        amount_received:
          type: integer
          format: int64
          description: The amount collected.
        application_fee_amount:
          type: integer
          format: int64
          description: The total amount of additional fees and taxes.
        canceled_at:
          type: integer
          format: int64
          description: The timestamp in case the payment was canceled.
        cancellation_reason:
          type: string
          description: The reason for cancelling the payment intent.
        capture_method:
          type: string
          description: The way the funds will be captured from the client's account.
        client_secret:
          type: string
          description: This secret is used to process a payment.
        confirmation_method:
          type: string
          description: This parameter defines if additional confirmation is required.
        created:
          type: integer
          format: int64
          description: The timestamp when the payment intent was created.
        currency:
          type: string
          description: The currency of the payment.
        customer:
          type: object
          description: The ID of the customer.
          properties: {}
        description:
          type: string
          description: Comments or any additional information about the payment intent.
        id:
          type: string
          description: A unique identifier of the object.
        invoice:
          type: object
          description: The ID of the invoice.
          properties: {}
        amount_capturable:
          type: integer
          format: int64
          description: The amount that can be captured.
        object:
          type: string
          description: The type of object.
        on_behalf_of:
          type: object
          description: The funds recipient.
          properties: {}
        payment_method:
          type: object
          description: The ID of the payment method.
          properties: {}
        payment_method_options:
          type: string
          description: Details specific to the payment method.
        payment_method_types:
          type: array
          description: The list of allowed payment method types.
          items:
            type: string
        receipt_email:
          type: string
          description: The email address for sending a receipt.
        review:
          type: object
          description: The ID of the review.
          properties: {}
        setup_future_usage:
          type: string
          description: This parameter indicates if the payment method selected in this payment intent will be reused in the future.
        shipping:
          type: object
          description: Shipping details.
          properties: {}
        source:
          type: object
          description: The source.
          properties: {}
        statement_descriptor:
          type: string
          description: A description for the customer's statements.
        statement_descriptor_suffix:
          type: string
          description: A description for the customer's statements.
        status:
          type: string
          description: The status of the payment.
        transfer_data:
          type: object
          description: This data is used to create a transfer once the payment is finalized.
          properties: {}
        livemode:
          type: boolean
          description: The true/false parameter that defines if the payment intent exists in the live mode (true) or test mode (false).
      description: The PaymentIntent object contains information about the Stripe payment intent. For more details, refer to Stripe documentation.
    Payments:
      type: object
      description: The list of payments with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Pipeline:
      type: object
      description: The object returned by Inperium API contains pipeline details including its name and the list of stages.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The pipeline name.
        stages:
          type: array
          description: The list of pipeline stages.
          items:
            $ref: "#/components/schemas/Stage"
    PipelineRequest:
      type: object
      description: The incoming object that defines a pipeline.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The pipeline name.
        stages:
          type: array
          description: The list of pipeline stages.
          items:
            $ref: "#/components/schemas/StageRequest"
      required:
        - name
    Pipelines:
      type: object
      description: The list of pipelines with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Pipeline"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    PipelineStatistics:
      type: object
      description: The data on pipeline usage.
      properties:
        stages:
          type: array
          description: The list of stages.
          items:
            type: object
            description: The stage data.
            properties:
              stageId:
                $ref: "#/components/schemas/Id"
              dealsTotalValue:
                type: number
                description: The overall value calculated for all deals.
              dealsCount:
                type: integer
                description: The total number of deals.
                format: int64
    PhoneNumber:
      anyOf:
        - $ref: "#/components/schemas/CommunicationMethod"
    DictionaryEntry:
      type: object
      properties:
        label:
          type: string
          description: The display name.
        description:
          type: string
          description: Comments or additional notes.
        value:
          type: string
          description: The value of the option. In most cases, the value is the same as the label.
        group:
          type: string
          description: The type or a subset the entry belongs to.
      description: The dictionary entry.
    Dictionary:
      type: array
      description: The list of entries in the dictionary.
      items:
        $ref: "#/components/schemas/DictionaryEntry"
    Product:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        tenantId:
          $ref: "#/components/schemas/Id"
        properties:
          type: object
          additionalProperties: true
          description: The list of product properties.
          example:
            code: ir_hp
            cost: 2380
            price: 2500
            name: Harp
            description: Small irish harp
      description: The Product object returned by Inperium API contains information about a product or a service offered by the tenant.
    ProductRequest:
      description: The incoming object that describes product properties. To retrieve property definitions, send a GET request to '/properties'.
      type: object
      additionalProperties: true
      example:
        code: ir_hp
        cost: 2380
        price: 2500
        name: Harp
        description: Small irish harp
    Products:
      type: object
      description: The list of products with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    PropertyConfig:
      description: A complete description of the field (or property) used in Inperium Sell.
      anyOf:
        - $ref: "#/components/schemas/PropertyDefinition"
        - type: object
          properties:
            usedIn:
              type: integer
              format: int64
              description: The number of Inperium entities (contacts, companies, etc.) where this properties is defined and used.
            ownerId:
              type: string
              format: uuid
              description: The ID of the user who added this property. 'Null' for builtin properties.
            dataGrid:
              type: boolean
              description: The parameter marks if this property should be displayed in the table view (e.g., on the Contacts page, the Companies page).
            detailsPage:
              type: boolean
              description: The parameter marks if this property should be displayed on the object card (e.g., when a user drills down to a company).
            bulkUpdate:
              type: boolean
              description: The parameter marks if this property should be available for bulk updating in the UI (e.g., bulk update allows changing several objects at once).
            template:
              type: boolean
              description: The parameter marks if this property can be used in the templates in the UI.
            filtering:
              type: boolean
              description: The parameter marks if this property can be selected for filtering in the UI.
            propertyOptions:
              type: array
              description: The list of options.
              items:
                $ref: "#/components/schemas/PropertyOption"
            validation:
              type: object
              description: The validation parameters for the property such as a maximum input length or a support pattern.
              properties:
                required:
                  type: boolean
                  description: The true/false parameter that marks if this property must be filled.
                max:
                  type: integer
                  format: int64
                  description: The maximum supported value.
                min:
                  type: integer
                  format: int64
                  description: The minimum supported value.
                maxLength:
                  type: integer
                  format: int64
                  description: The maximum length of the input text.
                minLength:
                  type: integer
                  format: int64
                  description: The minimum length of the input text.
                pattern:
                  type: string
                  description: The pattern to validate the input against.
    PropertyConfigs:
      type: object
      description: The list of property configurations with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PropertyConfig"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    PropertyDefinition:
      required:
        - label
        - name
      type: object
      description: The definition of the property.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        objectType:
          type: string
          description: The property can belong to either a company, a contact, a deal, or a product.
        name:
          type: string
          description: The internal name.
        accessor:
          type: string
          description: The path to access the data within the object.
        label:
          type: string
          description: The display name.
        description:
          type: string
          description: Comments or additional details.
        dataType:
          type: string
          description: The property data type such as string, boolean or monetary.
        currency:
          type: string
          description: For monetary properties, the default currency of the property.
        custom:
          type: boolean
          description: The true/false parameter that marks if the property is builtin (false) or created by user (true).
    PropertyOption:
      type: object
      description: When you create a property with the 'select' data, you have to define the possible values. For example, for the 'Shipping' property with the 'Select' data type, the options will be 'Ground' and 'Air'.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        label:
          type: string
          description: The display name.
        value:
          type: string
          description: The value.
    PropertyRequest:
      description: The incoming object that provides a complete definition of a custom property.
      allOf:
        - $ref: "#/components/schemas/PropertyDefinition"
        - type: object
          properties:
            propertyOptions:
              type: array
              description: The list of property options.
              items:
                $ref: "#/components/schemas/PropertyOption"
    PublicQuote:
      type: object
      description: The quote that is sent to a customer for approval. The PublicQuote object will have less parameters than the Quote object that is used internally.
      properties:
        name:
          type: string
          description: The quote name.
        expirationDate:
          type: integer
          format: int64
          description: The date when this quote expires. The quote can no longer be accepted after this date.
        comment:
          type: string
          description: Any additional quote details.
        purchaseTerm:
          type: string
          description: The purchasing terms.
        value:
          type: number
          description: The quote total.
        createdDate:
          type: integer
          format: int64
          description: The creation timestamp.
        paymentPlans:
          type: array
          description: The list of payment plans configured for this quote.
          items:
            $ref: "#/components/schemas/PublicQuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/PublicQuoteUser"
        quoteContacts:
          type: array
          description: The list of contacts.
          items:
            $ref: "#/components/schemas/PublicQuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/PublicQuoteCompany"
        items:
          type: array
          description: The list of quote items.
          items:
            $ref: "#/components/schemas/PublicQuoteItem"
        additionalFees:
          type: array
          description: The list of additional fees.
          items:
            $ref: "#/components/schemas/PublicQuoteAdditionalFee"
        tenant:
          $ref: "#/components/schemas/PublicQuoteTenant"
        contactAcceptAllowed:
          type: boolean
          description: The true/false parameter that defines if the client can accept the quote.
        signature:
          type: string
          description: The signature text.
        status:
          type: string
          description: The status of the quote. This is the enum parameter and can be set to 'draft', 'created', or 'accepted'.
          enum:
            - DRAFT
            - CREATED
            - ACCEPTED
          example: DRAFT
    PublicQuoteAdditionalFee:
      type: object
      description: The additional fee as it appears in the quote sent to a customer.
      properties:
        amountMoney:
          type: number
          description: The fee amount.
        amountPercent:
          type: number
          description: The percentage amount.
        name:
          type: string
          description: The fee name or description.
        type:
          type: string
          description: The fee type.
    PublicQuoteItem:
      type: object
      description: The quote item as it appears in the quote sent to a customer.
      properties:
        price:
          type: number
        discountMoney:
          description: Fixed amount of money to be deducted from the subtotal, e.g., $5.
          type: number
        discountPercent:
          description: Percentage of subtotal, e.g., 5%.
          type: number
          maximum: 100
        quantity:
          description: The number of articles.
          type: integer
          format: int64
        value:
          type: number
          description: The total per item.
        product:
          $ref: "#/components/schemas/Product"
    PublicQuotePaymentPlan:
      type: object
      description: The payment plan as it appears in the quote sent to a customer.
      properties:
        amount:
          type: number
          description: The pending amount.
        paymentDate:
          type: integer
          format: int64
          description: The payment due date.
        paymentMethod:
          type: string
          description: The payment method to be used.
    PublicQuoteUser:
      type: object
      description: The Inperium user's name as it appears in the quote sent to a customer.
      properties:
        firstName:
          type: string
          description: The given name.
        lastName:
          type: string
          description: The family name.
        email:
          type: string
          description: The email address.
        phoneNumber:
          type: string
          description: The phone number, personal or corporate.
    PublicQuoteContact:
      type: object
      description: The customer's name as it appears in the quote sent to a customer.
      properties:
        firstName:
          type: string
          description: The given name.
        lastName:
          type: string
          description: The family name.
        email:
          type: string
          description: The email address.
        phoneNumber:
          type: string
          description: The contact's phone number.
    PublicQuoteCompany:
      type: object
      description: The customer's name as it appears in the quote sent to a customer.
      properties:
        companyName:
          type: string
          description: The company name.
        domainName:
          type: string
          description: The website.
        addressLine1:
          type: string
          description: The address.
        addressLine2:
          type: string
          description: The address.
        city:
          type: string
          description: The city or town.
        zip:
          type: string
          description: The postal code.
        state:
          type: string
          description: The state, if applicable.
        country:
          type: string
          description: The country name.
    PublicQuoteTenant:
      type: object
      description: The tenant company details as they appear in the quote sent to a customer.
      properties:
        companyLogo:
          type: string
          description: The company logo.
        logoAltText:
          type: string
          description: The logo text.
        defaultCurrency:
          type: string
          description: The default currency.
        companyName:
          type: string
          description: The name of the tenant company.
        name:
          type: string
          description: The internal name.
        domainName:
          type: string
          description: The website.
        addressLine1:
          type: string
          description: The address.
        addressLine2:
          type: string
          description: The address.
        city:
          type: string
          description: The city or town.
        zip:
          type: string
          description: The postal code.
        state:
          type: string
          description: The state, if applicable.
        country:
          type: string
          description: The country name.
    Quote:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The quote title.
        dealId:
          $ref: "#/components/schemas/Id"
        expirationDate:
          type: integer
          format: int64
          description: The date after which the quote can no longer be accepted.
        acceptedAt:
          type: integer
          format: int64
          description: The timestamp when the quote got accepted. You can't make any changes after accepting the quote.
        comment:
          type: string
          description: Any additional details.
        purchaseTerm:
          type: string
          description: The purchasing terms.
        displayColor:
          type: string
          description: The color of the quote.
        companyId:
          $ref: "#/components/schemas/Id"
        avatarUrl:
          type: string
          description: The link to the avatar image.
        language:
          type: string
          description: The preferred language of the quote.
        value:
          type: number
          description: The quote value.
        uid:
          type: string
          format: uuid
          description: The ID of the quote.
        userId:
          $ref: "#/components/schemas/Id"
        paymentPlans:
          type: array
          description: The list of the payment plans associated with the quote.
          items:
            $ref: "#/components/schemas/QuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/QuoteUser"
        quoteContacts:
          type: array
          description: The list of contacts.
          items:
            $ref: "#/components/schemas/QuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/QuoteCompany"
        items:
          type: array
          description: The list of items (products or services) included in the quote.
          items:
            $ref: "#/components/schemas/Item"
        additionalFees:
          type: array
          description: The list of applicable fees and taxes.
          items:
            $ref: "#/components/schemas/AdditionalFee"
        status:
          type: string
          description: The status of the quote. This is the enum parameter and can be set to 'draft', 'created', or 'accepted'.
          enum:
            - DRAFT
            - CREATED
            - ACCEPTED
          example: DRAFT
        mostRelevant:
          type: boolean
          description: The true/false parameter that defines if this quote is considered to be the most likely to be accepted. The quote with a highest chances of being accepted should be set to 'true'. Nonetheless, the customer can accept any quote.
          example: false
        signatureUrl:
          type: string
          description: The signature.
      description: The Quote object returned by Inperium API contains information about the quote such as its name and value, included products and fees.
    QuoteRequest:
      type: object
      description: This object is submitted to Inperium API when you create a new quote or update an existing quote.
      required:
        - status
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The quote title.
          maxLength: 100
        dealId:
          $ref: "#/components/schemas/Id"
        expirationDate:
          type: integer
          format: int64
          description: The date after which the quote can no longer be accepted.
        acceptedAt:
          type: integer
          format: int64
          description: The timestamp when the quote got accepted. You can't make any changes after accepting the quote.
        comment:
          type: string
          description: Any additional details.
          maxLength: 2000
        purchaseTerm:
          type: string
          description: The purchasing terms.
          maxLength: 5000
        companyId:
          $ref: "#/components/schemas/Id"
        value:
          type: number
          description: The total value of the quote.
        paymentPlans:
          type: array
          description: The list of the payment plans associated with the quote.
          items:
            $ref: "#/components/schemas/QuotePaymentPlan"
        quoteUser:
          $ref: "#/components/schemas/QuoteUser"
        quoteContacts:
          type: array
          description: The list of contacts.
          items:
            $ref: "#/components/schemas/QuoteContact"
        quoteCompany:
          $ref: "#/components/schemas/QuoteCompany"
        additionalFees:
          type: array
          description: The list of applicable fees and taxes.
          items:
            $ref: "#/components/schemas/AdditionalFee"
        items:
          type: array
          description: The list of items (products or services) included in the quote.
          items:
            $ref: "#/components/schemas/Item"
        status:
          type: string
          description: The status of the quote. This is the enum parameter and can be set to 'draft', 'created', 'sent', or 'accepted'.
          enum:
            - DRAFT
            - CREATED
            - SENT
            - ACCEPTED
          example: DRAFT
        mostRelevant:
          type: boolean
          example: false
          description: The true/false parameter that defines if this quote is considered to be the most likely to be accepted. The quote with a highest chances of being accepted should be set to 'true'. Nonetheless, the customer can accept any quote.
        signatureId:
          type: string
          format: uuid
          description: The signature.
        avatarId:
          $ref: "#/components/schemas/Id"
    QuoteCompany:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        originCompanyId:
          $ref: "#/components/schemas/Id"
        companyName:
          type: string
          description: The company name.
        domainName:
          type: string
          description: The website.
        addressLine1:
          type: string
          description: The address.
        addressLine2:
          type: string
          description: The address.
        city:
          type: string
          description: The city or town.
        zip:
          type: string
          description: The postal code.
        state:
          type: string
          description: The state, if applicable.
        country:
          type: string
          description: The country name.
      description: The object contains information about the company as it will appear in the quote. Unlike the 'company' object, it has less parameters.
    QuoteContact:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        originContactId:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
          description: The contact's given name.
        lastName:
          type: string
          description: The contact's family name.
        email:
          type: string
          description: The email address.
        phoneNumber:
          type: string
          description: The personal or corporate phone number.
      description: The object contains information about the contact as it will appear in the quote. Unlike the 'contact' object, it has less parameters.
    QuotePaymentPlan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        amount:
          type: number
          description: The pending amount.
        quoteId:
          $ref: "#/components/schemas/Id"
        paymentDate:
          type: integer
          format: int64
          description: The payment due date.
        paymentMethod:
          type: string
          description: The suggested payment method.
      description: The object contains information about the payment plan offered in the quote.
    QuoteToInvoice:
      type: object
      description: This object facilitates converting an accepted quote to an invoice.
      required:
        - contactId
        - dueDate
      properties:
        contactId:
          $ref: "#/components/schemas/Id"
        dueDate:
          type: integer
          format: int64
          description: The date when the payment must be done.
        addressLine1:
          type: string
          description: The address.
        addressLine2:
          type: string
          description: The address.
    QuoteUser:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        firstName:
          type: string
          description: The user's given name.
        lastName:
          type: string
          description: The user's family name.
        email:
          type: string
          description: The email address.
        phoneNumber:
          type: string
          description: The phone number.
        originUserId:
          $ref: "#/components/schemas/Id"
      description: The object contains information about the user who created a quote.
    Quotes:
      type: object
      description: The list of quotes with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Quote"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Report:
      type: object
      description: The object contains the report description without actual report data.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The report title.
    Reports:
      type: object
      description: The list of reports with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Report"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    ReportData:
      type: object
      description: Unlike the Report object that provides just a description, this object contains actual data. It provides values for the X-axis and Y-axis that can be further presented as a chart.
      properties:
        xAxis:
          type: object
          description: The value for the X-axis.
          properties:
            label:
              type: string
              description: The display name.
            data:
              type: array
              description: The list of values.
              items:
                type: object
        yAxis:
          type: object
          description: The value for the Y-axis.
          properties:
            label:
              type: string
              description: The display name.
            data:
              type: array
              description: The list of values.
              items:
                type: object
      example:
        xAxis:
          label: Date
          data:
            [
              "2021-04-10T15:53:53.284Z",
              "2021-04-14T17:44:53.284Z",
              "2021-04-18T19:35:53.284Z",
            ]
        yAxis:
          label: Deals
          data: [5, 6, 0]
    ResponseError:
      type: object
      description: The error returned by Inperium API.
      properties:
        errors:
          type: array
          description: The list of errors.
          items:
            $ref: "#/components/schemas/ErrorModel"
    SnippetRequest:
      type: object
      description: This object is submitted to the Inperium API when you create a new snippet or update an existing snippet.
      required:
        - name
        - text
      properties:
        name:
          type: string
          description: The name of the snippet.
          maxLength: 100
        text:
          type: string
          description: The text of the snippet.
          maxLength: 20000
    Snippet:
      type: object
      description: The object describes a reusable text snippet that can be applied to many input fields throughout Inperium.
      required:
        - id
        - name
        - text
        - userId
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The name of the snippet.
          maxLength: 100
        text:
          type: string
          description: The text of the snippet.
          maxLength: 20000
        userId:
          $ref: "#/components/schemas/Id"
        createdAt:
          type: integer
          format: int64
          description: The timestamp when the snippet was created.
        updatedAt:
          type: integer
          format: int64
          description: The timestamp when the snippet was updated.
    Snippets:
      type: object
      description: The list of snippets with paging data.
      required:
        - data
        - paging
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Snippet"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Stage:
      type: object
      description: The Stage object contains information about the stage itself and a link to its parent pipeline.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The display name.
        probability:
          type: number
          description: The expected win probability, e.g., 30 or 60.
        sortOrder:
          type: integer
          description: The position in the pipeline.
        pipelineId:
          $ref: "#/components/schemas/Id"
    StageRequest:
      type: object
      description: The incoming object submitted to Inperium API when you add a new stage or modify an existing stage.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The display name.
        probability:
          type: number
          minimum: 0
          description: The expected win probability, e.g., 30 or 60.
        sortOrder:
          type: integer
          description: The position in the pipeline.
        pipelineId:
          $ref: "#/components/schemas/Id"
      required:
        - name
    Stages:
      type: object
      description: The list of stages.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Stage"
    StripeCredentials:
      type: object
      properties:
        publishableKey:
          type: string
          description: The key that identifies your account with Stripe.
        accountId:
          type: string
          description: The unique account ID with Stripe.
      description: The Stripe authentication details.
    StripePaymentMethod:
      type: object
      properties:
        id:
          type: string
          description: The ID of the payment.
        object:
          type: string
          description: The object type or name.
        billing_details:
          type: object
          description: Billing information specific to the payment method.
          properties: {}
        card:
          $ref: "#/components/schemas/StripePaymentMethodCard"
        card_present:
          type: object
          description: Details related to 'card_preset' payment method, if applicable.
          properties: {}
        created:
          type: integer
          format: int64
          description: The timestamp when the payment was created.
        customer:
          type: string
          description: The ID of the customer.
        livemode:
          type: boolean
          description: The true/false parameter that defines if the payment intent exists in the live mode (true) or test mode (false).
        metadata:
          type: object
          description: Additional information about the object.
          properties: {}
        type:
          type: string
          description: The payment type.
      description: The object facilitates payment processing with Stripe.
    StripePaymentMethodCard:
      type: object
      properties:
        id:
          type: string
          description: The ID of the card.
        wallet:
          type: object
          description: Wallet details, if applicable.
          properties: {}
        checks:
          type: object
          description: Verification of the card address and CVC.
          properties: {}
        country:
          type: string
          description: The country code.
        exp_month:
          type: integer
          format: int64
          description: The expiration month in the two-digit format.
        exp_year:
          type: integer
          format: int64
          description: The expiration year in the four-digit format.
        brand:
          type: string
          description: The card system such as 'visa', 'amex', or 'mastercard'.
        funding:
          type: string
          description: The parameters defines where the funds are coming from, i.e., 'credit', 'debit', 'prepaid', or 'unknown'.
        generated_from:
          type: string
          description: PaymentMethod details.
        last4:
          type: string
          description: The last four digits of the card.
        three_d_secure_usage:
          type: object
          description: The 3D authentication details.
          properties: {}
        fingerprint:
          type: string
          description: The unique card identifier.
      description: This object facilitates payment processing with Stripe. For more information, refer to Stripe API reference.
    StripeReader:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object.
        object:
          type: string
          description: The object type or name.
        deviceSwVersion:
          type: string
          description: The version of software running on this device.
        deviceType:
          type: string
          description: The reader type.
        ipAddress:
          type: string
          description: The local IP address of the reader.
        label:
          type: string
          description: The reader title.
        location:
          type: string
          description: The reader location identifier.
        serialNumber:
          type: string
          description: The serial number assigned to this reader.
        status:
          type: string
          description: The operational status of the reader.
        registrationCode:
          type: string
          description: The registration code assigned to the reader.
      description: The Stripe reader object describes a device that is used for accepting payments. For more details, refer to Stripe API Reference.
    StripeReaderRequest:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object.
        object:
          type: string
          description: The object type or name.
        deviceSwVersion:
          type: string
          description: The version of software running on this device.
        deviceType:
          type: string
          description: The reader type.
        ipAddress:
          type: string
          description: The local IP address of the reader.
        label:
          type: string
          description: The reader title.
        location:
          type: string
          description: The reader location identifier.
        serialNumber:
          type: string
          description: The serial number assigned to this reader.
        status:
          type: string
          description: The operational status of the reader.
        registrationCode:
          type: string
          description: The registration code assigned to the reader.
      description: This object is submitted to Inperium API when you add a new Stripe reader or update an existing reader. For more details, refer to Stripe API Reference.
    StripeReaders:
      type: object
      description: The list of available Stripe readers.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StripeReader"
        object:
          type: string
          description: The object type or name.
        url:
          type: string
          description: The endpoint address.
        hasMore:
          type: boolean
          description: The true/false parameters that marks if there are more readers.
    Template:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        body:
          type: string
          description: The contents of this template.
        name:
          type: string
          description: The template title.
        subject:
          type: string
          description: The email subject.
        companyWide:
          type: boolean
          default: false
          description: This true/false parameters defines if the template is shared across all users (true) in the company or is personal (false).
        tenantId:
          $ref: "#/components/schemas/Id"
        userId:
          $ref: "#/components/schemas/Id"
        createdAt:
          type: integer
          format: int64
          description: The timestamp when the object was created.
        updatedAt:
          type: integer
          format: int64
          description: The timestamp when the object was updated.
      description: The object describes the email draft with its contents and additional details.
    Templates:
      type: object
      description: The list of templates with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    TenantSettings:
      type: object
      properties:
        defaultCurrency:
          type: string
          description: The currency code.
        primaryColor:
          type: string
          description: The RGB color code.
        secondaryColor:
          type: string
          description: The RGB color code.
        accentColor:
          type: string
          description: The RGB color code.
        accentColorTwo:
          type: string
          description: The RGB color code.
        quotePrefix:
          type: string
          description: A custom prefix to be added to quotes.
        quoteContactAcceptAllowed:
          type: boolean
          description: The true/false parameter that defines if the contacts are allowed to accpet quotes.
        companyLogoUrl:
          type: string
          description: The tenant company logo.
        squareLogoUrl:
          type: string
          description: The tenant company logo.
        logoAltText:
          type: string
          description: The text duplicating the logo.
        revenueGoalPeriod:
          type: string
          description: The timeframe for which the revenue goal is calculated.
        revenueGoal:
          type: number
          description: The desired review value.
      description: The tenant settings objects includes settings specific to Inperium Sell customer such as its branding identity or a preferred currency.
    TenantIntegration:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        integration:
          $ref: "#/components/schemas/Integration"
      description: The API integration enabled for the tenant.
    TenantIntegrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TenantIntegration"
        paging:
          $ref: "#/components/schemas/PageAndSort"
      description: The list of tenant's integrations with paging data.
    TerminalTokenDetails:
      type: object
      properties:
        object:
          type: string
          description: The object type or name.
        secret:
          type: string
          description: The Stripe secret key.
      description: The object containing a terminal token.
    View:
      type: object
      description: The view object controls what data to display in Inperium Sell, i.e., the columns in the table view, their order, applied filters.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The view title.
        state:
          type: object
          description: The view current status.
          additionalProperties: true
        filter:
          description: The applied filter. To learn more, see the 'Filtering' article.
          type: object
          additionalProperties: true
          example:
            groups:
              filters:
                - type: IS_EQUAL_TO
                  value: [ME]
                  propertyId: $OBJECT-UUID
              condition: AND
            condition: AND
        columns:
          type: array
          description: The list of columns.
          items:
            type: object
            properties:
              propertyId:
                $ref: "#/components/schemas/Id"
              columnOrder:
                type: integer
                description: The position of the column.
        type:
          type: string
          description: The type of object the view applies to.
        custom:
          type: boolean
          description: The true/false parameter that defines if the view is builtin (false) or custom (true).
        private:
          type: boolean
          description: This true/false parameters defines if the view is shared across all users (true) in the company or is personal (false).
    ViewRequest:
      type: object
      description: This object is submitted to Inperium API when you create a new view or update an existing view. Use it to create custom filters and column sets.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: The view title.
        state:
          type: object
          description: The view current status.
          additionalProperties: true
        filter:
          description: The applied filter.
          type: object
          additionalProperties: true
        columns:
          type: array
          description: The list of columns.
          items:
            type: object
            properties:
              propertyId:
                $ref: "#/components/schemas/Id"
              columnOrder:
                type: integer
                description: The position of the column.
        type:
          type: string
          description: The type of object the view applies to.
        custom:
          type: boolean
          description: The true/false parameter that defines if the view is builtin (false) or custom (true).
        private:
          type: boolean
          description: This true/false parameters defines if the view is shared across all users (true) in the company or is personal (false).
    Views:
      type: object
      description: The list of views with paging data.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/View"
        paging:
          $ref: "#/components/schemas/PageAndSort"
    Widgets:
      type: object
      description: The Widgets object is an aggregation of smaller widget components. It gives you insights into the sales team progress. To learn more about charts and analytics, refer to Inperium Sell user documentation.
      properties:
        dealsRevenue:
          $ref: "#/components/schemas/WidgetDealsRevenue"
        deals:
          $ref: "#/components/schemas/WidgetDeals"
        dealsByPipeline:
          $ref: "#/components/schemas/WidgetDealsByPipeline"
        revenueGoal:
          $ref: "#/components/schemas/WidgetRevenueGoal"
        completedActivities:
          $ref: "#/components/schemas/WidgetCompletedActivities"
        newLeads:
          $ref: "#/components/schemas/WidgetNewLeads"
        dealsLeaderboard:
          $ref: "#/components/schemas/WidgetDealsLeaderboard"
        activitiesLeaderboard:
          $ref: "#/components/schemas/WidgetActivitiesLeaderboard"
    WidgetDealsRevenue:
      type: object
      description: The widget that shows revenue details.
      properties:
        won:
          type: number
          description: The total value of deals marked as 'won'.
        wonDifference:
          type: number
          description: The difference with a previous period.
        lost:
          type: number
          description: The total value of deals marked as 'lost'.
        lostDifference:
          type: number
          description: The difference with a previous period.
    WidgetDeals:
      type: object
      description: The widget that shows deal statistics.
      properties:
        created:
          type: integer
          description: The number of deals created.
        createdDifference:
          type: integer
          description: The difference with a previous period.
        won:
          type: integer
          description: The number of deals marked as 'won'.
        wonDifference:
          type: integer
          description: The difference with a previous period.
        lost:
          type: integer
          description: The number of deals marked as 'lost'.
        lostDifference:
          type: integer
          description: The difference with a previous period.
    WidgetDealsByPipeline:
      type: object
      description: The widget that shows the number of deals in each pipeline.
      properties:
        pipelineDeals:
          type: array
          description: The list of pipelines with deals.
          items:
            $ref: "#/components/schemas/PipelineDeals"
    PipelineDeals:
      type: object
      description: Deal statistics per pipeline.
      properties:
        pipelineName:
          type: string
          description: The pipeline name or title.
        dealsCount:
          type: integer
          description: The total number of deals.
          format: int64
        dealsDifference:
          type: integer
          description: The difference with a previous period.
          format: int64
    WidgetRevenueGoal:
      type: object
      description: The widget helps identify how close the company is to reaching its revenue goal. The revenue goal is set in the TenantSettings object and you can check it by sending a GET request to '/tenant/settings'.
      properties:
        currentValue:
          type: number
          description: The deals total at the moment.
    CompletedActivities:
      type: object
      description: A part of widget that shows current activities.
      properties:
        emails:
          type: integer
          format: int32
          description: The number of emails sent.
        meetings:
          type: integer
          format: int32
          description: The number of meetings added.
        calls:
          type: integer
          format: int32
          description: The number of call made.
        tasks:
          type: integer
          format: int32
          description: The number of tasks added.
    CompletedActivitiesDifferences:
      type: object
      description: A part of widget that shows how many emails, meeting, and other activities were conducted in comparison with a previous period.
      properties:
        emailsDifference:
          type: integer
          description: The difference with a previous period.
          format: int32
        meetingsDifference:
          type: integer
          description: The difference with a previous period.
          format: int32
        callsDifference:
          type: integer
          description: The difference with a previous period.
          format: int32
        tasksDifference:
          type: integer
          description: The difference with a previous period.
          format: int32
    WidgetCompletedActivities:
      description: The widget shows activity statistics.
      allOf:
        - $ref: "#/components/schemas/CompletedActivities"
        - $ref: "#/components/schemas/CompletedActivitiesDifferences"
    WidgetNewLeads:
      type: object
      description: The widget shows new clients added to Inperium Sell.
      properties:
        companies:
          type: integer
          description: The number of new companies.
        companiesDifference:
          type: integer
          description: The difference with a previous period.
        contacts:
          type: integer
          description: The number of new contacts.
        contactsDifference:
          type: integer
          description: The difference with a previous period.
    WidgetDealsLeaderboard:
      type: object
      description: The widget shows Inperium users who created most deals.
      properties:
        leaders:
          type: array
          description: The list of users.
          items:
            $ref: "#/components/schemas/UserStatisticsDeals"
    WidgetActivitiesLeaderboard:
      type: object
      description: The widget shows the most active Inperium users based on the number of emails they sent, calls made, etc.
      properties:
        leaders:
          type: array
          description: The list of users.
          items:
            $ref: "#/components/schemas/UserStatisticsCompletedActivities"
    UserStatistics:
      type: object
      description: The user data as it appears in widgets.
      properties:
        avatarUrl:
          type: string
          description: The link to user's avatar.
        firstName:
          type: string
          description: The given name.
        lastName:
          type: string
          description: The family name.
        email:
          type: string
          description: The email address.
    UserStatisticsDeals:
      description: A part of the widget that combines user data and deals statistics.
      allOf:
        - $ref: "#/components/schemas/UserStatistics"
        - type: object
          properties:
            deals:
              $ref: "#/components/schemas/WidgetDeals"
    UserStatisticsCompletedActivities:
      description: A part of the widget that combines user data and activity statistics.
      allOf:
        - $ref: "#/components/schemas/UserStatistics"
        - type: object
          properties:
            activities:
              $ref: "#/components/schemas/CompletedActivities"
  parameters:
    ResourceId:
      name: id
      description: A unique object identifier.
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryStringResourceId:
      name: id
      description: A resource identifier.
      in: query
      schema:
        type: string
    ResourceStringId:
      name: id
      description: A resource identifier.
      in: path
      required: true
      schema:
        type: string
    QueryPageNumber:
      name: pageNumber
      in: query
      description: This parameter affects paging. It defines the chunk of data to be retrieved, e.g., records from the page 3.
      schema:
        type: integer
    QueryPageSize:
      name: pageSize
      in: query
      description: This parameter affects paging. It defines the number of records per page
      schema:
        type: integer
    QuerySort:
      name: sort
      in: query
      description: This parameter affects sorting. It specifies the property name to sort records, e.g., by price or date.
      schema:
        type: string
    QueryFilter:
      name: filter
      description: This parameter controls filtering. Enter your query here, Inperium will look for matching records. For example, enter 'AND(eq(firstName,Bob),eq(lastName,Lee))' to filter out records with Bob Lee.
      in: query
      schema:
        type: string
    EntityProperties:
      name: properties
      description: The object properties.
      in: query
      schema:
        type: object
        additionalProperties:
          type: string
